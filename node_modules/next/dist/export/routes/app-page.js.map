{"version":3,"sources":["../../../src/export/routes/app-page.ts"],"sourcesContent":["import type { OutgoingHttpHeaders } from 'node:http'\nimport type { ExportRouteResult, FileWriter } from '../types'\nimport type { RenderOpts } from '../../server/app-render/types'\nimport type { NextParsedUrlQuery } from '../../server/request-meta'\nimport type { RouteMetadata } from './types'\n\nimport type {\n  MockedRequest,\n  MockedResponse,\n} from '../../server/lib/mock-request'\nimport { isDynamicUsageError } from '../helpers/is-dynamic-usage-error'\nimport {\n  NEXT_CACHE_TAGS_HEADER,\n  NEXT_META_SUFFIX,\n  RSC_PREFETCH_SUFFIX,\n  RSC_SUFFIX,\n  RSC_SEGMENTS_DIR_SUFFIX,\n  RSC_SEGMENT_SUFFIX,\n} from '../../lib/constants'\nimport { hasNextSupport } from '../../server/ci-info'\nimport { lazyRenderAppPage } from '../../server/route-modules/app-page/module.render'\nimport { isBailoutToCSRError } from '../../shared/lib/lazy-dynamic/bailout-to-csr'\nimport { NodeNextRequest, NodeNextResponse } from '../../server/base-http/node'\nimport { NEXT_IS_PRERENDER_HEADER } from '../../client/components/app-router-headers'\nimport type { FetchMetrics } from '../../server/base-http'\nimport type { WorkStore } from '../../server/app-render/work-async-storage.external'\nimport type { FallbackRouteParams } from '../../server/request/fallback-params'\nimport { AfterRunner } from '../../server/after/run-with-after'\nimport type { RequestLifecycleOpts } from '../../server/base-server'\n\nexport const enum ExportedAppPageFiles {\n  HTML = 'HTML',\n  FLIGHT = 'FLIGHT',\n  PREFETCH_FLIGHT = 'PREFETCH_FLIGHT',\n  PREFETCH_FLIGHT_SEGMENT = 'PREFETCH_FLIGHT_SEGMENT',\n  META = 'META',\n  POSTPONED = 'POSTPONED',\n}\n\nexport async function prospectiveRenderAppPage(\n  req: MockedRequest,\n  res: MockedResponse,\n  page: string,\n  pathname: string,\n  query: NextParsedUrlQuery,\n  fallbackRouteParams: FallbackRouteParams | null,\n  partialRenderOpts: Omit<RenderOpts, keyof RequestLifecycleOpts>\n): Promise<undefined> {\n  const afterRunner = new AfterRunner()\n\n  // If the page is `/_not-found`, then we should update the page to be `/404`.\n  // UNDERSCORE_NOT_FOUND_ROUTE value used here, however we don't want to import it here as it causes constants to be inlined which we don't want here.\n  if (page === '/_not-found/page') {\n    pathname = '/404'\n  }\n\n  try {\n    await lazyRenderAppPage(\n      new NodeNextRequest(req),\n      new NodeNextResponse(res),\n      pathname,\n      query,\n      fallbackRouteParams,\n      {\n        ...partialRenderOpts,\n        waitUntil: afterRunner.context.waitUntil,\n        onClose: afterRunner.context.onClose,\n        onAfterTaskError: afterRunner.context.onTaskError,\n      },\n      undefined,\n      false\n    )\n\n    // TODO(after): if we abort a prerender because of an error in an after-callback\n    // we should probably communicate that better (and not log the error twice)\n    await afterRunner.executeAfter()\n  } catch (err) {\n    if (!isDynamicUsageError(err)) {\n      throw err\n    }\n\n    // We should fail rendering if a client side rendering bailout\n    // occurred at the page level.\n    if (isBailoutToCSRError(err)) {\n      throw err\n    }\n  }\n}\n\n/**\n * Renders & exports a page associated with the /app directory\n */\nexport async function exportAppPage(\n  req: MockedRequest,\n  res: MockedResponse,\n  page: string,\n  path: string,\n  pathname: string,\n  query: NextParsedUrlQuery,\n  fallbackRouteParams: FallbackRouteParams | null,\n  partialRenderOpts: Omit<RenderOpts, keyof RequestLifecycleOpts>,\n  htmlFilepath: string,\n  debugOutput: boolean,\n  isDynamicError: boolean,\n  fileWriter: FileWriter\n): Promise<ExportRouteResult> {\n  const afterRunner = new AfterRunner()\n\n  const renderOpts: RenderOpts = {\n    ...partialRenderOpts,\n    waitUntil: afterRunner.context.waitUntil,\n    onClose: afterRunner.context.onClose,\n    onAfterTaskError: afterRunner.context.onTaskError,\n  }\n\n  let isDefaultNotFound = false\n  // If the page is `/_not-found`, then we should update the page to be `/404`.\n  // UNDERSCORE_NOT_FOUND_ROUTE value used here, however we don't want to import it here as it causes constants to be inlined which we don't want here.\n  if (page === '/_not-found/page') {\n    isDefaultNotFound = true\n    pathname = '/404'\n  }\n\n  try {\n    const result = await lazyRenderAppPage(\n      new NodeNextRequest(req),\n      new NodeNextResponse(res),\n      pathname,\n      query,\n      fallbackRouteParams,\n      renderOpts,\n      undefined,\n      false\n    )\n\n    const html = result.toUnchunkedString()\n\n    // TODO(after): if we abort a prerender because of an error in an after-callback\n    // we should probably communicate that better (and not log the error twice)\n    await afterRunner.executeAfter()\n\n    const { metadata } = result\n    const {\n      flightData,\n      revalidate = false,\n      postponed,\n      fetchTags,\n      fetchMetrics,\n      segmentData,\n    } = metadata\n\n    // Ensure we don't postpone without having PPR enabled.\n    if (postponed && !renderOpts.experimental.isRoutePPREnabled) {\n      throw new Error('Invariant: page postponed without PPR being enabled')\n    }\n\n    if (revalidate === 0) {\n      if (isDynamicError) {\n        throw new Error(\n          `Page with dynamic = \"error\" encountered dynamic data method on ${path}.`\n        )\n      }\n      const { staticBailoutInfo = {} } = metadata\n\n      if (revalidate === 0 && debugOutput && staticBailoutInfo?.description) {\n        logDynamicUsageWarning({\n          path,\n          description: staticBailoutInfo.description,\n          stack: staticBailoutInfo.stack,\n        })\n      }\n\n      return { revalidate: 0, fetchMetrics }\n    }\n\n    // If page data isn't available, it means that the page couldn't be rendered\n    // properly so long as we don't have unknown route params. When a route doesn't\n    // have unknown route params, there will not be any flight data.\n    if (\n      !flightData &&\n      (!fallbackRouteParams || fallbackRouteParams.size === 0)\n    ) {\n      throw new Error(`Invariant: failed to get page data for ${path}`)\n    }\n\n    let segmentPaths\n    if (flightData) {\n      // If PPR is enabled, we want to emit a prefetch rsc file for the page\n      // instead of the standard rsc. This is because the standard rsc will\n      // contain the dynamic data. We do this if any routes have PPR enabled so\n      // that the cache read/write is the same.\n      if (renderOpts.experimental.isRoutePPREnabled) {\n        // If PPR is enabled, we should emit the flight data as the prefetch\n        // payload.\n        // TODO: This will eventually be replaced by the per-segment prefetch\n        // output below.\n        await fileWriter(\n          ExportedAppPageFiles.PREFETCH_FLIGHT,\n          htmlFilepath.replace(/\\.html$/, RSC_PREFETCH_SUFFIX),\n          flightData\n        )\n\n        if (segmentData) {\n          // Emit the per-segment prefetch data. We emit them as separate files\n          // so that the cache handler has the option to treat each as a\n          // separate entry.\n          segmentPaths = []\n          const segmentsDir = htmlFilepath.replace(\n            /\\.html$/,\n            RSC_SEGMENTS_DIR_SUFFIX\n          )\n          const tasks = []\n          for (const [segmentPath, buffer] of segmentData) {\n            segmentPaths.push(segmentPath)\n            const segmentDataFilePath =\n              segmentPath === '/'\n                ? segmentsDir + '/_index' + RSC_SEGMENT_SUFFIX\n                : segmentsDir + segmentPath + RSC_SEGMENT_SUFFIX\n            tasks.push(\n              fileWriter(\n                ExportedAppPageFiles.PREFETCH_FLIGHT_SEGMENT,\n                segmentDataFilePath,\n                buffer\n              )\n            )\n          }\n          await Promise.all(tasks)\n        }\n      } else {\n        // Writing the RSC payload to a file if we don't have PPR enabled.\n        await fileWriter(\n          ExportedAppPageFiles.FLIGHT,\n          htmlFilepath.replace(/\\.html$/, RSC_SUFFIX),\n          flightData\n        )\n      }\n    }\n\n    const headers: OutgoingHttpHeaders = { ...metadata.headers }\n\n    // If we're writing the file to disk, we know it's a prerender.\n    headers[NEXT_IS_PRERENDER_HEADER] = '1'\n\n    if (fetchTags) {\n      headers[NEXT_CACHE_TAGS_HEADER] = fetchTags\n    }\n\n    // Writing static HTML to a file.\n    await fileWriter(\n      ExportedAppPageFiles.HTML,\n      htmlFilepath,\n      html ?? '',\n      'utf8'\n    )\n\n    const isParallelRoute = /\\/@\\w+/.test(page)\n    const isNonSuccessfulStatusCode = res.statusCode > 300\n\n    // When PPR is enabled, we don't always send 200 for routes that have been\n    // pregenerated, so we should grab the status code from the mocked\n    // response.\n    let status: number | undefined = renderOpts.experimental.isRoutePPREnabled\n      ? res.statusCode\n      : undefined\n\n    if (isDefaultNotFound) {\n      // Override the default /_not-found page status code to 404\n      status = 404\n    } else if (isNonSuccessfulStatusCode && !isParallelRoute) {\n      // If it's parallel route the status from mock response is 404\n      status = res.statusCode\n    }\n\n    // Writing the request metadata to a file.\n    const meta: RouteMetadata = {\n      status,\n      headers,\n      postponed,\n      segmentPaths,\n    }\n\n    await fileWriter(\n      ExportedAppPageFiles.META,\n      htmlFilepath.replace(/\\.html$/, NEXT_META_SUFFIX),\n      JSON.stringify(meta, null, 2)\n    )\n\n    return {\n      // Only include the metadata if the environment has next support.\n      metadata: hasNextSupport ? meta : undefined,\n      hasEmptyPrelude: Boolean(postponed) && html === '',\n      hasPostponed: Boolean(postponed),\n      revalidate,\n      fetchMetrics,\n    }\n  } catch (err) {\n    if (!isDynamicUsageError(err)) {\n      throw err\n    }\n\n    // We should fail rendering if a client side rendering bailout\n    // occurred at the page level.\n    if (isBailoutToCSRError(err)) {\n      throw err\n    }\n\n    let fetchMetrics: FetchMetrics | undefined\n\n    if (debugOutput) {\n      const store = (renderOpts as any).store as WorkStore\n      const { dynamicUsageDescription, dynamicUsageStack } = store\n      fetchMetrics = store.fetchMetrics\n\n      logDynamicUsageWarning({\n        path,\n        description: dynamicUsageDescription ?? '',\n        stack: dynamicUsageStack,\n      })\n    }\n\n    return { revalidate: 0, fetchMetrics }\n  }\n}\n\nfunction logDynamicUsageWarning({\n  path,\n  description,\n  stack,\n}: {\n  path: string\n  description: string\n  stack?: string\n}) {\n  const errMessage = new Error(\n    `Static generation failed due to dynamic usage on ${path}, reason: ${description}`\n  )\n\n  if (stack) {\n    errMessage.stack = errMessage.message + stack.substring(stack.indexOf('\\n'))\n  }\n\n  console.warn(errMessage)\n}\n"],"names":["ExportedAppPageFiles","exportAppPage","prospectiveRenderAppPage","req","res","page","pathname","query","fallbackRouteParams","partialRenderOpts","afterRunner","AfterRunner","lazyRenderAppPage","NodeNextRequest","NodeNextResponse","waitUntil","context","onClose","onAfterTaskError","onTaskError","undefined","executeAfter","err","isDynamicUsageError","isBailoutToCSRError","path","htmlFilepath","debugOutput","isDynamicError","fileWriter","renderOpts","isDefaultNotFound","result","html","toUnchunkedString","metadata","flightData","revalidate","postponed","fetchTags","fetchMetrics","segmentData","experimental","isRoutePPREnabled","Error","staticBailoutInfo","description","logDynamicUsageWarning","stack","size","segmentPaths","replace","RSC_PREFETCH_SUFFIX","segmentsDir","RSC_SEGMENTS_DIR_SUFFIX","tasks","segmentPath","buffer","push","segmentDataFilePath","RSC_SEGMENT_SUFFIX","Promise","all","RSC_SUFFIX","headers","NEXT_IS_PRERENDER_HEADER","NEXT_CACHE_TAGS_HEADER","isParallelRoute","test","isNonSuccessfulStatusCode","statusCode","status","meta","NEXT_META_SUFFIX","JSON","stringify","hasNextSupport","hasEmptyPrelude","Boolean","hasPostponed","store","dynamicUsageDescription","dynamicUsageStack","errMessage","message","substring","indexOf","console","warn"],"mappings":"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"}