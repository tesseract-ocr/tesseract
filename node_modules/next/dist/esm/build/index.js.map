{"version":3,"sources":["../../src/build/index.ts"],"sourcesContent":["import type { AppBuildManifest } from './webpack/plugins/app-build-manifest-plugin'\nimport type { PagesManifest } from './webpack/plugins/pages-manifest-plugin'\nimport type { ExportPathMap, NextConfigComplete } from '../server/config-shared'\nimport type { MiddlewareManifest } from './webpack/plugins/middleware-plugin'\nimport type { ActionManifest } from './webpack/plugins/flight-client-entry-plugin'\nimport type { Revalidate } from '../server/lib/revalidate'\n\nimport '../lib/setup-exception-listeners'\n\nimport { loadEnvConfig, type LoadedEnvFiles } from '@next/env'\nimport { bold, yellow } from '../lib/picocolors'\nimport crypto from 'crypto'\nimport { makeRe } from 'next/dist/compiled/picomatch'\nimport { existsSync, promises as fs } from 'fs'\nimport os from 'os'\nimport { Worker } from '../lib/worker'\nimport { defaultConfig } from '../server/config-shared'\nimport devalue from 'next/dist/compiled/devalue'\nimport findUp from 'next/dist/compiled/find-up'\nimport { nanoid } from 'next/dist/compiled/nanoid/index.cjs'\nimport { Sema } from 'next/dist/compiled/async-sema'\nimport path from 'path'\nimport {\n  STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR,\n  PUBLIC_DIR_MIDDLEWARE_CONFLICT,\n  MIDDLEWARE_FILENAME,\n  PAGES_DIR_ALIAS,\n  INSTRUMENTATION_HOOK_FILENAME,\n  RSC_PREFETCH_SUFFIX,\n  RSC_SUFFIX,\n  NEXT_RESUME_HEADER,\n  PRERENDER_REVALIDATE_HEADER,\n  PRERENDER_REVALIDATE_ONLY_GENERATED_HEADER,\n  NEXT_CACHE_REVALIDATE_TAG_TOKEN_HEADER,\n  NEXT_CACHE_REVALIDATED_TAGS_HEADER,\n  MATCHED_PATH_HEADER,\n} from '../lib/constants'\nimport { FileType, fileExists } from '../lib/file-exists'\nimport { findPagesDir } from '../lib/find-pages-dir'\nimport loadCustomRoutes, {\n  normalizeRouteRegex,\n} from '../lib/load-custom-routes'\nimport type {\n  CustomRoutes,\n  Header,\n  Redirect,\n  Rewrite,\n  RouteHas,\n} from '../lib/load-custom-routes'\nimport { nonNullable } from '../lib/non-nullable'\nimport { recursiveDelete } from '../lib/recursive-delete'\nimport { verifyPartytownSetup } from '../lib/verify-partytown-setup'\nimport { validateTurboNextConfig } from '../lib/turbopack-warning'\nimport {\n  BUILD_ID_FILE,\n  BUILD_MANIFEST,\n  CLIENT_STATIC_FILES_PATH,\n  EXPORT_DETAIL,\n  EXPORT_MARKER,\n  IMAGES_MANIFEST,\n  PAGES_MANIFEST,\n  PHASE_PRODUCTION_BUILD,\n  PRERENDER_MANIFEST,\n  REACT_LOADABLE_MANIFEST,\n  ROUTES_MANIFEST,\n  SERVER_DIRECTORY,\n  SERVER_FILES_MANIFEST,\n  STATIC_STATUS_PAGES,\n  MIDDLEWARE_MANIFEST,\n  APP_PATHS_MANIFEST,\n  APP_PATH_ROUTES_MANIFEST,\n  APP_BUILD_MANIFEST,\n  RSC_MODULE_TYPES,\n  NEXT_FONT_MANIFEST,\n  SUBRESOURCE_INTEGRITY_MANIFEST,\n  MIDDLEWARE_BUILD_MANIFEST,\n  MIDDLEWARE_REACT_LOADABLE_MANIFEST,\n  SERVER_REFERENCE_MANIFEST,\n  FUNCTIONS_CONFIG_MANIFEST,\n  UNDERSCORE_NOT_FOUND_ROUTE_ENTRY,\n  UNDERSCORE_NOT_FOUND_ROUTE,\n  DYNAMIC_CSS_MANIFEST,\n} from '../shared/lib/constants'\nimport {\n  getSortedRoutes,\n  isDynamicRoute,\n  getSortedRouteObjects,\n} from '../shared/lib/router/utils'\nimport type { __ApiPreviewProps } from '../server/api-utils'\nimport loadConfig from '../server/config'\nimport type { BuildManifest } from '../server/get-page-files'\nimport { normalizePagePath } from '../shared/lib/page-path/normalize-page-path'\nimport { getPagePath } from '../server/require'\nimport * as ciEnvironment from '../server/ci-info'\nimport {\n  turborepoTraceAccess,\n  TurborepoAccessTraceResult,\n  writeTurborepoAccessTraceResult,\n} from './turborepo-access-trace'\n\nimport {\n  eventBuildOptimize,\n  eventCliSession,\n  eventBuildFeatureUsage,\n  eventNextPlugins,\n  EVENT_BUILD_FEATURE_USAGE,\n  eventPackageUsedInGetServerSideProps,\n  eventBuildCompleted,\n} from '../telemetry/events'\nimport type { EventBuildFeatureUsage } from '../telemetry/events'\nimport { Telemetry } from '../telemetry/storage'\nimport { hadUnsupportedValue } from './analysis/get-page-static-info'\nimport {\n  createPagesMapping,\n  getStaticInfoIncludingLayouts,\n  sortByPageExts,\n} from './entries'\nimport { PAGE_TYPES } from '../lib/page-types'\nimport { generateBuildId } from './generate-build-id'\nimport { isWriteable } from './is-writeable'\nimport * as Log from './output/log'\nimport createSpinner from './spinner'\nimport { trace, flushAllTraces, setGlobal, type Span } from '../trace'\nimport {\n  detectConflictingPaths,\n  computeFromManifest,\n  getJsPageSizeInKb,\n  printCustomRoutes,\n  printTreeView,\n  copyTracedFiles,\n  isReservedPage,\n  isAppBuiltinNotFoundPage,\n  collectRoutesUsingEdgeRuntime,\n  collectMeta,\n} from './utils'\nimport type { PageInfo, PageInfos, PrerenderedRoute } from './utils'\nimport type { AppSegmentConfig } from './segment-config/app/app-segment-config'\nimport { writeBuildId } from './write-build-id'\nimport { normalizeLocalePath } from '../shared/lib/i18n/normalize-locale-path'\nimport isError from '../lib/is-error'\nimport type { NextError } from '../lib/is-error'\nimport { isEdgeRuntime } from '../lib/is-edge-runtime'\nimport { recursiveCopy } from '../lib/recursive-copy'\nimport { recursiveReadDir } from '../lib/recursive-readdir'\nimport {\n  loadBindings,\n  lockfilePatchPromise,\n  teardownTraceSubscriber,\n  teardownHeapProfiler,\n  createDefineEnv,\n} from './swc'\nimport { getNamedRouteRegex } from '../shared/lib/router/utils/route-regex'\nimport { getFilesInDir } from '../lib/get-files-in-dir'\nimport { eventSwcPlugins } from '../telemetry/events/swc-plugins'\nimport { normalizeAppPath } from '../shared/lib/router/utils/app-paths'\nimport {\n  ACTION_HEADER,\n  NEXT_ROUTER_PREFETCH_HEADER,\n  RSC_HEADER,\n  RSC_CONTENT_TYPE_HEADER,\n  NEXT_ROUTER_STATE_TREE_HEADER,\n  NEXT_DID_POSTPONE_HEADER,\n  NEXT_ROUTER_SEGMENT_PREFETCH_HEADER,\n} from '../client/components/app-router-headers'\nimport { webpackBuild } from './webpack-build'\nimport { NextBuildContext, type MappedPages } from './build-context'\nimport { normalizePathSep } from '../shared/lib/page-path/normalize-path-sep'\nimport { isAppRouteRoute } from '../lib/is-app-route-route'\nimport { createClientRouterFilter } from '../lib/create-client-router-filter'\nimport { createValidFileMatcher } from '../server/lib/find-page-file'\nimport { startTypeChecking } from './type-check'\nimport { generateInterceptionRoutesRewrites } from '../lib/generate-interception-routes-rewrites'\n\nimport { buildDataRoute } from '../server/lib/router-utils/build-data-route'\nimport { collectBuildTraces } from './collect-build-traces'\nimport type { BuildTraceContext } from './webpack/plugins/next-trace-entrypoints-plugin'\nimport { formatManifest } from './manifests/formatter/format-manifest'\nimport {\n  recordFrameworkVersion,\n  updateBuildDiagnostics,\n  recordFetchMetrics,\n} from '../diagnostics/build-diagnostics'\nimport { getStartServerInfo, logStartInfo } from '../server/lib/app-info-log'\nimport type { NextEnabledDirectories } from '../server/base-server'\nimport { hasCustomExportOutput } from '../export/utils'\nimport {\n  getTurbopackJsConfig,\n  handleEntrypoints,\n  type EntryIssuesMap,\n  handleRouteType,\n  handlePagesErrorRoute,\n  formatIssue,\n  isRelevantWarning,\n  isPersistentCachingEnabled,\n} from '../server/dev/turbopack-utils'\nimport { TurbopackManifestLoader } from '../server/dev/turbopack/manifest-loader'\nimport type { Entrypoints } from '../server/dev/turbopack/types'\nimport { buildCustomRoute } from '../lib/build-custom-route'\nimport { createProgress } from './progress'\nimport { traceMemoryUsage } from '../lib/memory/trace'\nimport { generateEncryptionKeyBase64 } from '../server/app-render/encryption-utils-server'\nimport type { DeepReadonly } from '../shared/lib/deep-readonly'\nimport uploadTrace from '../trace/upload-trace'\nimport {\n  checkIsAppPPREnabled,\n  checkIsRoutePPREnabled,\n} from '../server/lib/experimental/ppr'\nimport { FallbackMode, fallbackModeToFallbackField } from '../lib/fallback'\nimport { RenderingMode } from './rendering-mode'\nimport { getParamKeys } from '../server/request/fallback-params'\nimport {\n  formatNodeOptions,\n  getParsedNodeOptionsWithoutInspect,\n} from '../server/lib/utils'\n\ntype Fallback = null | boolean | string\n\nexport interface SsgRoute {\n  dataRoute: string | null\n  experimentalBypassFor?: RouteHas[]\n\n  /**\n   * The headers that should be served along side this prerendered route.\n   */\n  initialHeaders?: Record<string, string>\n\n  /**\n   * The status code that should be served along side this prerendered route.\n   */\n  initialStatus?: number\n\n  /**\n   * The revalidation configuration for this route.\n   */\n  initialRevalidateSeconds: Revalidate\n\n  /**\n   * The prefetch data route associated with this page. If not defined, this\n   * page does not support prefetching.\n   */\n  prefetchDataRoute: string | null | undefined\n\n  /**\n   * The dynamic route that this statically prerendered route is based on. If\n   * this is null, then the route was not based on a dynamic route.\n   */\n  srcRoute: string | null\n\n  /**\n   * @deprecated use `renderingMode` instead\n   */\n  experimentalPPR: boolean | undefined\n\n  /**\n   * The rendering mode for this route. Only `undefined` when not an app router\n   * route.\n   */\n  renderingMode: RenderingMode | undefined\n\n  /**\n   * The headers that are allowed to be used when revalidating this route. These\n   * are used internally by Next.js to revalidate routes.\n   */\n  allowHeader: string[]\n}\n\nexport interface DynamicSsgRoute {\n  dataRoute: string | null\n  dataRouteRegex: string | null\n  experimentalBypassFor?: RouteHas[]\n  fallback: Fallback\n\n  /**\n   * When defined, it describes the revalidation configuration for the fallback\n   * route.\n   */\n  fallbackRevalidate: Revalidate | undefined\n\n  /**\n   * The headers that should used when serving the fallback.\n   */\n  fallbackHeaders?: Record<string, string>\n\n  /**\n   * The status code that should be used when serving the fallback.\n   */\n  fallbackStatus?: number\n  prefetchDataRoute: string | null | undefined\n  prefetchDataRouteRegex: string | null | undefined\n  routeRegex: string\n\n  /**\n   * @deprecated use `renderingMode` instead\n   */\n  experimentalPPR: boolean | undefined\n\n  /**\n   * The rendering mode for this route. Only `undefined` when not an app router\n   * route.\n   */\n  renderingMode: RenderingMode | undefined\n\n  /**\n   * The headers that are allowed to be used when revalidating this route. These\n   * are used internally by Next.js to revalidate routes.\n   */\n  allowHeader: string[]\n}\n\n/**\n * The headers that are allowed to be used when revalidating routes. Currently\n * this includes both headers used by the pages and app routers.\n */\nconst ALLOWED_HEADERS: string[] = [\n  'host',\n  MATCHED_PATH_HEADER,\n  PRERENDER_REVALIDATE_HEADER,\n  PRERENDER_REVALIDATE_ONLY_GENERATED_HEADER,\n  NEXT_CACHE_REVALIDATED_TAGS_HEADER,\n  NEXT_CACHE_REVALIDATE_TAG_TOKEN_HEADER,\n]\n\nexport type PrerenderManifest = {\n  version: 4\n  routes: { [route: string]: SsgRoute }\n  dynamicRoutes: { [route: string]: DynamicSsgRoute }\n  notFoundRoutes: string[]\n  preview: __ApiPreviewProps\n}\n\ntype ManifestBuiltRoute = {\n  /**\n   * The route pattern used to match requests for this route.\n   */\n  regex: string\n}\n\nexport type ManifestRewriteRoute = ManifestBuiltRoute & Rewrite\nexport type ManifestRedirectRoute = ManifestBuiltRoute & Redirect\nexport type ManifestHeaderRoute = ManifestBuiltRoute & Header\n\nexport type ManifestRoute = ManifestBuiltRoute & {\n  page: string\n  namedRegex?: string\n  routeKeys?: { [key: string]: string }\n}\n\nexport type ManifestDataRoute = {\n  page: string\n  routeKeys?: { [key: string]: string }\n  dataRouteRegex: string\n  namedDataRouteRegex?: string\n}\n\nexport type RoutesManifest = {\n  version: number\n  pages404: boolean\n  basePath: string\n  redirects: Array<Redirect>\n  rewrites?:\n    | Array<ManifestRewriteRoute>\n    | {\n        beforeFiles: Array<ManifestRewriteRoute>\n        afterFiles: Array<ManifestRewriteRoute>\n        fallback: Array<ManifestRewriteRoute>\n      }\n  headers: Array<ManifestHeaderRoute>\n  staticRoutes: Array<ManifestRoute>\n  dynamicRoutes: Array<ManifestRoute>\n  dataRoutes: Array<ManifestDataRoute>\n  i18n?: {\n    domains?: Array<{\n      http?: true\n      domain: string\n      locales?: string[]\n      defaultLocale: string\n    }>\n    locales: string[]\n    defaultLocale: string\n    localeDetection?: false\n  }\n  rsc: {\n    header: typeof RSC_HEADER\n    didPostponeHeader: typeof NEXT_DID_POSTPONE_HEADER\n    contentTypeHeader: typeof RSC_CONTENT_TYPE_HEADER\n    varyHeader: string\n    prefetchHeader: typeof NEXT_ROUTER_PREFETCH_HEADER\n    suffix: typeof RSC_SUFFIX\n    prefetchSuffix: typeof RSC_PREFETCH_SUFFIX\n  }\n  skipMiddlewareUrlNormalize?: boolean\n  caseSensitive?: boolean\n  /**\n   * Configuration related to Partial Prerendering.\n   */\n  ppr?: {\n    /**\n     * The chained response for the PPR resume.\n     */\n    chain: {\n      /**\n       * The headers that will indicate to Next.js that the request is for a PPR\n       * resume.\n       */\n      headers: Record<string, string>\n    }\n  }\n}\n\nfunction pageToRoute(page: string) {\n  const routeRegex = getNamedRouteRegex(page, true)\n  return {\n    page,\n    regex: normalizeRouteRegex(routeRegex.re.source),\n    routeKeys: routeRegex.routeKeys,\n    namedRegex: routeRegex.namedRegex,\n  }\n}\n\nfunction getCacheDir(distDir: string): string {\n  const cacheDir = path.join(distDir, 'cache')\n  if (ciEnvironment.isCI && !ciEnvironment.hasNextSupport) {\n    const hasCache = existsSync(cacheDir)\n\n    if (!hasCache) {\n      // Intentionally not piping to stderr which is what `Log.warn` does in case people fail in CI when\n      // stderr is detected.\n      console.log(\n        `${Log.prefixes.warn} No build cache found. Please configure build caching for faster rebuilds. Read more: https://nextjs.org/docs/messages/no-cache`\n      )\n    }\n  }\n  return cacheDir\n}\n\nasync function writeFileUtf8(filePath: string, content: string): Promise<void> {\n  await fs.writeFile(filePath, content, 'utf-8')\n}\n\nfunction readFileUtf8(filePath: string): Promise<string> {\n  return fs.readFile(filePath, 'utf8')\n}\n\nasync function writeManifest<T extends object>(\n  filePath: string,\n  manifest: T\n): Promise<void> {\n  await writeFileUtf8(filePath, formatManifest(manifest))\n}\n\nasync function readManifest<T extends object>(filePath: string): Promise<T> {\n  return JSON.parse(await readFileUtf8(filePath))\n}\n\nasync function writePrerenderManifest(\n  distDir: string,\n  manifest: DeepReadonly<PrerenderManifest>\n): Promise<void> {\n  await writeManifest(path.join(distDir, PRERENDER_MANIFEST), manifest)\n}\n\nasync function writeClientSsgManifest(\n  prerenderManifest: DeepReadonly<PrerenderManifest>,\n  {\n    buildId,\n    distDir,\n    locales,\n  }: { buildId: string; distDir: string; locales: string[] }\n) {\n  const ssgPages = new Set<string>(\n    [\n      ...Object.entries(prerenderManifest.routes)\n        // Filter out dynamic routes\n        .filter(([, { srcRoute }]) => srcRoute == null)\n        .map(([route]) => normalizeLocalePath(route, locales).pathname),\n      ...Object.keys(prerenderManifest.dynamicRoutes),\n    ].sort()\n  )\n\n  const clientSsgManifestContent = `self.__SSG_MANIFEST=${devalue(\n    ssgPages\n  )};self.__SSG_MANIFEST_CB&&self.__SSG_MANIFEST_CB()`\n\n  await writeFileUtf8(\n    path.join(distDir, CLIENT_STATIC_FILES_PATH, buildId, '_ssgManifest.js'),\n    clientSsgManifestContent\n  )\n}\n\ninterface FunctionsConfigManifest {\n  version: number\n  functions: Record<\n    string,\n    {\n      maxDuration?: number | undefined\n    }\n  >\n}\n\nasync function writeFunctionsConfigManifest(\n  distDir: string,\n  manifest: FunctionsConfigManifest\n): Promise<void> {\n  await writeManifest(\n    path.join(distDir, SERVER_DIRECTORY, FUNCTIONS_CONFIG_MANIFEST),\n    manifest\n  )\n}\n\ninterface RequiredServerFilesManifest {\n  version: number\n  config: NextConfigComplete\n  appDir: string\n  relativeAppDir: string\n  files: string[]\n  ignore: string[]\n}\n\nasync function writeRequiredServerFilesManifest(\n  distDir: string,\n  requiredServerFiles: RequiredServerFilesManifest\n) {\n  await writeManifest(\n    path.join(distDir, SERVER_FILES_MANIFEST),\n    requiredServerFiles\n  )\n}\n\nasync function writeImagesManifest(\n  distDir: string,\n  config: NextConfigComplete\n): Promise<void> {\n  const images = { ...config.images }\n  const { deviceSizes, imageSizes } = images\n  ;(images as any).sizes = [...deviceSizes, ...imageSizes]\n\n  // By default, remotePatterns will allow no remote images ([])\n  images.remotePatterns = (config?.images?.remotePatterns || []).map((p) => ({\n    // Modifying the manifest should also modify matchRemotePattern()\n    protocol: p.protocol,\n    hostname: makeRe(p.hostname).source,\n    port: p.port,\n    pathname: makeRe(p.pathname ?? '**', { dot: true }).source,\n    search: p.search,\n  }))\n\n  // By default, localPatterns will allow all local images (undefined)\n  if (config?.images?.localPatterns) {\n    images.localPatterns = config.images.localPatterns.map((p) => ({\n      // Modifying the manifest should also modify matchLocalPattern()\n      pathname: makeRe(p.pathname ?? '**', { dot: true }).source,\n      search: p.search,\n    }))\n  }\n\n  await writeManifest(path.join(distDir, IMAGES_MANIFEST), {\n    version: 1,\n    images,\n  })\n}\n\nconst STANDALONE_DIRECTORY = 'standalone' as const\nasync function writeStandaloneDirectory(\n  nextBuildSpan: Span,\n  distDir: string,\n  pageKeys: { pages: string[]; app: string[] | undefined },\n  denormalizedAppPages: string[] | undefined,\n  outputFileTracingRoot: string,\n  requiredServerFiles: RequiredServerFilesManifest,\n  middlewareManifest: MiddlewareManifest,\n  hasInstrumentationHook: boolean,\n  staticPages: Set<string>,\n  loadedEnvFiles: LoadedEnvFiles,\n  appDir: string | undefined\n) {\n  await nextBuildSpan\n    .traceChild('write-standalone-directory')\n    .traceAsyncFn(async () => {\n      await copyTracedFiles(\n        // requiredServerFiles.appDir Refers to the application directory, not App Router.\n        requiredServerFiles.appDir,\n        distDir,\n        pageKeys.pages,\n        denormalizedAppPages,\n        outputFileTracingRoot,\n        requiredServerFiles.config,\n        middlewareManifest,\n        hasInstrumentationHook,\n        staticPages\n      )\n\n      for (const file of [\n        ...requiredServerFiles.files,\n        path.join(requiredServerFiles.config.distDir, SERVER_FILES_MANIFEST),\n        ...loadedEnvFiles.reduce<string[]>((acc, envFile) => {\n          if (['.env', '.env.production'].includes(envFile.path)) {\n            acc.push(envFile.path)\n          }\n          return acc\n        }, []),\n      ]) {\n        // requiredServerFiles.appDir Refers to the application directory, not App Router.\n        const filePath = path.join(requiredServerFiles.appDir, file)\n        const outputPath = path.join(\n          distDir,\n          STANDALONE_DIRECTORY,\n          path.relative(outputFileTracingRoot, filePath)\n        )\n        await fs.mkdir(path.dirname(outputPath), {\n          recursive: true,\n        })\n        await fs.copyFile(filePath, outputPath)\n      }\n      await recursiveCopy(\n        path.join(distDir, SERVER_DIRECTORY, 'pages'),\n        path.join(\n          distDir,\n          STANDALONE_DIRECTORY,\n          path.relative(outputFileTracingRoot, distDir),\n          SERVER_DIRECTORY,\n          'pages'\n        ),\n        { overwrite: true }\n      )\n      if (appDir) {\n        const originalServerApp = path.join(distDir, SERVER_DIRECTORY, 'app')\n        if (existsSync(originalServerApp)) {\n          await recursiveCopy(\n            originalServerApp,\n            path.join(\n              distDir,\n              STANDALONE_DIRECTORY,\n              path.relative(outputFileTracingRoot, distDir),\n              SERVER_DIRECTORY,\n              'app'\n            ),\n            { overwrite: true }\n          )\n        }\n      }\n    })\n}\n\nfunction getNumberOfWorkers(config: NextConfigComplete) {\n  if (\n    config.experimental.cpus &&\n    config.experimental.cpus !== defaultConfig.experimental!.cpus\n  ) {\n    return config.experimental.cpus\n  }\n\n  if (config.experimental.memoryBasedWorkersCount) {\n    return Math.max(\n      Math.min(config.experimental.cpus || 1, Math.floor(os.freemem() / 1e9)),\n      // enforce a minimum of 4 workers\n      4\n    )\n  }\n\n  if (config.experimental.cpus) {\n    return config.experimental.cpus\n  }\n\n  // Fall back to 4 workers if a count is not specified\n  return 4\n}\n\nconst staticWorkerPath = require.resolve('./worker')\nconst staticWorkerExposedMethods = [\n  'hasCustomGetInitialProps',\n  'isPageStatic',\n  'getDefinedNamedExports',\n  'exportPages',\n] as const\ntype StaticWorker = typeof import('./worker') & Worker\nexport function createStaticWorker(\n  config: NextConfigComplete,\n  progress?: {\n    run: () => void\n    clear: () => void\n  }\n): StaticWorker {\n  // Get the node options without inspect and also remove the\n  // --max-old-space-size flag as it can cause memory issues.\n  const nodeOptions = getParsedNodeOptionsWithoutInspect()\n  delete nodeOptions['max-old-space-size']\n  delete nodeOptions['max_old_space_size']\n\n  return new Worker(staticWorkerPath, {\n    logger: Log,\n    numWorkers: getNumberOfWorkers(config),\n    onActivity: () => {\n      progress?.run()\n    },\n    onActivityAbort: () => {\n      progress?.clear()\n    },\n    forkOptions: {\n      env: { ...process.env, NODE_OPTIONS: formatNodeOptions(nodeOptions) },\n    },\n    enableWorkerThreads: config.experimental.workerThreads,\n    exposedMethods: staticWorkerExposedMethods,\n  }) as StaticWorker\n}\n\nasync function writeFullyStaticExport(\n  config: NextConfigComplete,\n  dir: string,\n  enabledDirectories: NextEnabledDirectories,\n  configOutDir: string,\n  nextBuildSpan: Span\n): Promise<void> {\n  const exportApp = require('../export')\n    .default as typeof import('../export').default\n\n  const pagesWorker = createStaticWorker(config)\n  const appWorker = createStaticWorker(config)\n\n  await exportApp(\n    dir,\n    {\n      buildExport: false,\n      nextConfig: config,\n      enabledDirectories,\n      silent: true,\n      outdir: path.join(dir, configOutDir),\n      numWorkers: getNumberOfWorkers(config),\n    },\n    nextBuildSpan\n  )\n\n  pagesWorker.end()\n  appWorker.end()\n}\n\nasync function getBuildId(\n  isGenerateMode: boolean,\n  distDir: string,\n  nextBuildSpan: Span,\n  config: NextConfigComplete\n) {\n  if (isGenerateMode) {\n    return await fs.readFile(path.join(distDir, 'BUILD_ID'), 'utf8')\n  }\n  return await nextBuildSpan\n    .traceChild('generate-buildid')\n    .traceAsyncFn(() => generateBuildId(config.generateBuildId, nanoid))\n}\n\nconst IS_TURBOPACK_BUILD = process.env.TURBOPACK && process.env.TURBOPACK_BUILD\n\nexport default async function build(\n  dir: string,\n  reactProductionProfiling = false,\n  debugOutput = false,\n  runLint = true,\n  noMangling = false,\n  appDirOnly = false,\n  turboNextBuild = false,\n  experimentalBuildMode: 'default' | 'compile' | 'generate',\n  traceUploadUrl: string | undefined\n): Promise<void> {\n  const isCompileMode = experimentalBuildMode === 'compile'\n  const isGenerateMode = experimentalBuildMode === 'generate'\n\n  let loadedConfig: NextConfigComplete | undefined\n  try {\n    const nextBuildSpan = trace('next-build', undefined, {\n      buildMode: experimentalBuildMode,\n      isTurboBuild: String(turboNextBuild),\n      version: process.env.__NEXT_VERSION as string,\n    })\n\n    NextBuildContext.nextBuildSpan = nextBuildSpan\n    NextBuildContext.dir = dir\n    NextBuildContext.appDirOnly = appDirOnly\n    NextBuildContext.reactProductionProfiling = reactProductionProfiling\n    NextBuildContext.noMangling = noMangling\n\n    await nextBuildSpan.traceAsyncFn(async () => {\n      // attempt to load global env values so they are available in next.config.js\n      const { loadedEnvFiles } = nextBuildSpan\n        .traceChild('load-dotenv')\n        .traceFn(() => loadEnvConfig(dir, false, Log))\n      NextBuildContext.loadedEnvFiles = loadedEnvFiles\n\n      const turborepoAccessTraceResult = new TurborepoAccessTraceResult()\n      const config: NextConfigComplete = await nextBuildSpan\n        .traceChild('load-next-config')\n        .traceAsyncFn(() =>\n          turborepoTraceAccess(\n            () =>\n              loadConfig(PHASE_PRODUCTION_BUILD, dir, {\n                // Log for next.config loading process\n                silent: false,\n                reactProductionProfiling,\n              }),\n            turborepoAccessTraceResult\n          )\n        )\n      loadedConfig = config\n\n      process.env.NEXT_DEPLOYMENT_ID = config.deploymentId || ''\n      NextBuildContext.config = config\n\n      let configOutDir = 'out'\n      if (hasCustomExportOutput(config)) {\n        configOutDir = config.distDir\n        config.distDir = '.next'\n      }\n      const distDir = path.join(dir, config.distDir)\n      setGlobal('phase', PHASE_PRODUCTION_BUILD)\n      setGlobal('distDir', distDir)\n\n      const buildId = await getBuildId(\n        isGenerateMode,\n        distDir,\n        nextBuildSpan,\n        config\n      )\n      NextBuildContext.buildId = buildId\n\n      const customRoutes: CustomRoutes = await nextBuildSpan\n        .traceChild('load-custom-routes')\n        .traceAsyncFn(() => loadCustomRoutes(config))\n\n      const { headers, rewrites, redirects } = customRoutes\n      const combinedRewrites: Rewrite[] = [\n        ...rewrites.beforeFiles,\n        ...rewrites.afterFiles,\n        ...rewrites.fallback,\n      ]\n      const hasRewrites = combinedRewrites.length > 0\n\n      NextBuildContext.originalRewrites = config._originalRewrites\n      NextBuildContext.originalRedirects = config._originalRedirects\n\n      const cacheDir = getCacheDir(distDir)\n\n      const telemetry = new Telemetry({ distDir })\n\n      setGlobal('telemetry', telemetry)\n\n      const publicDir = path.join(dir, 'public')\n      const { pagesDir, appDir } = findPagesDir(dir)\n      NextBuildContext.pagesDir = pagesDir\n      NextBuildContext.appDir = appDir\n\n      const enabledDirectories: NextEnabledDirectories = {\n        app: typeof appDir === 'string',\n        pages: typeof pagesDir === 'string',\n      }\n\n      // Generate a random encryption key for this build.\n      // This key is used to encrypt cross boundary values and can be used to generate hashes.\n      const encryptionKey = await generateEncryptionKeyBase64({\n        isBuild: true,\n        distDir,\n      })\n      NextBuildContext.encryptionKey = encryptionKey\n\n      const isSrcDir = path\n        .relative(dir, pagesDir || appDir || '')\n        .startsWith('src')\n      const hasPublicDir = existsSync(publicDir)\n\n      telemetry.record(\n        eventCliSession(dir, config, {\n          webpackVersion: 5,\n          cliCommand: 'build',\n          isSrcDir,\n          hasNowJson: !!(await findUp('now.json', { cwd: dir })),\n          isCustomServer: null,\n          turboFlag: false,\n          pagesDir: !!pagesDir,\n          appDir: !!appDir,\n        })\n      )\n\n      eventNextPlugins(path.resolve(dir)).then((events) =>\n        telemetry.record(events)\n      )\n\n      eventSwcPlugins(path.resolve(dir), config).then((events) =>\n        telemetry.record(events)\n      )\n\n      // Always log next version first then start rest jobs\n      const { envInfo, expFeatureInfo } = await getStartServerInfo(dir, false)\n      logStartInfo({\n        networkUrl: null,\n        appUrl: null,\n        envInfo,\n        expFeatureInfo,\n      })\n\n      const ignoreESLint = Boolean(config.eslint.ignoreDuringBuilds)\n      const shouldLint = !ignoreESLint && runLint\n\n      const typeCheckingOptions: Parameters<typeof startTypeChecking>[0] = {\n        dir,\n        appDir,\n        pagesDir,\n        runLint,\n        shouldLint,\n        ignoreESLint,\n        telemetry,\n        nextBuildSpan,\n        config,\n        cacheDir,\n      }\n\n      const distDirCreated = await nextBuildSpan\n        .traceChild('create-dist-dir')\n        .traceAsyncFn(async () => {\n          try {\n            await fs.mkdir(distDir, { recursive: true })\n            return true\n          } catch (err) {\n            if (isError(err) && err.code === 'EPERM') {\n              return false\n            }\n            throw err\n          }\n        })\n\n      if (!distDirCreated || !(await isWriteable(distDir))) {\n        throw new Error(\n          '> Build directory is not writeable. https://nextjs.org/docs/messages/build-dir-not-writeable'\n        )\n      }\n\n      if (config.cleanDistDir && !isGenerateMode) {\n        await recursiveDelete(distDir, /^cache/)\n      }\n\n      // For app directory, we run type checking after build. That's because\n      // we dynamically generate types for each layout and page in the app\n      // directory.\n      if (!appDir && !isCompileMode)\n        await startTypeChecking(typeCheckingOptions)\n\n      if (appDir && 'exportPathMap' in config) {\n        Log.error(\n          'The \"exportPathMap\" configuration cannot be used with the \"app\" directory. Please use generateStaticParams() instead.'\n        )\n        await telemetry.flush()\n        process.exit(1)\n      }\n\n      const buildLintEvent: EventBuildFeatureUsage = {\n        featureName: 'build-lint',\n        invocationCount: shouldLint ? 1 : 0,\n      }\n      telemetry.record({\n        eventName: EVENT_BUILD_FEATURE_USAGE,\n        payload: buildLintEvent,\n      })\n\n      const validFileMatcher = createValidFileMatcher(\n        config.pageExtensions,\n        appDir\n      )\n\n      const providedPagePaths: string[] = JSON.parse(\n        process.env.NEXT_PRIVATE_PAGE_PATHS || '[]'\n      )\n\n      let pagesPaths = Boolean(process.env.NEXT_PRIVATE_PAGE_PATHS)\n        ? providedPagePaths\n        : !appDirOnly && pagesDir\n          ? await nextBuildSpan.traceChild('collect-pages').traceAsyncFn(() =>\n              recursiveReadDir(pagesDir, {\n                pathnameFilter: validFileMatcher.isPageFile,\n              })\n            )\n          : []\n\n      const middlewareDetectionRegExp = new RegExp(\n        `^${MIDDLEWARE_FILENAME}\\\\.(?:${config.pageExtensions.join('|')})$`\n      )\n\n      const instrumentationHookDetectionRegExp = new RegExp(\n        `^${INSTRUMENTATION_HOOK_FILENAME}\\\\.(?:${config.pageExtensions.join(\n          '|'\n        )})$`\n      )\n\n      const rootDir = path.join((pagesDir || appDir)!, '..')\n      const includes = [\n        middlewareDetectionRegExp,\n        instrumentationHookDetectionRegExp,\n      ]\n\n      const rootPaths = Array.from(await getFilesInDir(rootDir))\n        .filter((file) => includes.some((include) => include.test(file)))\n        .sort(sortByPageExts(config.pageExtensions))\n        .map((file) => path.join(rootDir, file).replace(dir, ''))\n\n      const hasInstrumentationHook = rootPaths.some((p) =>\n        p.includes(INSTRUMENTATION_HOOK_FILENAME)\n      )\n      const hasMiddlewareFile = rootPaths.some((p) =>\n        p.includes(MIDDLEWARE_FILENAME)\n      )\n\n      NextBuildContext.hasInstrumentationHook = hasInstrumentationHook\n\n      const previewProps: __ApiPreviewProps = {\n        previewModeId: crypto.randomBytes(16).toString('hex'),\n        previewModeSigningKey: crypto.randomBytes(32).toString('hex'),\n        previewModeEncryptionKey: crypto.randomBytes(32).toString('hex'),\n      }\n      NextBuildContext.previewProps = previewProps\n\n      const mappedPages = await nextBuildSpan\n        .traceChild('create-pages-mapping')\n        .traceAsyncFn(() =>\n          createPagesMapping({\n            isDev: false,\n            pageExtensions: config.pageExtensions,\n            pagesType: PAGE_TYPES.PAGES,\n            pagePaths: pagesPaths,\n            pagesDir,\n            appDir,\n          })\n        )\n      NextBuildContext.mappedPages = mappedPages\n\n      let mappedAppPages: MappedPages | undefined\n      let denormalizedAppPages: string[] | undefined\n\n      if (appDir) {\n        const providedAppPaths: string[] = JSON.parse(\n          process.env.NEXT_PRIVATE_APP_PATHS || '[]'\n        )\n\n        let appPaths = Boolean(process.env.NEXT_PRIVATE_APP_PATHS)\n          ? providedAppPaths\n          : await nextBuildSpan\n              .traceChild('collect-app-paths')\n              .traceAsyncFn(() =>\n                recursiveReadDir(appDir, {\n                  pathnameFilter: (absolutePath) =>\n                    validFileMatcher.isAppRouterPage(absolutePath) ||\n                    // For now we only collect the root /not-found page in the app\n                    // directory as the 404 fallback\n                    validFileMatcher.isRootNotFound(absolutePath),\n                  ignorePartFilter: (part) => part.startsWith('_'),\n                })\n              )\n\n        mappedAppPages = await nextBuildSpan\n          .traceChild('create-app-mapping')\n          .traceAsyncFn(() =>\n            createPagesMapping({\n              pagePaths: appPaths,\n              isDev: false,\n              pagesType: PAGE_TYPES.APP,\n              pageExtensions: config.pageExtensions,\n              pagesDir,\n              appDir,\n            })\n          )\n\n        NextBuildContext.mappedAppPages = mappedAppPages\n      }\n\n      const mappedRootPaths = await createPagesMapping({\n        isDev: false,\n        pageExtensions: config.pageExtensions,\n        pagePaths: rootPaths,\n        pagesType: PAGE_TYPES.ROOT,\n        pagesDir: pagesDir,\n        appDir,\n      })\n      NextBuildContext.mappedRootPaths = mappedRootPaths\n\n      const pagesPageKeys = Object.keys(mappedPages)\n\n      const conflictingAppPagePaths: [pagePath: string, appPath: string][] = []\n      const appPageKeys = new Set<string>()\n      if (mappedAppPages) {\n        denormalizedAppPages = Object.keys(mappedAppPages)\n        for (const appKey of denormalizedAppPages) {\n          const normalizedAppPageKey = normalizeAppPath(appKey)\n          const pagePath = mappedPages[normalizedAppPageKey]\n          if (pagePath) {\n            const appPath = mappedAppPages[appKey]\n            conflictingAppPagePaths.push([\n              pagePath.replace(/^private-next-pages/, 'pages'),\n              appPath.replace(/^private-next-app-dir/, 'app'),\n            ])\n          }\n          appPageKeys.add(normalizedAppPageKey)\n        }\n      }\n\n      const appPaths = Array.from(appPageKeys)\n      // Interception routes are modelled as beforeFiles rewrites\n      rewrites.beforeFiles.push(\n        ...generateInterceptionRoutesRewrites(appPaths, config.basePath)\n      )\n\n      NextBuildContext.rewrites = rewrites\n\n      const totalAppPagesCount = appPaths.length\n\n      const pageKeys = {\n        pages: pagesPageKeys,\n        app: appPaths.length > 0 ? appPaths : undefined,\n      }\n\n      // Turbopack already handles conflicting app and page routes.\n      if (!IS_TURBOPACK_BUILD) {\n        const numConflictingAppPaths = conflictingAppPagePaths.length\n        if (mappedAppPages && numConflictingAppPaths > 0) {\n          Log.error(\n            `Conflicting app and page file${\n              numConflictingAppPaths === 1 ? ' was' : 's were'\n            } found, please remove the conflicting files to continue:`\n          )\n          for (const [pagePath, appPath] of conflictingAppPagePaths) {\n            Log.error(`  \"${pagePath}\" - \"${appPath}\"`)\n          }\n          await telemetry.flush()\n          process.exit(1)\n        }\n      }\n\n      const conflictingPublicFiles: string[] = []\n      const hasPages404 = mappedPages['/404']?.startsWith(PAGES_DIR_ALIAS)\n      const hasApp404 = !!mappedAppPages?.[UNDERSCORE_NOT_FOUND_ROUTE_ENTRY]\n      const hasCustomErrorPage =\n        mappedPages['/_error'].startsWith(PAGES_DIR_ALIAS)\n\n      if (hasPublicDir) {\n        const hasPublicUnderScoreNextDir = existsSync(\n          path.join(publicDir, '_next')\n        )\n        if (hasPublicUnderScoreNextDir) {\n          throw new Error(PUBLIC_DIR_MIDDLEWARE_CONFLICT)\n        }\n      }\n\n      await nextBuildSpan\n        .traceChild('public-dir-conflict-check')\n        .traceAsyncFn(async () => {\n          // Check if pages conflict with files in `public`\n          // Only a page of public file can be served, not both.\n          for (const page in mappedPages) {\n            const hasPublicPageFile = await fileExists(\n              path.join(publicDir, page === '/' ? '/index' : page),\n              FileType.File\n            )\n            if (hasPublicPageFile) {\n              conflictingPublicFiles.push(page)\n            }\n          }\n\n          const numConflicting = conflictingPublicFiles.length\n\n          if (numConflicting) {\n            throw new Error(\n              `Conflicting public and page file${\n                numConflicting === 1 ? ' was' : 's were'\n              } found. https://nextjs.org/docs/messages/conflicting-public-file-page\\n${conflictingPublicFiles.join(\n                '\\n'\n              )}`\n            )\n          }\n        })\n\n      const nestedReservedPages = pageKeys.pages.filter((page) => {\n        return (\n          page.match(/\\/(_app|_document|_error)$/) && path.dirname(page) !== '/'\n        )\n      })\n\n      if (nestedReservedPages.length) {\n        Log.warn(\n          `The following reserved Next.js pages were detected not directly under the pages directory:\\n` +\n            nestedReservedPages.join('\\n') +\n            `\\nSee more info here: https://nextjs.org/docs/messages/nested-reserved-page\\n`\n        )\n      }\n\n      const restrictedRedirectPaths = ['/_next'].map((p) =>\n        config.basePath ? `${config.basePath}${p}` : p\n      )\n\n      const isAppDynamicIOEnabled = Boolean(config.experimental.dynamicIO)\n      const isAuthInterruptsEnabled = Boolean(\n        config.experimental.authInterrupts\n      )\n      const isAppPPREnabled = checkIsAppPPREnabled(config.experimental.ppr)\n\n      const routesManifestPath = path.join(distDir, ROUTES_MANIFEST)\n      const routesManifest: RoutesManifest = nextBuildSpan\n        .traceChild('generate-routes-manifest')\n        .traceFn(() => {\n          const sortedRoutes = getSortedRoutes([\n            ...pageKeys.pages,\n            ...(pageKeys.app ?? []),\n          ])\n          const dynamicRoutes: Array<ReturnType<typeof pageToRoute>> = []\n          const staticRoutes: typeof dynamicRoutes = []\n\n          for (const route of sortedRoutes) {\n            if (isDynamicRoute(route)) {\n              dynamicRoutes.push(pageToRoute(route))\n            } else if (!isReservedPage(route)) {\n              staticRoutes.push(pageToRoute(route))\n            }\n          }\n\n          return {\n            version: 3,\n            pages404: true,\n            caseSensitive: !!config.experimental.caseSensitiveRoutes,\n            basePath: config.basePath,\n            redirects: redirects.map((r) =>\n              buildCustomRoute('redirect', r, restrictedRedirectPaths)\n            ),\n            headers: headers.map((r) => buildCustomRoute('header', r)),\n            dynamicRoutes,\n            staticRoutes,\n            dataRoutes: [],\n            i18n: config.i18n || undefined,\n            rsc: {\n              header: RSC_HEADER,\n              // This vary header is used as a default. It is technically re-assigned in `base-server`,\n              // and may include an additional Vary option for `Next-URL`.\n              varyHeader: `${RSC_HEADER}, ${NEXT_ROUTER_STATE_TREE_HEADER}, ${NEXT_ROUTER_PREFETCH_HEADER}, ${NEXT_ROUTER_SEGMENT_PREFETCH_HEADER}`,\n              prefetchHeader: NEXT_ROUTER_PREFETCH_HEADER,\n              didPostponeHeader: NEXT_DID_POSTPONE_HEADER,\n              contentTypeHeader: RSC_CONTENT_TYPE_HEADER,\n              suffix: RSC_SUFFIX,\n              prefetchSuffix: RSC_PREFETCH_SUFFIX,\n            },\n            skipMiddlewareUrlNormalize: config.skipMiddlewareUrlNormalize,\n            ppr: isAppPPREnabled\n              ? {\n                  chain: {\n                    headers: {\n                      [NEXT_RESUME_HEADER]: '1',\n                    },\n                  },\n                }\n              : undefined,\n          } satisfies RoutesManifest\n        })\n\n      if (rewrites.beforeFiles.length === 0 && rewrites.fallback.length === 0) {\n        routesManifest.rewrites = rewrites.afterFiles.map((r) =>\n          buildCustomRoute('rewrite', r)\n        )\n      } else {\n        routesManifest.rewrites = {\n          beforeFiles: rewrites.beforeFiles.map((r) =>\n            buildCustomRoute('rewrite', r)\n          ),\n          afterFiles: rewrites.afterFiles.map((r) =>\n            buildCustomRoute('rewrite', r)\n          ),\n          fallback: rewrites.fallback.map((r) =>\n            buildCustomRoute('rewrite', r)\n          ),\n        }\n      }\n      let clientRouterFilters:\n        | undefined\n        | ReturnType<typeof createClientRouterFilter>\n\n      if (config.experimental.clientRouterFilter) {\n        const nonInternalRedirects = (config._originalRedirects || []).filter(\n          (r: any) => !r.internal\n        )\n        clientRouterFilters = createClientRouterFilter(\n          [...appPaths],\n          config.experimental.clientRouterFilterRedirects\n            ? nonInternalRedirects\n            : [],\n          config.experimental.clientRouterFilterAllowedRate\n        )\n        NextBuildContext.clientRouterFilters = clientRouterFilters\n      }\n\n      // Ensure commonjs handling is used for files in the distDir (generally .next)\n      // Files outside of the distDir can be \"type\": \"module\"\n      await writeFileUtf8(\n        path.join(distDir, 'package.json'),\n        '{\"type\": \"commonjs\"}'\n      )\n\n      // These are written to distDir, so they need to come after creating and cleaning distDr.\n      await recordFrameworkVersion(process.env.__NEXT_VERSION as string)\n      await updateBuildDiagnostics({\n        buildStage: 'start',\n      })\n\n      const outputFileTracingRoot = config.outputFileTracingRoot || dir\n\n      const pagesManifestPath = path.join(\n        distDir,\n        SERVER_DIRECTORY,\n        PAGES_MANIFEST\n      )\n\n      async function turbopackBuild(): Promise<{\n        duration: number\n        buildTraceContext: undefined\n        shutdownPromise: Promise<void>\n      }> {\n        if (!IS_TURBOPACK_BUILD) {\n          throw new Error(\"next build doesn't support turbopack yet\")\n        }\n\n        await validateTurboNextConfig({\n          dir,\n          isDev: false,\n        })\n\n        const startTime = process.hrtime()\n        const bindings = await loadBindings(config?.experimental?.useWasmBinary)\n        const dev = false\n\n        // const supportedBrowsers = await getSupportedBrowsers(dir, dev)\n        const supportedBrowsers = [\n          'last 1 Chrome versions, last 1 Firefox versions, last 1 Safari versions, last 1 Edge versions',\n        ]\n\n        const project = await bindings.turbo.createProject(\n          {\n            projectPath: dir,\n            rootPath:\n              config.experimental?.turbo?.root ||\n              config.outputFileTracingRoot ||\n              dir,\n            distDir,\n            nextConfig: config,\n            jsConfig: await getTurbopackJsConfig(dir, config),\n            watch: {\n              enable: false,\n            },\n            dev,\n            env: process.env as Record<string, string>,\n            defineEnv: createDefineEnv({\n              isTurbopack: true,\n              clientRouterFilters,\n              config,\n              dev,\n              distDir,\n              fetchCacheKeyPrefix: config.experimental.fetchCacheKeyPrefix,\n              hasRewrites,\n              // Implemented separately in Turbopack, doesn't have to be passed here.\n              middlewareMatchers: undefined,\n            }),\n            buildId: NextBuildContext.buildId!,\n            encryptionKey: NextBuildContext.encryptionKey!,\n            previewProps: NextBuildContext.previewProps!,\n            browserslistQuery: supportedBrowsers.join(', '),\n          },\n          {\n            persistentCaching: isPersistentCachingEnabled(config),\n            memoryLimit: config.experimental.turbo?.memoryLimit,\n          }\n        )\n\n        await fs.mkdir(path.join(distDir, 'server'), { recursive: true })\n        await fs.mkdir(path.join(distDir, 'static', buildId), {\n          recursive: true,\n        })\n        await fs.writeFile(\n          path.join(distDir, 'package.json'),\n          JSON.stringify(\n            {\n              type: 'commonjs',\n            },\n            null,\n            2\n          )\n        )\n\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const entrypointsSubscription = project.entrypointsSubscribe()\n        const currentEntrypoints: Entrypoints = {\n          global: {\n            app: undefined,\n            document: undefined,\n            error: undefined,\n\n            middleware: undefined,\n            instrumentation: undefined,\n          },\n\n          app: new Map(),\n          page: new Map(),\n        }\n\n        const currentEntryIssues: EntryIssuesMap = new Map()\n\n        const manifestLoader = new TurbopackManifestLoader({\n          buildId,\n          distDir,\n          encryptionKey,\n        })\n\n        const entrypointsResult = await entrypointsSubscription.next()\n        if (entrypointsResult.done) {\n          throw new Error('Turbopack did not return any entrypoints')\n        }\n        entrypointsSubscription.return?.().catch(() => {})\n\n        const entrypoints = entrypointsResult.value\n\n        const topLevelErrors: {\n          message: string\n        }[] = []\n        for (const issue of entrypoints.issues) {\n          topLevelErrors.push({\n            message: formatIssue(issue),\n          })\n        }\n\n        if (topLevelErrors.length > 0) {\n          throw new Error(\n            `Turbopack build failed with ${\n              topLevelErrors.length\n            } issues:\\n${topLevelErrors.map((e) => e.message).join('\\n')}`\n          )\n        }\n\n        await handleEntrypoints({\n          entrypoints,\n          currentEntrypoints,\n          currentEntryIssues,\n          manifestLoader,\n          devRewrites: undefined,\n          productionRewrites: customRoutes.rewrites,\n          logErrors: false,\n        })\n\n        const progress = createProgress(\n          currentEntrypoints.page.size + currentEntrypoints.app.size + 1,\n          'Building'\n        )\n        const promises: Promise<any>[] = []\n\n        // Concurrency will start at INITIAL_CONCURRENCY and\n        // slowly ramp up to CONCURRENCY by increasing the\n        // concurrency by 1 every time a task is completed.\n        const INITIAL_CONCURRENCY = 5\n        const CONCURRENCY = 10\n\n        const sema = new Sema(INITIAL_CONCURRENCY)\n        let remainingRampup = CONCURRENCY - INITIAL_CONCURRENCY\n        const enqueue = (fn: () => Promise<void>) => {\n          promises.push(\n            (async () => {\n              await sema.acquire()\n              try {\n                await fn()\n              } finally {\n                sema.release()\n                if (remainingRampup > 0) {\n                  remainingRampup--\n                  sema.release()\n                }\n                progress.run()\n              }\n            })()\n          )\n        }\n\n        if (!appDirOnly) {\n          for (const [page, route] of currentEntrypoints.page) {\n            enqueue(() =>\n              handleRouteType({\n                dev,\n                page,\n                pathname: page,\n                route,\n\n                currentEntryIssues,\n                entrypoints: currentEntrypoints,\n                manifestLoader,\n                devRewrites: undefined,\n                productionRewrites: customRoutes.rewrites,\n                logErrors: false,\n              })\n            )\n          }\n        }\n\n        for (const [page, route] of currentEntrypoints.app) {\n          enqueue(() =>\n            handleRouteType({\n              page,\n              dev: false,\n              pathname: normalizeAppPath(page),\n              route,\n              currentEntryIssues,\n              entrypoints: currentEntrypoints,\n              manifestLoader,\n              devRewrites: undefined,\n              productionRewrites: customRoutes.rewrites,\n              logErrors: false,\n            })\n          )\n        }\n\n        enqueue(() =>\n          handlePagesErrorRoute({\n            dev: false,\n            currentEntryIssues,\n            entrypoints: currentEntrypoints,\n            manifestLoader,\n            devRewrites: undefined,\n            productionRewrites: customRoutes.rewrites,\n            logErrors: false,\n          })\n        )\n        await Promise.all(promises)\n\n        await manifestLoader.writeManifests({\n          devRewrites: undefined,\n          productionRewrites: customRoutes.rewrites,\n          entrypoints: currentEntrypoints,\n        })\n\n        const errors: {\n          page: string\n          message: string\n        }[] = []\n        const warnings: {\n          page: string\n          message: string\n        }[] = []\n        for (const [page, entryIssues] of currentEntryIssues) {\n          for (const issue of entryIssues.values()) {\n            if (issue.severity !== 'warning') {\n              errors.push({\n                page,\n                message: formatIssue(issue),\n              })\n            } else {\n              if (isRelevantWarning(issue)) {\n                warnings.push({\n                  page,\n                  message: formatIssue(issue),\n                })\n              }\n            }\n          }\n        }\n\n        const shutdownPromise = project.shutdown()\n\n        if (warnings.length > 0) {\n          Log.warn(\n            `Turbopack build collected ${warnings.length} warnings:\\n${warnings\n              .map((e) => {\n                return 'Page: ' + e.page + '\\n' + e.message\n              })\n              .join('\\n')}`\n          )\n        }\n\n        if (errors.length > 0) {\n          throw new Error(\n            `Turbopack build failed with ${errors.length} errors:\\n${errors\n              .map((e) => {\n                return 'Page: ' + e.page + '\\n' + e.message\n              })\n              .join('\\n')}`\n          )\n        }\n\n        const time = process.hrtime(startTime)\n        return {\n          duration: time[0] + time[1] / 1e9,\n          buildTraceContext: undefined,\n          shutdownPromise,\n        }\n      }\n\n      let buildTraceContext: undefined | BuildTraceContext\n      let buildTracesPromise: Promise<any> | undefined = undefined\n\n      // If there's has a custom webpack config and disable the build worker.\n      // Otherwise respect the option if it's set.\n      const useBuildWorker =\n        config.experimental.webpackBuildWorker ||\n        (config.experimental.webpackBuildWorker === undefined &&\n          !config.webpack)\n      const runServerAndEdgeInParallel =\n        config.experimental.parallelServerCompiles\n      const collectServerBuildTracesInParallel =\n        config.experimental.parallelServerBuildTraces ||\n        (config.experimental.parallelServerBuildTraces === undefined &&\n          isCompileMode)\n\n      nextBuildSpan.setAttribute(\n        'has-custom-webpack-config',\n        String(!!config.webpack)\n      )\n      nextBuildSpan.setAttribute('use-build-worker', String(useBuildWorker))\n\n      if (\n        !useBuildWorker &&\n        (runServerAndEdgeInParallel || collectServerBuildTracesInParallel)\n      ) {\n        throw new Error(\n          'The \"parallelServerBuildTraces\" and \"parallelServerCompiles\" options may only be used when build workers can be used. Read more: https://nextjs.org/docs/messages/parallel-build-without-worker'\n        )\n      }\n\n      Log.info('Creating an optimized production build ...')\n      traceMemoryUsage('Starting build', nextBuildSpan)\n\n      await updateBuildDiagnostics({\n        buildStage: 'compile',\n        buildOptions: {\n          useBuildWorker: String(useBuildWorker),\n        },\n      })\n\n      let shutdownPromise = Promise.resolve()\n      if (!isGenerateMode) {\n        if (turboNextBuild) {\n          const {\n            duration: compilerDuration,\n            shutdownPromise: p,\n            ...rest\n          } = await turbopackBuild()\n          shutdownPromise = p\n          traceMemoryUsage('Finished build', nextBuildSpan)\n\n          buildTraceContext = rest.buildTraceContext\n\n          let durationString\n          if (compilerDuration > 120) {\n            durationString = `${Math.round(compilerDuration / 6) / 10}min`\n          } else if (compilerDuration > 20) {\n            durationString = `${Math.round(compilerDuration)}s`\n          } else if (compilerDuration > 2) {\n            durationString = `${Math.round(compilerDuration * 10) / 10}s`\n          } else {\n            durationString = `${Math.round(compilerDuration * 1000)}ms`\n          }\n          Log.event(`Compiled successfully in ${durationString}`)\n\n          telemetry.record(\n            eventBuildCompleted(pagesPaths, {\n              durationInSeconds: Math.round(compilerDuration),\n              totalAppPagesCount,\n            })\n          )\n        } else {\n          if (\n            runServerAndEdgeInParallel ||\n            collectServerBuildTracesInParallel\n          ) {\n            let durationInSeconds = 0\n\n            await updateBuildDiagnostics({\n              buildStage: 'compile-server',\n            })\n\n            const serverBuildPromise = webpackBuild(useBuildWorker, [\n              'server',\n            ]).then((res) => {\n              traceMemoryUsage('Finished server compilation', nextBuildSpan)\n              buildTraceContext = res.buildTraceContext\n              durationInSeconds += res.duration\n\n              if (collectServerBuildTracesInParallel) {\n                const buildTraceWorker = new Worker(\n                  require.resolve('./collect-build-traces'),\n                  {\n                    numWorkers: 1,\n                    exposedMethods: ['collectBuildTraces'],\n                  }\n                ) as Worker & typeof import('./collect-build-traces')\n\n                buildTracesPromise = buildTraceWorker\n                  .collectBuildTraces({\n                    dir,\n                    config,\n                    distDir,\n                    // Serialize Map as this is sent to the worker.\n                    edgeRuntimeRoutes: collectRoutesUsingEdgeRuntime(new Map()),\n                    staticPages: [],\n                    hasSsrAmpPages: false,\n                    buildTraceContext,\n                    outputFileTracingRoot,\n                  })\n                  .catch((err) => {\n                    console.error(err)\n                    process.exit(1)\n                  })\n              }\n            })\n            if (!runServerAndEdgeInParallel) {\n              await serverBuildPromise\n              await updateBuildDiagnostics({\n                buildStage: 'webpack-compile-edge-server',\n              })\n            }\n\n            const edgeBuildPromise = webpackBuild(useBuildWorker, [\n              'edge-server',\n            ]).then((res) => {\n              durationInSeconds += res.duration\n              traceMemoryUsage(\n                'Finished edge-server compilation',\n                nextBuildSpan\n              )\n            })\n            if (runServerAndEdgeInParallel) {\n              await serverBuildPromise\n              await updateBuildDiagnostics({\n                buildStage: 'webpack-compile-edge-server',\n              })\n            }\n            await edgeBuildPromise\n\n            await updateBuildDiagnostics({\n              buildStage: 'webpack-compile-client',\n            })\n\n            await webpackBuild(useBuildWorker, ['client']).then((res) => {\n              durationInSeconds += res.duration\n              traceMemoryUsage('Finished client compilation', nextBuildSpan)\n            })\n\n            Log.event('Compiled successfully')\n\n            telemetry.record(\n              eventBuildCompleted(pagesPaths, {\n                durationInSeconds,\n                totalAppPagesCount,\n              })\n            )\n          } else {\n            const { duration: compilerDuration, ...rest } = await webpackBuild(\n              useBuildWorker,\n              null\n            )\n            traceMemoryUsage('Finished build', nextBuildSpan)\n\n            buildTraceContext = rest.buildTraceContext\n\n            telemetry.record(\n              eventBuildCompleted(pagesPaths, {\n                durationInSeconds: compilerDuration,\n                totalAppPagesCount,\n              })\n            )\n          }\n        }\n      }\n\n      // For app directory, we run type checking after build.\n      if (appDir && !isCompileMode && !isGenerateMode) {\n        await updateBuildDiagnostics({\n          buildStage: 'type-checking',\n        })\n        await startTypeChecking(typeCheckingOptions)\n        traceMemoryUsage('Finished type checking', nextBuildSpan)\n      }\n\n      const postCompileSpinner = createSpinner('Collecting page data')\n\n      const buildManifestPath = path.join(distDir, BUILD_MANIFEST)\n      const appBuildManifestPath = path.join(distDir, APP_BUILD_MANIFEST)\n\n      let staticAppPagesCount = 0\n      let serverAppPagesCount = 0\n      let edgeRuntimeAppCount = 0\n      let edgeRuntimePagesCount = 0\n      const ssgPages = new Set<string>()\n      const ssgStaticFallbackPages = new Set<string>()\n      const ssgBlockingFallbackPages = new Set<string>()\n      const staticPages = new Set<string>()\n      const invalidPages = new Set<string>()\n      const hybridAmpPages = new Set<string>()\n      const serverPropsPages = new Set<string>()\n      const additionalPaths = new Map<string, PrerenderedRoute[]>()\n      const staticPaths = new Map<string, PrerenderedRoute[]>()\n      const prospectiveRenders = new Map<\n        string,\n        { page: string; originalAppPath: string }\n      >()\n      const appNormalizedPaths = new Map<string, string>()\n      const fallbackModes = new Map<string, FallbackMode>()\n      const appDefaultConfigs = new Map<string, AppSegmentConfig>()\n      const pageInfos: PageInfos = new Map<string, PageInfo>()\n      let pagesManifest = await readManifest<PagesManifest>(pagesManifestPath)\n      const buildManifest = await readManifest<BuildManifest>(buildManifestPath)\n      const appBuildManifest = appDir\n        ? await readManifest<AppBuildManifest>(appBuildManifestPath)\n        : undefined\n\n      const appPathRoutes: Record<string, string> = {}\n\n      if (appDir) {\n        const appPathsManifest = await readManifest<Record<string, string>>(\n          path.join(distDir, SERVER_DIRECTORY, APP_PATHS_MANIFEST)\n        )\n\n        for (const key in appPathsManifest) {\n          appPathRoutes[key] = normalizeAppPath(key)\n        }\n\n        await writeManifest(\n          path.join(distDir, APP_PATH_ROUTES_MANIFEST),\n          appPathRoutes\n        )\n      }\n\n      process.env.NEXT_PHASE = PHASE_PRODUCTION_BUILD\n\n      const worker = createStaticWorker(config)\n\n      const analysisBegin = process.hrtime()\n      const staticCheckSpan = nextBuildSpan.traceChild('static-check')\n\n      const functionsConfigManifest: FunctionsConfigManifest = {\n        version: 1,\n        functions: {},\n      }\n\n      const {\n        customAppGetInitialProps,\n        namedExports,\n        isNextImageImported,\n        hasSsrAmpPages,\n        hasNonStaticErrorPage,\n      } = await staticCheckSpan.traceAsyncFn(async () => {\n        if (isCompileMode) {\n          return {\n            customAppGetInitialProps: false,\n            namedExports: [],\n            isNextImageImported: true,\n            hasSsrAmpPages: !!pagesDir,\n            hasNonStaticErrorPage: true,\n          }\n        }\n\n        const { configFileName, publicRuntimeConfig, serverRuntimeConfig } =\n          config\n        const runtimeEnvConfig = { publicRuntimeConfig, serverRuntimeConfig }\n\n        const nonStaticErrorPageSpan = staticCheckSpan.traceChild(\n          'check-static-error-page'\n        )\n        const errorPageHasCustomGetInitialProps =\n          nonStaticErrorPageSpan.traceAsyncFn(\n            async () =>\n              hasCustomErrorPage &&\n              (await worker.hasCustomGetInitialProps({\n                page: '/_error',\n                distDir,\n                runtimeEnvConfig,\n                checkingApp: false,\n              }))\n          )\n\n        const errorPageStaticResult = nonStaticErrorPageSpan.traceAsyncFn(\n          async () =>\n            hasCustomErrorPage &&\n            worker.isPageStatic({\n              dir,\n              page: '/_error',\n              distDir,\n              configFileName,\n              runtimeEnvConfig,\n              dynamicIO: isAppDynamicIOEnabled,\n              authInterrupts: isAuthInterruptsEnabled,\n              httpAgentOptions: config.httpAgentOptions,\n              locales: config.i18n?.locales,\n              defaultLocale: config.i18n?.defaultLocale,\n              nextConfigOutput: config.output,\n              pprConfig: config.experimental.ppr,\n              cacheLifeProfiles: config.experimental.cacheLife,\n              buildId,\n            })\n        )\n\n        const appPageToCheck = '/_app'\n\n        const customAppGetInitialPropsPromise = worker.hasCustomGetInitialProps(\n          {\n            page: appPageToCheck,\n            distDir,\n            runtimeEnvConfig,\n            checkingApp: true,\n          }\n        )\n\n        const namedExportsPromise = worker.getDefinedNamedExports({\n          page: appPageToCheck,\n          distDir,\n          runtimeEnvConfig,\n        })\n\n        // eslint-disable-next-line @typescript-eslint/no-shadow\n        let isNextImageImported: boolean | undefined\n        // eslint-disable-next-line @typescript-eslint/no-shadow\n        let hasSsrAmpPages = false\n\n        const computedManifestData = await computeFromManifest(\n          { build: buildManifest, app: appBuildManifest },\n          distDir,\n          config.experimental.gzipSize\n        )\n\n        const middlewareManifest: MiddlewareManifest = require(\n          path.join(distDir, SERVER_DIRECTORY, MIDDLEWARE_MANIFEST)\n        )\n\n        const actionManifest = appDir\n          ? (require(\n              path.join(\n                distDir,\n                SERVER_DIRECTORY,\n                SERVER_REFERENCE_MANIFEST + '.json'\n              )\n            ) as ActionManifest)\n          : null\n        const entriesWithAction = actionManifest ? new Set() : null\n        if (actionManifest && entriesWithAction) {\n          for (const id in actionManifest.node) {\n            for (const entry in actionManifest.node[id].workers) {\n              entriesWithAction.add(entry)\n            }\n          }\n          for (const id in actionManifest.edge) {\n            for (const entry in actionManifest.edge[id].workers) {\n              entriesWithAction.add(entry)\n            }\n          }\n        }\n\n        for (const key of Object.keys(middlewareManifest?.functions)) {\n          if (key.startsWith('/api')) {\n            edgeRuntimePagesCount++\n          }\n        }\n\n        await Promise.all(\n          Object.entries(pageKeys)\n            .reduce<Array<{ pageType: keyof typeof pageKeys; page: string }>>(\n              (acc, [key, files]) => {\n                if (!files) {\n                  return acc\n                }\n\n                const pageType = key as keyof typeof pageKeys\n\n                for (const page of files) {\n                  acc.push({ pageType, page })\n                }\n\n                return acc\n              },\n              []\n            )\n            .map(({ pageType, page }) => {\n              const checkPageSpan = staticCheckSpan.traceChild('check-page', {\n                page,\n              })\n              return checkPageSpan.traceAsyncFn(async () => {\n                const actualPage = normalizePagePath(page)\n                const [size, totalSize] = await getJsPageSizeInKb(\n                  pageType,\n                  actualPage,\n                  distDir,\n                  buildManifest,\n                  appBuildManifest,\n                  config.experimental.gzipSize,\n                  computedManifestData\n                )\n\n                let isRoutePPREnabled = false\n                let isSSG = false\n                let isStatic = false\n                let isServerComponent = false\n                let isHybridAmp = false\n                let ssgPageRoutes: string[] | null = null\n                let pagePath = ''\n\n                if (pageType === 'pages') {\n                  pagePath =\n                    pagesPaths.find((p) => {\n                      p = normalizePathSep(p)\n                      return (\n                        p.startsWith(actualPage + '.') ||\n                        p.startsWith(actualPage + '/index.')\n                      )\n                    }) || ''\n                }\n                let originalAppPath: string | undefined\n\n                if (pageType === 'app' && mappedAppPages) {\n                  for (const [originalPath, normalizedPath] of Object.entries(\n                    appPathRoutes\n                  )) {\n                    if (normalizedPath === page) {\n                      pagePath = mappedAppPages[originalPath].replace(\n                        /^private-next-app-dir/,\n                        ''\n                      )\n                      originalAppPath = originalPath\n                      break\n                    }\n                  }\n                }\n\n                const pageFilePath = isAppBuiltinNotFoundPage(pagePath)\n                  ? require.resolve(\n                      'next/dist/client/components/not-found-error'\n                    )\n                  : path.join(\n                      (pageType === 'pages' ? pagesDir : appDir) || '',\n                      pagePath\n                    )\n\n                const isInsideAppDir = pageType === 'app'\n                const staticInfo = pagePath\n                  ? await getStaticInfoIncludingLayouts({\n                      isInsideAppDir,\n                      pageFilePath,\n                      pageExtensions: config.pageExtensions,\n                      appDir,\n                      config,\n                      isDev: false,\n                      // If this route is an App Router page route, inherit the\n                      // route segment configs (e.g. `runtime`) from the layout by\n                      // passing the `originalAppPath`, which should end with `/page`.\n                      page: isInsideAppDir ? originalAppPath! : page,\n                    })\n                  : undefined\n\n                // If there's any thing that would contribute to the functions\n                // configuration, we need to add it to the manifest.\n                if (\n                  typeof staticInfo?.runtime !== 'undefined' ||\n                  typeof staticInfo?.maxDuration !== 'undefined'\n                ) {\n                  functionsConfigManifest.functions[page] = {\n                    maxDuration: staticInfo?.maxDuration,\n                  }\n                }\n\n                const pageRuntime = middlewareManifest.functions[\n                  originalAppPath || page\n                ]\n                  ? 'edge'\n                  : staticInfo?.runtime\n\n                if (!isCompileMode) {\n                  isServerComponent =\n                    pageType === 'app' &&\n                    staticInfo?.rsc !== RSC_MODULE_TYPES.client\n\n                  if (pageType === 'app' || !isReservedPage(page)) {\n                    try {\n                      let edgeInfo: any\n\n                      if (isEdgeRuntime(pageRuntime)) {\n                        if (pageType === 'app') {\n                          edgeRuntimeAppCount++\n                        } else {\n                          edgeRuntimePagesCount++\n                        }\n\n                        const manifestKey =\n                          pageType === 'pages' ? page : originalAppPath || ''\n\n                        edgeInfo = middlewareManifest.functions[manifestKey]\n                      }\n\n                      let isPageStaticSpan =\n                        checkPageSpan.traceChild('is-page-static')\n                      let workerResult = await isPageStaticSpan.traceAsyncFn(\n                        () => {\n                          return worker.isPageStatic({\n                            dir,\n                            page,\n                            originalAppPath,\n                            distDir,\n                            configFileName,\n                            runtimeEnvConfig,\n                            httpAgentOptions: config.httpAgentOptions,\n                            locales: config.i18n?.locales,\n                            defaultLocale: config.i18n?.defaultLocale,\n                            parentId: isPageStaticSpan.getId(),\n                            pageRuntime,\n                            edgeInfo,\n                            pageType,\n                            dynamicIO: isAppDynamicIOEnabled,\n                            authInterrupts: isAuthInterruptsEnabled,\n                            cacheHandler: config.cacheHandler,\n                            cacheHandlers: config.experimental.cacheHandlers,\n                            isrFlushToDisk: ciEnvironment.hasNextSupport\n                              ? false\n                              : config.experimental.isrFlushToDisk,\n                            maxMemoryCacheSize: config.cacheMaxMemorySize,\n                            nextConfigOutput: config.output,\n                            pprConfig: config.experimental.ppr,\n                            cacheLifeProfiles: config.experimental.cacheLife,\n                            buildId,\n                          })\n                        }\n                      )\n\n                      if (pageType === 'app' && originalAppPath) {\n                        appNormalizedPaths.set(originalAppPath, page)\n                        // TODO-APP: handle prerendering with edge\n                        if (isEdgeRuntime(pageRuntime)) {\n                          isStatic = false\n                          isSSG = false\n\n                          Log.warnOnce(\n                            `Using edge runtime on a page currently disables static generation for that page`\n                          )\n                        } else {\n                          const isDynamic = isDynamicRoute(page)\n\n                          // If this route can be partially pre-rendered, then\n                          // mark it as such and mark that it can be\n                          // generated server-side.\n                          if (workerResult.isRoutePPREnabled) {\n                            isRoutePPREnabled = workerResult.isRoutePPREnabled\n                            isSSG = true\n                            isStatic = true\n\n                            staticPaths.set(originalAppPath, [])\n                          }\n                          // As PPR isn't enabled for this route, if dynamic IO\n                          // is enabled, and this is a dynamic route, we should\n                          // complete a prospective render for the route so that\n                          // we can use the fallback behavior. This lets us\n                          // check that dynamic pages won't error when they\n                          // enable PPR.\n                          else if (config.experimental.dynamicIO && isDynamic) {\n                            prospectiveRenders.set(originalAppPath, {\n                              page,\n                              originalAppPath,\n                            })\n                          }\n\n                          if (workerResult.prerenderedRoutes) {\n                            staticPaths.set(\n                              originalAppPath,\n                              workerResult.prerenderedRoutes\n                            )\n                            ssgPageRoutes = workerResult.prerenderedRoutes.map(\n                              (route) => route.path\n                            )\n                            isSSG = true\n                          }\n\n                          const appConfig = workerResult.appConfig || {}\n                          if (appConfig.revalidate !== 0) {\n                            const hasGenerateStaticParams =\n                              workerResult.prerenderedRoutes &&\n                              workerResult.prerenderedRoutes.length > 0\n\n                            if (\n                              config.output === 'export' &&\n                              isDynamic &&\n                              !hasGenerateStaticParams\n                            ) {\n                              throw new Error(\n                                `Page \"${page}\" is missing \"generateStaticParams()\" so it cannot be used with \"output: export\" config.`\n                              )\n                            }\n\n                            // Mark the app as static if:\n                            // - It has no dynamic param\n                            // - It doesn't have generateStaticParams but `dynamic` is set to\n                            //   `error` or `force-static`\n                            if (!isDynamic) {\n                              staticPaths.set(originalAppPath, [\n                                {\n                                  path: page,\n                                  encoded: page,\n                                  fallbackRouteParams: undefined,\n                                },\n                              ])\n                              isStatic = true\n                            } else if (\n                              !hasGenerateStaticParams &&\n                              (appConfig.dynamic === 'error' ||\n                                appConfig.dynamic === 'force-static')\n                            ) {\n                              staticPaths.set(originalAppPath, [])\n                              isStatic = true\n                              isRoutePPREnabled = false\n                            }\n                          }\n\n                          if (workerResult.prerenderFallbackMode) {\n                            fallbackModes.set(\n                              originalAppPath,\n                              workerResult.prerenderFallbackMode\n                            )\n                          }\n\n                          appDefaultConfigs.set(originalAppPath, appConfig)\n                        }\n                      } else {\n                        if (isEdgeRuntime(pageRuntime)) {\n                          if (workerResult.hasStaticProps) {\n                            console.warn(\n                              `\"getStaticProps\" is not yet supported fully with \"experimental-edge\", detected on ${page}`\n                            )\n                          }\n                          // TODO: add handling for statically rendering edge\n                          // pages and allow edge with Prerender outputs\n                          workerResult.isStatic = false\n                          workerResult.hasStaticProps = false\n                        }\n\n                        if (\n                          workerResult.isStatic === false &&\n                          (workerResult.isHybridAmp || workerResult.isAmpOnly)\n                        ) {\n                          hasSsrAmpPages = true\n                        }\n\n                        if (workerResult.isHybridAmp) {\n                          isHybridAmp = true\n                          hybridAmpPages.add(page)\n                        }\n\n                        if (workerResult.isNextImageImported) {\n                          isNextImageImported = true\n                        }\n\n                        if (workerResult.hasStaticProps) {\n                          ssgPages.add(page)\n                          isSSG = true\n\n                          if (\n                            workerResult.prerenderedRoutes &&\n                            workerResult.prerenderedRoutes.length > 0\n                          ) {\n                            additionalPaths.set(\n                              page,\n                              workerResult.prerenderedRoutes\n                            )\n                            ssgPageRoutes = workerResult.prerenderedRoutes.map(\n                              (route) => route.path\n                            )\n                          }\n\n                          if (\n                            workerResult.prerenderFallbackMode ===\n                            FallbackMode.BLOCKING_STATIC_RENDER\n                          ) {\n                            ssgBlockingFallbackPages.add(page)\n                          } else if (\n                            workerResult.prerenderFallbackMode ===\n                            FallbackMode.PRERENDER\n                          ) {\n                            ssgStaticFallbackPages.add(page)\n                          }\n                        } else if (workerResult.hasServerProps) {\n                          serverPropsPages.add(page)\n                        } else if (\n                          workerResult.isStatic &&\n                          !isServerComponent &&\n                          (await customAppGetInitialPropsPromise) === false\n                        ) {\n                          staticPages.add(page)\n                          isStatic = true\n                        } else if (isServerComponent) {\n                          // This is a static server component page that doesn't have\n                          // gSP or gSSP. We still treat it as a SSG page.\n                          ssgPages.add(page)\n                          isSSG = true\n                        }\n\n                        if (hasPages404 && page === '/404') {\n                          if (\n                            !workerResult.isStatic &&\n                            !workerResult.hasStaticProps\n                          ) {\n                            throw new Error(\n                              `\\`pages/404\\` ${STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR}`\n                            )\n                          }\n                          // we need to ensure the 404 lambda is present since we use\n                          // it when _app has getInitialProps\n                          if (\n                            (await customAppGetInitialPropsPromise) &&\n                            !workerResult.hasStaticProps\n                          ) {\n                            staticPages.delete(page)\n                          }\n                        }\n\n                        if (\n                          STATIC_STATUS_PAGES.includes(page) &&\n                          !workerResult.isStatic &&\n                          !workerResult.hasStaticProps\n                        ) {\n                          throw new Error(\n                            `\\`pages${page}\\` ${STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR}`\n                          )\n                        }\n                      }\n                    } catch (err) {\n                      if (\n                        !isError(err) ||\n                        err.message !== 'INVALID_DEFAULT_EXPORT'\n                      )\n                        throw err\n                      invalidPages.add(page)\n                    }\n                  }\n\n                  if (pageType === 'app') {\n                    if (isSSG || isStatic) {\n                      staticAppPagesCount++\n                    } else {\n                      serverAppPagesCount++\n                    }\n                  }\n                }\n\n                pageInfos.set(page, {\n                  size,\n                  totalSize,\n                  isStatic,\n                  isSSG,\n                  isRoutePPREnabled,\n                  isHybridAmp,\n                  ssgPageRoutes,\n                  initialRevalidateSeconds: false,\n                  runtime: pageRuntime,\n                  pageDuration: undefined,\n                  ssgPageDurations: undefined,\n                  hasEmptyPrelude: undefined,\n                })\n              })\n            })\n        )\n\n        if (hadUnsupportedValue) {\n          Log.error(\n            `Invalid config value exports detected, these can cause unexpected behavior from the configs not being applied. Please fix them to continue`\n          )\n          process.exit(1)\n        }\n\n        const errorPageResult = await errorPageStaticResult\n        const nonStaticErrorPage =\n          (await errorPageHasCustomGetInitialProps) ||\n          (errorPageResult && errorPageResult.hasServerProps)\n\n        const returnValue = {\n          customAppGetInitialProps: await customAppGetInitialPropsPromise,\n          namedExports: await namedExportsPromise,\n          isNextImageImported,\n          hasSsrAmpPages,\n          hasNonStaticErrorPage: nonStaticErrorPage,\n        }\n\n        return returnValue\n      })\n\n      if (postCompileSpinner) postCompileSpinner.stopAndPersist()\n      traceMemoryUsage('Finished collecting page data', nextBuildSpan)\n\n      if (customAppGetInitialProps) {\n        console.warn(\n          bold(yellow(`Warning: `)) +\n            yellow(\n              `You have opted-out of Automatic Static Optimization due to \\`getInitialProps\\` in \\`pages/_app\\`. This does not opt-out pages with \\`getStaticProps\\``\n            )\n        )\n        console.warn(\n          'Read more: https://nextjs.org/docs/messages/opt-out-auto-static-optimization\\n'\n        )\n      }\n\n      const { cacheHandler } = config\n\n      const instrumentationHookEntryFiles: string[] = []\n      if (hasInstrumentationHook) {\n        instrumentationHookEntryFiles.push(\n          path.join(SERVER_DIRECTORY, `${INSTRUMENTATION_HOOK_FILENAME}.js`)\n        )\n        // If there's edge routes, append the edge instrumentation hook\n        if (edgeRuntimeAppCount || edgeRuntimePagesCount) {\n          instrumentationHookEntryFiles.push(\n            path.join(\n              SERVER_DIRECTORY,\n              `edge-${INSTRUMENTATION_HOOK_FILENAME}.js`\n            )\n          )\n        }\n      }\n\n      const requiredServerFilesManifest = nextBuildSpan\n        .traceChild('generate-required-server-files')\n        .traceFn(() => {\n          const normalizedCacheHandlers: Record<string, string> = {}\n\n          for (const [key, value] of Object.entries(\n            config.experimental.cacheHandlers || {}\n          )) {\n            if (key && value) {\n              normalizedCacheHandlers[key] = path.relative(distDir, value)\n            }\n          }\n\n          const serverFilesManifest: RequiredServerFilesManifest = {\n            version: 1,\n            config: {\n              ...config,\n              configFile: undefined,\n              ...(ciEnvironment.hasNextSupport\n                ? {\n                    compress: false,\n                  }\n                : {}),\n              cacheHandler: cacheHandler\n                ? path.relative(distDir, cacheHandler)\n                : config.cacheHandler,\n              experimental: {\n                ...config.experimental,\n                cacheHandlers: normalizedCacheHandlers,\n                trustHostHeader: ciEnvironment.hasNextSupport,\n\n                // @ts-expect-error internal field TODO: fix this, should use a separate mechanism to pass the info.\n                isExperimentalCompile: isCompileMode,\n              },\n            },\n            appDir: dir,\n            relativeAppDir: path.relative(outputFileTracingRoot, dir),\n            files: [\n              ROUTES_MANIFEST,\n              path.relative(distDir, pagesManifestPath),\n              BUILD_MANIFEST,\n              PRERENDER_MANIFEST,\n              path.join(SERVER_DIRECTORY, MIDDLEWARE_MANIFEST),\n              path.join(SERVER_DIRECTORY, MIDDLEWARE_BUILD_MANIFEST + '.js'),\n              path.join(\n                SERVER_DIRECTORY,\n                MIDDLEWARE_REACT_LOADABLE_MANIFEST + '.js'\n              ),\n              ...(appDir\n                ? [\n                    ...(config.experimental.sri\n                      ? [\n                          path.join(\n                            SERVER_DIRECTORY,\n                            SUBRESOURCE_INTEGRITY_MANIFEST + '.js'\n                          ),\n                          path.join(\n                            SERVER_DIRECTORY,\n                            SUBRESOURCE_INTEGRITY_MANIFEST + '.json'\n                          ),\n                        ]\n                      : []),\n                    path.join(SERVER_DIRECTORY, APP_PATHS_MANIFEST),\n                    path.join(APP_PATH_ROUTES_MANIFEST),\n                    APP_BUILD_MANIFEST,\n                    path.join(\n                      SERVER_DIRECTORY,\n                      SERVER_REFERENCE_MANIFEST + '.js'\n                    ),\n                    path.join(\n                      SERVER_DIRECTORY,\n                      SERVER_REFERENCE_MANIFEST + '.json'\n                    ),\n                  ]\n                : []),\n              ...(pagesDir && !turboNextBuild\n                ? [\n                    DYNAMIC_CSS_MANIFEST + '.json',\n                    path.join(SERVER_DIRECTORY, DYNAMIC_CSS_MANIFEST + '.js'),\n                  ]\n                : []),\n              REACT_LOADABLE_MANIFEST,\n              BUILD_ID_FILE,\n              path.join(SERVER_DIRECTORY, NEXT_FONT_MANIFEST + '.js'),\n              path.join(SERVER_DIRECTORY, NEXT_FONT_MANIFEST + '.json'),\n              ...instrumentationHookEntryFiles,\n            ]\n              .filter(nonNullable)\n              .map((file) => path.join(config.distDir, file)),\n            ignore: [] as string[],\n          }\n\n          return serverFilesManifest\n        })\n\n      if (!hasSsrAmpPages) {\n        requiredServerFilesManifest.ignore.push(\n          path.relative(\n            dir,\n            path.join(\n              path.dirname(\n                require.resolve(\n                  'next/dist/compiled/@ampproject/toolbox-optimizer'\n                )\n              ),\n              '**/*'\n            )\n          )\n        )\n      }\n\n      await writeFunctionsConfigManifest(distDir, functionsConfigManifest)\n\n      if (!isGenerateMode && !buildTracesPromise) {\n        buildTracesPromise = collectBuildTraces({\n          dir,\n          config,\n          distDir,\n          edgeRuntimeRoutes: collectRoutesUsingEdgeRuntime(pageInfos),\n          staticPages: [...staticPages],\n          nextBuildSpan,\n          hasSsrAmpPages,\n          buildTraceContext,\n          outputFileTracingRoot,\n        }).catch((err) => {\n          console.error(err)\n          process.exit(1)\n        })\n      }\n\n      if (serverPropsPages.size > 0 || ssgPages.size > 0) {\n        // We update the routes manifest after the build with the\n        // data routes since we can't determine these until after build\n        routesManifest.dataRoutes = getSortedRoutes([\n          ...serverPropsPages,\n          ...ssgPages,\n        ]).map((page) => {\n          return buildDataRoute(page, buildId)\n        })\n\n        // await writeManifest(routesManifestPath, routesManifest)\n      }\n\n      // We need to write the manifest with rewrites before build\n      await nextBuildSpan\n        .traceChild('write-routes-manifest')\n        .traceAsyncFn(() => writeManifest(routesManifestPath, routesManifest))\n\n      // Since custom _app.js can wrap the 404 page we have to opt-out of static optimization if it has getInitialProps\n      // Only export the static 404 when there is no /_error present\n      const useStaticPages404 =\n        !customAppGetInitialProps && (!hasNonStaticErrorPage || hasPages404)\n\n      if (invalidPages.size > 0) {\n        const err = new Error(\n          `Build optimization failed: found page${\n            invalidPages.size === 1 ? '' : 's'\n          } without a React Component as default export in \\n${[...invalidPages]\n            .map((pg) => `pages${pg}`)\n            .join(\n              '\\n'\n            )}\\n\\nSee https://nextjs.org/docs/messages/page-without-valid-component for more info.\\n`\n        ) as NextError\n        err.code = 'BUILD_OPTIMIZATION_FAILED'\n        throw err\n      }\n\n      await writeBuildId(distDir, buildId)\n\n      if (config.experimental.optimizeCss) {\n        const globOrig =\n          require('next/dist/compiled/glob') as typeof import('next/dist/compiled/glob')\n\n        const cssFilePaths = await new Promise<string[]>((resolve, reject) => {\n          globOrig(\n            '**/*.css',\n            { cwd: path.join(distDir, 'static') },\n            (err, files) => {\n              if (err) {\n                return reject(err)\n              }\n              resolve(files)\n            }\n          )\n        })\n\n        requiredServerFilesManifest.files.push(\n          ...cssFilePaths.map((filePath) =>\n            path.join(config.distDir, 'static', filePath)\n          )\n        )\n      }\n\n      const features: EventBuildFeatureUsage[] = [\n        {\n          featureName: 'experimental/optimizeCss',\n          invocationCount: config.experimental.optimizeCss ? 1 : 0,\n        },\n        {\n          featureName: 'experimental/nextScriptWorkers',\n          invocationCount: config.experimental.nextScriptWorkers ? 1 : 0,\n        },\n        {\n          featureName: 'experimental/ppr',\n          invocationCount: config.experimental.ppr ? 1 : 0,\n        },\n      ]\n      telemetry.record(\n        features.map((feature) => {\n          return {\n            eventName: EVENT_BUILD_FEATURE_USAGE,\n            payload: feature,\n          }\n        })\n      )\n\n      await writeRequiredServerFilesManifest(\n        distDir,\n        requiredServerFilesManifest\n      )\n\n      const middlewareManifest: MiddlewareManifest = await readManifest(\n        path.join(distDir, SERVER_DIRECTORY, MIDDLEWARE_MANIFEST)\n      )\n\n      const prerenderManifest: PrerenderManifest = {\n        version: 4,\n        routes: {},\n        dynamicRoutes: {},\n        notFoundRoutes: [],\n        preview: previewProps,\n      }\n\n      const tbdPrerenderRoutes: string[] = []\n\n      const { i18n } = config\n\n      const usedStaticStatusPages = STATIC_STATUS_PAGES.filter(\n        (page) =>\n          mappedPages[page] &&\n          mappedPages[page].startsWith('private-next-pages')\n      )\n      usedStaticStatusPages.forEach((page) => {\n        if (!ssgPages.has(page) && !customAppGetInitialProps) {\n          staticPages.add(page)\n        }\n      })\n\n      const hasPages500 = usedStaticStatusPages.includes('/500')\n      const useDefaultStatic500 =\n        !hasPages500 && !hasNonStaticErrorPage && !customAppGetInitialProps\n\n      const combinedPages = [...staticPages, ...ssgPages]\n      const isApp404Static = staticPaths.has(UNDERSCORE_NOT_FOUND_ROUTE_ENTRY)\n      const hasStaticApp404 = hasApp404 && isApp404Static\n\n      await updateBuildDiagnostics({\n        buildStage: 'static-generation',\n      })\n\n      // we need to trigger automatic exporting when we have\n      // - static 404/500\n      // - getStaticProps paths\n      // - experimental app is enabled\n      if (\n        !isCompileMode &&\n        (combinedPages.length > 0 ||\n          useStaticPages404 ||\n          useDefaultStatic500 ||\n          appDir)\n      ) {\n        const staticGenerationSpan =\n          nextBuildSpan.traceChild('static-generation')\n        await staticGenerationSpan.traceAsyncFn(async () => {\n          detectConflictingPaths(\n            [\n              ...combinedPages,\n              ...pageKeys.pages.filter((page) => !combinedPages.includes(page)),\n            ],\n            ssgPages,\n            new Map(\n              Array.from(additionalPaths.entries()).map(\n                ([page, routes]): [string, string[]] => {\n                  return [page, routes.map((route) => route.path)]\n                }\n              )\n            )\n          )\n          const exportApp = require('../export')\n            .default as typeof import('../export').default\n\n          const exportConfig: NextConfigComplete = {\n            ...config,\n            // Default map will be the collection of automatic statically exported\n            // pages and incremental pages.\n            // n.b. we cannot handle this above in combinedPages because the dynamic\n            // page must be in the `pages` array, but not in the mapping.\n            exportPathMap: (defaultMap: ExportPathMap) => {\n              // Dynamically routed pages should be prerendered to be used as\n              // a client-side skeleton (fallback) while data is being fetched.\n              // This ensures the end-user never sees a 500 or slow response from the\n              // server.\n              //\n              // Note: prerendering disables automatic static optimization.\n              ssgPages.forEach((page) => {\n                if (isDynamicRoute(page)) {\n                  tbdPrerenderRoutes.push(page)\n\n                  if (ssgStaticFallbackPages.has(page)) {\n                    // Override the rendering for the dynamic page to be treated as a\n                    // fallback render.\n                    if (i18n) {\n                      defaultMap[`/${i18n.defaultLocale}${page}`] = {\n                        page,\n                        query: { __nextFallback: 'true' },\n                      }\n                    } else {\n                      defaultMap[page] = {\n                        page,\n                        query: { __nextFallback: 'true' },\n                      }\n                    }\n                  } else {\n                    // Remove dynamically routed pages from the default path map when\n                    // fallback behavior is disabled.\n                    delete defaultMap[page]\n                  }\n                }\n              })\n\n              // Append the \"well-known\" routes we should prerender for, e.g. blog\n              // post slugs.\n              additionalPaths.forEach((routes, page) => {\n                routes.forEach((route) => {\n                  defaultMap[route.path] = {\n                    page,\n                    query: { __nextSsgPath: route.encoded },\n                  }\n                })\n              })\n\n              if (useStaticPages404) {\n                defaultMap['/404'] = {\n                  page: hasPages404 ? '/404' : '/_error',\n                }\n              }\n\n              if (useDefaultStatic500) {\n                defaultMap['/500'] = {\n                  page: '/_error',\n                }\n              }\n\n              // TODO: output manifest specific to app paths and their\n              // revalidate periods and dynamicParams settings\n              staticPaths.forEach((routes, originalAppPath) => {\n                const appConfig = appDefaultConfigs.get(originalAppPath)\n                const isDynamicError = appConfig?.dynamic === 'error'\n\n                const isRoutePPREnabled = appConfig\n                  ? checkIsRoutePPREnabled(config.experimental.ppr, appConfig)\n                  : undefined\n\n                routes.forEach((route) => {\n                  defaultMap[route.path] = {\n                    page: originalAppPath,\n                    query: { __nextSsgPath: route.encoded },\n                    _fallbackRouteParams: route.fallbackRouteParams,\n                    _isDynamicError: isDynamicError,\n                    _isAppDir: true,\n                    _isRoutePPREnabled: isRoutePPREnabled,\n                  }\n                })\n              })\n\n              // If the app does have dynamic IO enabled but does not have PPR\n              // enabled, then we need to perform a prospective render for all\n              // the dynamic pages to ensure that they won't error during\n              // rendering (due to a missing prelude).\n              for (const {\n                page,\n                originalAppPath,\n              } of prospectiveRenders.values()) {\n                defaultMap[page] = {\n                  page: originalAppPath,\n                  query: { __nextSsgPath: page },\n                  _fallbackRouteParams: getParamKeys(page),\n                  // Prospective renders are only enabled for app pages.\n                  _isAppDir: true,\n                  // Prospective renders are only enabled when PPR is disabled.\n                  _isRoutePPREnabled: false,\n                  _isProspectiveRender: true,\n                  // Dynamic IO does not currently support `dynamic === 'error'`.\n                  _isDynamicError: false,\n                }\n              }\n\n              if (i18n) {\n                for (const page of [\n                  ...staticPages,\n                  ...ssgPages,\n                  ...(useStaticPages404 ? ['/404'] : []),\n                  ...(useDefaultStatic500 ? ['/500'] : []),\n                ]) {\n                  const isSsg = ssgPages.has(page)\n                  const isDynamic = isDynamicRoute(page)\n                  const isFallback = isSsg && ssgStaticFallbackPages.has(page)\n\n                  for (const locale of i18n.locales) {\n                    // skip fallback generation for SSG pages without fallback mode\n                    if (isSsg && isDynamic && !isFallback) continue\n                    const outputPath = `/${locale}${page === '/' ? '' : page}`\n\n                    defaultMap[outputPath] = {\n                      page: defaultMap[page]?.page || page,\n                      query: {\n                        __nextLocale: locale,\n                        __nextFallback: isFallback ? 'true' : undefined,\n                      },\n                    }\n                  }\n\n                  if (isSsg) {\n                    // remove non-locale prefixed variant from defaultMap\n                    delete defaultMap[page]\n                  }\n                }\n              }\n\n              return defaultMap\n            },\n          }\n\n          const outdir = path.join(distDir, 'export')\n          const exportResult = await exportApp(\n            dir,\n            {\n              nextConfig: exportConfig,\n              enabledDirectories,\n              silent: true,\n              buildExport: true,\n              debugOutput,\n              pages: combinedPages,\n              outdir,\n              statusMessage: 'Generating static pages',\n              numWorkers: getNumberOfWorkers(exportConfig),\n            },\n            nextBuildSpan\n          )\n\n          // If there was no result, there's nothing more to do.\n          if (!exportResult) return\n\n          if (debugOutput || process.env.NEXT_SSG_FETCH_METRICS === '1') {\n            recordFetchMetrics(exportResult)\n          }\n\n          writeTurborepoAccessTraceResult({\n            distDir: config.distDir,\n            traces: [\n              turborepoAccessTraceResult,\n              ...exportResult.turborepoAccessTraceResults.values(),\n            ],\n          })\n\n          prerenderManifest.notFoundRoutes = Array.from(\n            exportResult.ssgNotFoundPaths\n          )\n\n          // remove server bundles that were exported\n          for (const page of staticPages) {\n            const serverBundle = getPagePath(page, distDir, undefined, false)\n            await fs.unlink(serverBundle)\n          }\n\n          staticPaths.forEach((prerenderedRoutes, originalAppPath) => {\n            const page = appNormalizedPaths.get(originalAppPath) || ''\n            const appConfig = appDefaultConfigs.get(originalAppPath) || {}\n\n            let hasRevalidateZero =\n              appConfig.revalidate === 0 ||\n              exportResult.byPath.get(page)?.revalidate === 0\n\n            if (hasRevalidateZero && pageInfos.get(page)?.isStatic) {\n              // if the page was marked as being static, but it contains dynamic data\n              // (ie, in the case of a static generation bailout), then it should be marked dynamic\n              pageInfos.set(page, {\n                ...(pageInfos.get(page) as PageInfo),\n                isStatic: false,\n                isSSG: false,\n              })\n            }\n\n            const isAppRouteHandler = isAppRouteRoute(originalAppPath)\n\n            // When this is an app page and PPR is enabled, the route supports\n            // partial pre-rendering.\n            const isRoutePPREnabled: true | undefined =\n              !isAppRouteHandler &&\n              checkIsRoutePPREnabled(config.experimental.ppr, appConfig)\n                ? true\n                : undefined\n\n            // this flag is used to selectively bypass the static cache and invoke the lambda directly\n            // to enable server actions on static routes\n            const bypassFor: RouteHas[] = [\n              { type: 'header', key: ACTION_HEADER },\n              {\n                type: 'header',\n                key: 'content-type',\n                value: 'multipart/form-data;.*',\n              },\n            ]\n\n            // We should collect all the dynamic routes into a single array for\n            // this page. Including the full fallback route (the original\n            // route), any routes that were generated with unknown route params\n            // should be collected and included in the dynamic routes part\n            // of the manifest instead.\n            const routes: string[] = []\n            const dynamicRoutes: string[] = []\n\n            // Sort the outputted routes to ensure consistent output. Any route\n            // though that has unknown route params will be pulled and sorted\n            // independently. This is because the routes with unknown route\n            // params will contain the dynamic path parameters, some of which\n            // may conflict with the actual prerendered routes.\n            let unknownPrerenderRoutes: PrerenderedRoute[] = []\n            let knownPrerenderRoutes: PrerenderedRoute[] = []\n            for (const prerenderedRoute of prerenderedRoutes) {\n              if (\n                prerenderedRoute.fallbackRouteParams &&\n                prerenderedRoute.fallbackRouteParams.length > 0\n              ) {\n                unknownPrerenderRoutes.push(prerenderedRoute)\n              } else {\n                knownPrerenderRoutes.push(prerenderedRoute)\n              }\n            }\n\n            unknownPrerenderRoutes = getSortedRouteObjects(\n              unknownPrerenderRoutes,\n              (prerenderedRoute) => prerenderedRoute.path\n            )\n            knownPrerenderRoutes = getSortedRouteObjects(\n              knownPrerenderRoutes,\n              (prerenderedRoute) => prerenderedRoute.path\n            )\n\n            prerenderedRoutes = [\n              ...knownPrerenderRoutes,\n              ...unknownPrerenderRoutes,\n            ]\n\n            for (const prerenderedRoute of prerenderedRoutes) {\n              // TODO: check if still needed?\n              // Exclude the /_not-found route.\n              if (prerenderedRoute.path === UNDERSCORE_NOT_FOUND_ROUTE) {\n                continue\n              }\n\n              if (\n                isRoutePPREnabled &&\n                prerenderedRoute.fallbackRouteParams &&\n                prerenderedRoute.fallbackRouteParams.length > 0\n              ) {\n                // If the route has unknown params, then we need to add it to\n                // the list of dynamic routes.\n                dynamicRoutes.push(prerenderedRoute.path)\n              } else {\n                // If the route doesn't have unknown params, then we need to\n                // add it to the list of routes.\n                routes.push(prerenderedRoute.path)\n              }\n            }\n\n            // Handle all the static routes.\n            for (const route of routes) {\n              if (isDynamicRoute(page) && route === page) continue\n              if (route === UNDERSCORE_NOT_FOUND_ROUTE) continue\n\n              const {\n                revalidate = appConfig.revalidate ?? false,\n                metadata = {},\n                hasEmptyPrelude,\n                hasPostponed,\n              } = exportResult.byPath.get(route) ?? {}\n\n              pageInfos.set(route, {\n                ...(pageInfos.get(route) as PageInfo),\n                hasPostponed,\n                hasEmptyPrelude,\n              })\n\n              // update the page (eg /blog/[slug]) to also have the postpone metadata\n              pageInfos.set(page, {\n                ...(pageInfos.get(page) as PageInfo),\n                hasPostponed,\n                hasEmptyPrelude,\n              })\n\n              if (revalidate !== 0) {\n                const normalizedRoute = normalizePagePath(route)\n\n                let dataRoute: string | null\n                if (isAppRouteHandler) {\n                  dataRoute = null\n                } else {\n                  dataRoute = path.posix.join(`${normalizedRoute}${RSC_SUFFIX}`)\n                }\n\n                let prefetchDataRoute: string | null | undefined\n                // While we may only write the `.rsc` when the route does not\n                // have PPR enabled, we still want to generate the route when\n                // deployed so it doesn't 404. If the app has PPR enabled, we\n                // should add this key.\n                if (!isAppRouteHandler && isAppPPREnabled) {\n                  prefetchDataRoute = path.posix.join(\n                    `${normalizedRoute}${RSC_PREFETCH_SUFFIX}`\n                  )\n                }\n\n                const meta = collectMeta(metadata)\n\n                prerenderManifest.routes[route] = {\n                  initialStatus: meta.status,\n                  initialHeaders: meta.headers,\n                  renderingMode: isAppPPREnabled\n                    ? isRoutePPREnabled\n                      ? RenderingMode.PARTIALLY_STATIC\n                      : RenderingMode.STATIC\n                    : undefined,\n                  experimentalPPR: isRoutePPREnabled,\n                  experimentalBypassFor: bypassFor,\n                  initialRevalidateSeconds: revalidate,\n                  srcRoute: page,\n                  dataRoute,\n                  prefetchDataRoute,\n                  allowHeader: ALLOWED_HEADERS,\n                }\n              } else {\n                hasRevalidateZero = true\n                // we might have determined during prerendering that this page\n                // used dynamic data\n                pageInfos.set(route, {\n                  ...(pageInfos.get(route) as PageInfo),\n                  isSSG: false,\n                  isStatic: false,\n                })\n              }\n            }\n\n            if (!hasRevalidateZero && isDynamicRoute(page)) {\n              // When PPR fallbacks aren't used, we need to include it here. If\n              // they are enabled, then it'll already be included in the\n              // prerendered routes.\n              if (!isRoutePPREnabled) {\n                dynamicRoutes.push(page)\n              }\n\n              for (const route of dynamicRoutes) {\n                const normalizedRoute = normalizePagePath(route)\n\n                const { metadata, revalidate } =\n                  exportResult.byPath.get(route) ?? {}\n\n                let dataRoute: string | null = null\n                if (!isAppRouteHandler) {\n                  dataRoute = path.posix.join(`${normalizedRoute}${RSC_SUFFIX}`)\n                }\n\n                let prefetchDataRoute: string | undefined\n                if (!isAppRouteHandler && isAppPPREnabled) {\n                  prefetchDataRoute = path.posix.join(\n                    `${normalizedRoute}${RSC_PREFETCH_SUFFIX}`\n                  )\n                }\n\n                pageInfos.set(route, {\n                  ...(pageInfos.get(route) as PageInfo),\n                  isDynamicAppRoute: true,\n                  // if PPR is turned on and the route contains a dynamic segment,\n                  // we assume it'll be partially prerendered\n                  hasPostponed: isRoutePPREnabled,\n                })\n\n                const fallbackMode =\n                  fallbackModes.get(originalAppPath) ?? FallbackMode.NOT_FOUND\n\n                // When we're configured to serve a prerender, we should use the\n                // fallback revalidate from the export result. If it can't be\n                // found, mark that we should keep the shell forever (`false`).\n                let fallbackRevalidate: Revalidate | undefined =\n                  isRoutePPREnabled && fallbackMode === FallbackMode.PRERENDER\n                    ? revalidate ?? false\n                    : undefined\n\n                const fallback: Fallback = fallbackModeToFallbackField(\n                  fallbackMode,\n                  route\n                )\n\n                const meta =\n                  metadata &&\n                  isRoutePPREnabled &&\n                  fallbackMode === FallbackMode.PRERENDER\n                    ? collectMeta(metadata)\n                    : {}\n\n                prerenderManifest.dynamicRoutes[route] = {\n                  experimentalPPR: isRoutePPREnabled,\n                  renderingMode: isAppPPREnabled\n                    ? isRoutePPREnabled\n                      ? RenderingMode.PARTIALLY_STATIC\n                      : RenderingMode.STATIC\n                    : undefined,\n                  experimentalBypassFor: bypassFor,\n                  routeRegex: normalizeRouteRegex(\n                    getNamedRouteRegex(route, false).re.source\n                  ),\n                  dataRoute,\n                  fallback,\n                  fallbackRevalidate,\n                  fallbackStatus: meta.status,\n                  fallbackHeaders: meta.headers,\n                  dataRouteRegex: !dataRoute\n                    ? null\n                    : normalizeRouteRegex(\n                        getNamedRouteRegex(\n                          dataRoute.replace(/\\.rsc$/, ''),\n                          false\n                        ).re.source.replace(/\\(\\?:\\\\\\/\\)\\?\\$$/, '\\\\.rsc$')\n                      ),\n                  prefetchDataRoute,\n                  prefetchDataRouteRegex: !prefetchDataRoute\n                    ? undefined\n                    : normalizeRouteRegex(\n                        getNamedRouteRegex(\n                          prefetchDataRoute.replace(/\\.prefetch\\.rsc$/, ''),\n                          false\n                        ).re.source.replace(\n                          /\\(\\?:\\\\\\/\\)\\?\\$$/,\n                          '\\\\.prefetch\\\\.rsc$'\n                        )\n                      ),\n                  allowHeader: ALLOWED_HEADERS,\n                }\n              }\n            }\n          })\n\n          const moveExportedPage = async (\n            originPage: string,\n            page: string,\n            file: string,\n            isSsg: boolean,\n            ext: 'html' | 'json',\n            additionalSsgFile = false\n          ) => {\n            return staticGenerationSpan\n              .traceChild('move-exported-page')\n              .traceAsyncFn(async () => {\n                file = `${file}.${ext}`\n                const orig = path.join(outdir, file)\n                const pagePath = getPagePath(\n                  originPage,\n                  distDir,\n                  undefined,\n                  false\n                )\n\n                const relativeDest = path\n                  .relative(\n                    path.join(distDir, SERVER_DIRECTORY),\n                    path.join(\n                      path.join(\n                        pagePath,\n                        // strip leading / and then recurse number of nested dirs\n                        // to place from base folder\n                        originPage\n                          .slice(1)\n                          .split('/')\n                          .map(() => '..')\n                          .join('/')\n                      ),\n                      file\n                    )\n                  )\n                  .replace(/\\\\/g, '/')\n\n                if (\n                  !isSsg &&\n                  !(\n                    // don't add static status page to manifest if it's\n                    // the default generated version e.g. no pages/500\n                    (\n                      STATIC_STATUS_PAGES.includes(page) &&\n                      !usedStaticStatusPages.includes(page)\n                    )\n                  )\n                ) {\n                  pagesManifest[page] = relativeDest\n                }\n\n                const dest = path.join(distDir, SERVER_DIRECTORY, relativeDest)\n                const isNotFound =\n                  prerenderManifest.notFoundRoutes.includes(page)\n\n                // for SSG files with i18n the non-prerendered variants are\n                // output with the locale prefixed so don't attempt moving\n                // without the prefix\n                if ((!i18n || additionalSsgFile) && !isNotFound) {\n                  await fs.mkdir(path.dirname(dest), { recursive: true })\n                  await fs.rename(orig, dest)\n                } else if (i18n && !isSsg) {\n                  // this will be updated with the locale prefixed variant\n                  // since all files are output with the locale prefix\n                  delete pagesManifest[page]\n                }\n\n                if (i18n) {\n                  if (additionalSsgFile) return\n\n                  const localeExt = page === '/' ? path.extname(file) : ''\n                  const relativeDestNoPages = relativeDest.slice(\n                    'pages/'.length\n                  )\n\n                  for (const locale of i18n.locales) {\n                    const curPath = `/${locale}${page === '/' ? '' : page}`\n\n                    if (\n                      isSsg &&\n                      prerenderManifest.notFoundRoutes.includes(curPath)\n                    ) {\n                      continue\n                    }\n\n                    const updatedRelativeDest = path\n                      .join(\n                        'pages',\n                        locale + localeExt,\n                        // if it's the top-most index page we want it to be locale.EXT\n                        // instead of locale/index.html\n                        page === '/' ? '' : relativeDestNoPages\n                      )\n                      .replace(/\\\\/g, '/')\n\n                    const updatedOrig = path.join(\n                      outdir,\n                      locale + localeExt,\n                      page === '/' ? '' : file\n                    )\n                    const updatedDest = path.join(\n                      distDir,\n                      SERVER_DIRECTORY,\n                      updatedRelativeDest\n                    )\n\n                    if (!isSsg) {\n                      pagesManifest[curPath] = updatedRelativeDest\n                    }\n                    await fs.mkdir(path.dirname(updatedDest), {\n                      recursive: true,\n                    })\n                    await fs.rename(updatedOrig, updatedDest)\n                  }\n                }\n              })\n          }\n\n          async function moveExportedAppNotFoundTo404() {\n            return staticGenerationSpan\n              .traceChild('move-exported-app-not-found-')\n              .traceAsyncFn(async () => {\n                const orig = path.join(\n                  distDir,\n                  'server',\n                  'app',\n                  '_not-found.html'\n                )\n                const updatedRelativeDest = path\n                  .join('pages', '404.html')\n                  .replace(/\\\\/g, '/')\n\n                if (existsSync(orig)) {\n                  await fs.copyFile(\n                    orig,\n                    path.join(distDir, 'server', updatedRelativeDest)\n                  )\n                  pagesManifest['/404'] = updatedRelativeDest\n                }\n              })\n          }\n\n          // If there's /not-found inside app, we prefer it over the pages 404\n          if (hasStaticApp404) {\n            await moveExportedAppNotFoundTo404()\n          } else {\n            // Only move /404 to /404 when there is no custom 404 as in that case we don't know about the 404 page\n            if (!hasPages404 && !hasApp404 && useStaticPages404) {\n              await moveExportedPage('/_error', '/404', '/404', false, 'html')\n            }\n          }\n\n          if (useDefaultStatic500) {\n            await moveExportedPage('/_error', '/500', '/500', false, 'html')\n          }\n\n          for (const page of combinedPages) {\n            const isSsg = ssgPages.has(page)\n            const isStaticSsgFallback = ssgStaticFallbackPages.has(page)\n            const isDynamic = isDynamicRoute(page)\n            const hasAmp = hybridAmpPages.has(page)\n            const file = normalizePagePath(page)\n\n            const pageInfo = pageInfos.get(page)\n            const durationInfo = exportResult.byPage.get(page)\n            if (pageInfo && durationInfo) {\n              // Set Build Duration\n              if (pageInfo.ssgPageRoutes) {\n                pageInfo.ssgPageDurations = pageInfo.ssgPageRoutes.map(\n                  (pagePath) => {\n                    const duration = durationInfo.durationsByPath.get(pagePath)\n                    if (typeof duration === 'undefined') {\n                      throw new Error(\"Invariant: page wasn't built\")\n                    }\n\n                    return duration\n                  }\n                )\n              }\n              pageInfo.pageDuration = durationInfo.durationsByPath.get(page)\n            }\n\n            // The dynamic version of SSG pages are only prerendered if the\n            // fallback is enabled. Below, we handle the specific prerenders\n            // of these.\n            const hasHtmlOutput = !(isSsg && isDynamic && !isStaticSsgFallback)\n\n            if (hasHtmlOutput) {\n              await moveExportedPage(page, page, file, isSsg, 'html')\n            }\n\n            if (hasAmp && (!isSsg || (isSsg && !isDynamic))) {\n              const ampPage = `${file}.amp`\n              await moveExportedPage(page, ampPage, ampPage, isSsg, 'html')\n\n              if (isSsg) {\n                await moveExportedPage(page, ampPage, ampPage, isSsg, 'json')\n              }\n            }\n\n            if (isSsg) {\n              // For a non-dynamic SSG page, we must copy its data file\n              // from export, we already moved the HTML file above\n              if (!isDynamic) {\n                await moveExportedPage(page, page, file, isSsg, 'json')\n\n                if (i18n) {\n                  // TODO: do we want to show all locale variants in build output\n                  for (const locale of i18n.locales) {\n                    const localePage = `/${locale}${page === '/' ? '' : page}`\n\n                    prerenderManifest.routes[localePage] = {\n                      initialRevalidateSeconds:\n                        exportResult.byPath.get(localePage)?.revalidate ??\n                        false,\n                      experimentalPPR: undefined,\n                      renderingMode: undefined,\n                      srcRoute: null,\n                      dataRoute: path.posix.join(\n                        '/_next/data',\n                        buildId,\n                        `${file}.json`\n                      ),\n                      prefetchDataRoute: undefined,\n                      allowHeader: ALLOWED_HEADERS,\n                    }\n                  }\n                } else {\n                  prerenderManifest.routes[page] = {\n                    initialRevalidateSeconds:\n                      exportResult.byPath.get(page)?.revalidate ?? false,\n                    experimentalPPR: undefined,\n                    renderingMode: undefined,\n                    srcRoute: null,\n                    dataRoute: path.posix.join(\n                      '/_next/data',\n                      buildId,\n                      `${file}.json`\n                    ),\n                    // Pages does not have a prefetch data route.\n                    prefetchDataRoute: undefined,\n                    allowHeader: ALLOWED_HEADERS,\n                  }\n                }\n                // Set Page Revalidation Interval\n                if (pageInfo) {\n                  pageInfo.initialRevalidateSeconds =\n                    exportResult.byPath.get(page)?.revalidate ?? false\n                }\n              } else {\n                // For a dynamic SSG page, we did not copy its data exports and only\n                // copy the fallback HTML file (if present).\n                // We must also copy specific versions of this page as defined by\n                // `getStaticPaths` (additionalSsgPaths).\n                for (const route of additionalPaths.get(page) ?? []) {\n                  const pageFile = normalizePagePath(route.path)\n                  await moveExportedPage(\n                    page,\n                    route.path,\n                    pageFile,\n                    isSsg,\n                    'html',\n                    true\n                  )\n                  await moveExportedPage(\n                    page,\n                    route.path,\n                    pageFile,\n                    isSsg,\n                    'json',\n                    true\n                  )\n\n                  if (hasAmp) {\n                    const ampPage = `${pageFile}.amp`\n                    await moveExportedPage(\n                      page,\n                      ampPage,\n                      ampPage,\n                      isSsg,\n                      'html',\n                      true\n                    )\n                    await moveExportedPage(\n                      page,\n                      ampPage,\n                      ampPage,\n                      isSsg,\n                      'json',\n                      true\n                    )\n                  }\n\n                  const initialRevalidateSeconds =\n                    exportResult.byPath.get(route.path)?.revalidate ?? false\n\n                  if (typeof initialRevalidateSeconds === 'undefined') {\n                    throw new Error(\"Invariant: page wasn't built\")\n                  }\n\n                  prerenderManifest.routes[route.path] = {\n                    initialRevalidateSeconds,\n                    experimentalPPR: undefined,\n                    renderingMode: undefined,\n                    srcRoute: page,\n                    dataRoute: path.posix.join(\n                      '/_next/data',\n                      buildId,\n                      `${normalizePagePath(route.path)}.json`\n                    ),\n                    // Pages does not have a prefetch data route.\n                    prefetchDataRoute: undefined,\n                    allowHeader: ALLOWED_HEADERS,\n                  }\n\n                  // Set route Revalidation Interval\n                  if (pageInfo) {\n                    pageInfo.initialRevalidateSeconds = initialRevalidateSeconds\n                  }\n                }\n              }\n            }\n          }\n\n          // remove temporary export folder\n          await fs.rm(outdir, { recursive: true, force: true })\n          await writeManifest(pagesManifestPath, pagesManifest)\n        })\n      }\n\n      const postBuildSpinner = createSpinner('Finalizing page optimization')\n      let buildTracesSpinner = createSpinner(`Collecting build traces`)\n\n      // ensure the worker is not left hanging\n      worker.end()\n\n      const analysisEnd = process.hrtime(analysisBegin)\n      telemetry.record(\n        eventBuildOptimize(pagesPaths, {\n          durationInSeconds: analysisEnd[0],\n          staticPageCount: staticPages.size,\n          staticPropsPageCount: ssgPages.size,\n          serverPropsPageCount: serverPropsPages.size,\n          ssrPageCount:\n            pagesPaths.length -\n            (staticPages.size + ssgPages.size + serverPropsPages.size),\n          hasStatic404: useStaticPages404,\n          hasReportWebVitals:\n            namedExports?.includes('reportWebVitals') ?? false,\n          rewritesCount: combinedRewrites.length,\n          headersCount: headers.length,\n          redirectsCount: redirects.length - 1, // reduce one for trailing slash\n          headersWithHasCount: headers.filter((r: any) => !!r.has).length,\n          rewritesWithHasCount: combinedRewrites.filter((r: any) => !!r.has)\n            .length,\n          redirectsWithHasCount: redirects.filter((r: any) => !!r.has).length,\n          middlewareCount: hasMiddlewareFile ? 1 : 0,\n          totalAppPagesCount,\n          staticAppPagesCount,\n          serverAppPagesCount,\n          edgeRuntimeAppCount,\n          edgeRuntimePagesCount,\n        })\n      )\n\n      if (NextBuildContext.telemetryState) {\n        const events = eventBuildFeatureUsage(\n          NextBuildContext.telemetryState.usages\n        )\n        telemetry.record(events)\n        telemetry.record(\n          eventPackageUsedInGetServerSideProps(\n            NextBuildContext.telemetryState.packagesUsedInServerSideProps\n          )\n        )\n      }\n\n      if (ssgPages.size > 0 || appDir) {\n        tbdPrerenderRoutes.forEach((tbdRoute) => {\n          const normalizedRoute = normalizePagePath(tbdRoute)\n          const dataRoute = path.posix.join(\n            '/_next/data',\n            buildId,\n            `${normalizedRoute}.json`\n          )\n\n          prerenderManifest.dynamicRoutes[tbdRoute] = {\n            routeRegex: normalizeRouteRegex(\n              getNamedRouteRegex(tbdRoute, false).re.source\n            ),\n            experimentalPPR: undefined,\n            renderingMode: undefined,\n            dataRoute,\n            fallback: ssgBlockingFallbackPages.has(tbdRoute)\n              ? null\n              : ssgStaticFallbackPages.has(tbdRoute)\n                ? `${normalizedRoute}.html`\n                : false,\n            fallbackRevalidate: undefined,\n            dataRouteRegex: normalizeRouteRegex(\n              getNamedRouteRegex(\n                dataRoute.replace(/\\.json$/, ''),\n                false\n              ).re.source.replace(/\\(\\?:\\\\\\/\\)\\?\\$$/, '\\\\.json$')\n            ),\n            // Pages does not have a prefetch data route.\n            prefetchDataRoute: undefined,\n            prefetchDataRouteRegex: undefined,\n            allowHeader: ALLOWED_HEADERS,\n          }\n        })\n\n        NextBuildContext.previewModeId = previewProps.previewModeId\n        NextBuildContext.fetchCacheKeyPrefix =\n          config.experimental.fetchCacheKeyPrefix\n        NextBuildContext.allowedRevalidateHeaderKeys =\n          config.experimental.allowedRevalidateHeaderKeys\n\n        await writePrerenderManifest(distDir, prerenderManifest)\n        await writeClientSsgManifest(prerenderManifest, {\n          distDir,\n          buildId,\n          locales: config.i18n?.locales || [],\n        })\n      } else {\n        await writePrerenderManifest(distDir, {\n          version: 4,\n          routes: {},\n          dynamicRoutes: {},\n          preview: previewProps,\n          notFoundRoutes: [],\n        })\n      }\n\n      await writeImagesManifest(distDir, config)\n      await writeManifest(path.join(distDir, EXPORT_MARKER), {\n        version: 1,\n        hasExportPathMap: typeof config.exportPathMap === 'function',\n        exportTrailingSlash: config.trailingSlash === true,\n        isNextImageImported: isNextImageImported === true,\n      })\n      await fs.unlink(path.join(distDir, EXPORT_DETAIL)).catch((err) => {\n        if (err.code === 'ENOENT') {\n          return Promise.resolve()\n        }\n        return Promise.reject(err)\n      })\n\n      if (Boolean(config.experimental.nextScriptWorkers)) {\n        await nextBuildSpan\n          .traceChild('verify-partytown-setup')\n          .traceAsyncFn(async () => {\n            await verifyPartytownSetup(\n              dir,\n              path.join(distDir, CLIENT_STATIC_FILES_PATH)\n            )\n          })\n      }\n\n      await buildTracesPromise\n\n      if (buildTracesSpinner) {\n        buildTracesSpinner.stopAndPersist()\n        buildTracesSpinner = undefined\n      }\n\n      if (config.output === 'export') {\n        await writeFullyStaticExport(\n          config,\n          dir,\n          enabledDirectories,\n          configOutDir,\n          nextBuildSpan\n        )\n      }\n\n      if (config.output === 'standalone') {\n        await writeStandaloneDirectory(\n          nextBuildSpan,\n          distDir,\n          pageKeys,\n          denormalizedAppPages,\n          outputFileTracingRoot,\n          requiredServerFilesManifest,\n          middlewareManifest,\n          hasInstrumentationHook,\n          staticPages,\n          loadedEnvFiles,\n          appDir\n        )\n      }\n\n      if (postBuildSpinner) postBuildSpinner.stopAndPersist()\n      console.log()\n\n      if (debugOutput) {\n        nextBuildSpan\n          .traceChild('print-custom-routes')\n          .traceFn(() => printCustomRoutes({ redirects, rewrites, headers }))\n      }\n\n      await nextBuildSpan.traceChild('print-tree-view').traceAsyncFn(() =>\n        printTreeView(pageKeys, pageInfos, {\n          distPath: distDir,\n          buildId: buildId,\n          pagesDir,\n          useStaticPages404,\n          pageExtensions: config.pageExtensions,\n          appBuildManifest,\n          buildManifest,\n          middlewareManifest,\n          gzipSize: config.experimental.gzipSize,\n        })\n      )\n\n      await nextBuildSpan\n        .traceChild('telemetry-flush')\n        .traceAsyncFn(() => telemetry.flush())\n\n      await shutdownPromise\n    })\n  } finally {\n    // Ensure we wait for lockfile patching if present\n    await lockfilePatchPromise.cur\n\n    // Ensure all traces are flushed before finishing the command\n    await flushAllTraces()\n    teardownTraceSubscriber()\n    teardownHeapProfiler()\n\n    if (traceUploadUrl && loadedConfig) {\n      uploadTrace({\n        traceUploadUrl,\n        mode: 'build',\n        projectDir: dir,\n        distDir: loadedConfig.distDir,\n        isTurboSession: turboNextBuild,\n        sync: true,\n      })\n    }\n  }\n}\n"],"names":["loadEnvConfig","bold","yellow","crypto","makeRe","existsSync","promises","fs","os","Worker","defaultConfig","devalue","findUp","nanoid","Sema","path","STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR","PUBLIC_DIR_MIDDLEWARE_CONFLICT","MIDDLEWARE_FILENAME","PAGES_DIR_ALIAS","INSTRUMENTATION_HOOK_FILENAME","RSC_PREFETCH_SUFFIX","RSC_SUFFIX","NEXT_RESUME_HEADER","PRERENDER_REVALIDATE_HEADER","PRERENDER_REVALIDATE_ONLY_GENERATED_HEADER","NEXT_CACHE_REVALIDATE_TAG_TOKEN_HEADER","NEXT_CACHE_REVALIDATED_TAGS_HEADER","MATCHED_PATH_HEADER","FileType","fileExists","findPagesDir","loadCustomRoutes","normalizeRouteRegex","nonNullable","recursiveDelete","verifyPartytownSetup","validateTurboNextConfig","BUILD_ID_FILE","BUILD_MANIFEST","CLIENT_STATIC_FILES_PATH","EXPORT_DETAIL","EXPORT_MARKER","IMAGES_MANIFEST","PAGES_MANIFEST","PHASE_PRODUCTION_BUILD","PRERENDER_MANIFEST","REACT_LOADABLE_MANIFEST","ROUTES_MANIFEST","SERVER_DIRECTORY","SERVER_FILES_MANIFEST","STATIC_STATUS_PAGES","MIDDLEWARE_MANIFEST","APP_PATHS_MANIFEST","APP_PATH_ROUTES_MANIFEST","APP_BUILD_MANIFEST","RSC_MODULE_TYPES","NEXT_FONT_MANIFEST","SUBRESOURCE_INTEGRITY_MANIFEST","MIDDLEWARE_BUILD_MANIFEST","MIDDLEWARE_REACT_LOADABLE_MANIFEST","SERVER_REFERENCE_MANIFEST","FUNCTIONS_CONFIG_MANIFEST","UNDERSCORE_NOT_FOUND_ROUTE_ENTRY","UNDERSCORE_NOT_FOUND_ROUTE","DYNAMIC_CSS_MANIFEST","getSortedRoutes","isDynamicRoute","getSortedRouteObjects","loadConfig","normalizePagePath","getPagePath","ciEnvironment","turborepoTraceAccess","TurborepoAccessTraceResult","writeTurborepoAccessTraceResult","eventBuildOptimize","eventCliSession","eventBuildFeatureUsage","eventNextPlugins","EVENT_BUILD_FEATURE_USAGE","eventPackageUsedInGetServerSideProps","eventBuildCompleted","Telemetry","hadUnsupportedValue","createPagesMapping","getStaticInfoIncludingLayouts","sortByPageExts","PAGE_TYPES","generateBuildId","isWriteable","Log","createSpinner","trace","flushAllTraces","setGlobal","detectConflictingPaths","computeFromManifest","getJsPageSizeInKb","printCustomRoutes","printTreeView","copyTracedFiles","isReservedPage","isAppBuiltinNotFoundPage","collectRoutesUsingEdgeRuntime","collectMeta","writeBuildId","normalizeLocalePath","isError","isEdgeRuntime","recursiveCopy","recursiveReadDir","loadBindings","lockfilePatchPromise","teardownTraceSubscriber","teardownHeapProfiler","createDefineEnv","getNamedRouteRegex","getFilesInDir","eventSwcPlugins","normalizeAppPath","ACTION_HEADER","NEXT_ROUTER_PREFETCH_HEADER","RSC_HEADER","RSC_CONTENT_TYPE_HEADER","NEXT_ROUTER_STATE_TREE_HEADER","NEXT_DID_POSTPONE_HEADER","NEXT_ROUTER_SEGMENT_PREFETCH_HEADER","webpackBuild","NextBuildContext","normalizePathSep","isAppRouteRoute","createClientRouterFilter","createValidFileMatcher","startTypeChecking","generateInterceptionRoutesRewrites","buildDataRoute","collectBuildTraces","formatManifest","recordFrameworkVersion","updateBuildDiagnostics","recordFetchMetrics","getStartServerInfo","logStartInfo","hasCustomExportOutput","getTurbopackJsConfig","handleEntrypoints","handleRouteType","handlePagesErrorRoute","formatIssue","isRelevantWarning","isPersistentCachingEnabled","TurbopackManifestLoader","buildCustomRoute","createProgress","traceMemoryUsage","generateEncryptionKeyBase64","uploadTrace","checkIsAppPPREnabled","checkIsRoutePPREnabled","FallbackMode","fallbackModeToFallbackField","RenderingMode","getParamKeys","formatNodeOptions","getParsedNodeOptionsWithoutInspect","ALLOWED_HEADERS","pageToRoute","page","routeRegex","regex","re","source","routeKeys","namedRegex","getCacheDir","distDir","cacheDir","join","isCI","hasNextSupport","hasCache","console","log","prefixes","warn","writeFileUtf8","filePath","content","writeFile","readFileUtf8","readFile","writeManifest","manifest","readManifest","JSON","parse","writePrerenderManifest","writeClientSsgManifest","prerenderManifest","buildId","locales","ssgPages","Set","Object","entries","routes","filter","srcRoute","map","route","pathname","keys","dynamicRoutes","sort","clientSsgManifestContent","writeFunctionsConfigManifest","writeRequiredServerFilesManifest","requiredServerFiles","writeImagesManifest","config","images","deviceSizes","imageSizes","sizes","remotePatterns","p","protocol","hostname","port","dot","search","localPatterns","version","STANDALONE_DIRECTORY","writeStandaloneDirectory","nextBuildSpan","pageKeys","denormalizedAppPages","outputFileTracingRoot","middlewareManifest","hasInstrumentationHook","staticPages","loadedEnvFiles","appDir","traceChild","traceAsyncFn","pages","file","files","reduce","acc","envFile","includes","push","outputPath","relative","mkdir","dirname","recursive","copyFile","overwrite","originalServerApp","getNumberOfWorkers","experimental","cpus","memoryBasedWorkersCount","Math","max","min","floor","freemem","staticWorkerPath","require","resolve","staticWorkerExposedMethods","createStaticWorker","progress","nodeOptions","logger","numWorkers","onActivity","run","onActivityAbort","clear","forkOptions","env","process","NODE_OPTIONS","enableWorkerThreads","workerThreads","exposedMethods","writeFullyStaticExport","dir","enabledDirectories","configOutDir","exportApp","default","pagesWorker","appWorker","buildExport","nextConfig","silent","outdir","end","getBuildId","isGenerateMode","IS_TURBOPACK_BUILD","TURBOPACK","TURBOPACK_BUILD","build","reactProductionProfiling","debugOutput","runLint","noMangling","appDirOnly","turboNextBuild","experimentalBuildMode","traceUploadUrl","isCompileMode","loadedConfig","undefined","buildMode","isTurboBuild","String","__NEXT_VERSION","mappedPages","traceFn","turborepoAccessTraceResult","NEXT_DEPLOYMENT_ID","deploymentId","customRoutes","headers","rewrites","redirects","combinedRewrites","beforeFiles","afterFiles","fallback","hasRewrites","length","originalRewrites","_originalRewrites","originalRedirects","_originalRedirects","telemetry","publicDir","pagesDir","app","encryptionKey","isBuild","isSrcDir","startsWith","hasPublicDir","record","webpackVersion","cliCommand","hasNowJson","cwd","isCustomServer","turboFlag","then","events","envInfo","expFeatureInfo","networkUrl","appUrl","ignoreESLint","Boolean","eslint","ignoreDuringBuilds","shouldLint","typeCheckingOptions","distDirCreated","err","code","Error","cleanDistDir","error","flush","exit","buildLintEvent","featureName","invocationCount","eventName","payload","validFileMatcher","pageExtensions","providedPagePaths","NEXT_PRIVATE_PAGE_PATHS","pagesPaths","pathnameFilter","isPageFile","middlewareDetectionRegExp","RegExp","instrumentationHookDetectionRegExp","rootDir","rootPaths","Array","from","some","include","test","replace","hasMiddlewareFile","previewProps","previewModeId","randomBytes","toString","previewModeSigningKey","previewModeEncryptionKey","isDev","pagesType","PAGES","pagePaths","mappedAppPages","providedAppPaths","NEXT_PRIVATE_APP_PATHS","appPaths","absolutePath","isAppRouterPage","isRootNotFound","ignorePartFilter","part","APP","mappedRootPaths","ROOT","pagesPageKeys","conflictingAppPagePaths","appPageKeys","appKey","normalizedAppPageKey","pagePath","appPath","add","basePath","totalAppPagesCount","numConflictingAppPaths","conflictingPublicFiles","hasPages404","hasApp404","hasCustomErrorPage","hasPublicUnderScoreNextDir","hasPublicPageFile","File","numConflicting","nestedReservedPages","match","restrictedRedirectPaths","isAppDynamicIOEnabled","dynamicIO","isAuthInterruptsEnabled","authInterrupts","isAppPPREnabled","ppr","routesManifestPath","routesManifest","sortedRoutes","staticRoutes","pages404","caseSensitive","caseSensitiveRoutes","r","dataRoutes","i18n","rsc","header","varyHeader","prefetchHeader","didPostponeHeader","contentTypeHeader","suffix","prefetchSuffix","skipMiddlewareUrlNormalize","chain","clientRouterFilters","clientRouterFilter","nonInternalRedirects","internal","clientRouterFilterRedirects","clientRouterFilterAllowedRate","buildStage","pagesManifestPath","turbopackBuild","startTime","hrtime","bindings","useWasmBinary","dev","supportedBrowsers","project","turbo","createProject","projectPath","rootPath","root","jsConfig","watch","enable","defineEnv","isTurbopack","fetchCacheKeyPrefix","middlewareMatchers","browserslistQuery","persistentCaching","memoryLimit","stringify","type","entrypointsSubscription","entrypointsSubscribe","currentEntrypoints","global","document","middleware","instrumentation","Map","currentEntryIssues","manifestLoader","entrypointsResult","next","done","return","catch","entrypoints","value","topLevelErrors","issue","issues","message","e","devRewrites","productionRewrites","logErrors","size","INITIAL_CONCURRENCY","CONCURRENCY","sema","remainingRampup","enqueue","fn","acquire","release","Promise","all","writeManifests","errors","warnings","entryIssues","values","severity","shutdownPromise","shutdown","time","duration","buildTraceContext","buildTracesPromise","useBuildWorker","webpackBuildWorker","webpack","runServerAndEdgeInParallel","parallelServerCompiles","collectServerBuildTracesInParallel","parallelServerBuildTraces","setAttribute","info","buildOptions","compilerDuration","rest","durationString","round","event","durationInSeconds","serverBuildPromise","res","buildTraceWorker","edgeRuntimeRoutes","hasSsrAmpPages","edgeBuildPromise","postCompileSpinner","buildManifestPath","appBuildManifestPath","staticAppPagesCount","serverAppPagesCount","edgeRuntimeAppCount","edgeRuntimePagesCount","ssgStaticFallbackPages","ssgBlockingFallbackPages","invalidPages","hybridAmpPages","serverPropsPages","additionalPaths","staticPaths","prospectiveRenders","appNormalizedPaths","fallbackModes","appDefaultConfigs","pageInfos","pagesManifest","buildManifest","appBuildManifest","appPathRoutes","appPathsManifest","key","NEXT_PHASE","worker","analysisBegin","staticCheckSpan","functionsConfigManifest","functions","customAppGetInitialProps","namedExports","isNextImageImported","hasNonStaticErrorPage","configFileName","publicRuntimeConfig","serverRuntimeConfig","runtimeEnvConfig","nonStaticErrorPageSpan","errorPageHasCustomGetInitialProps","hasCustomGetInitialProps","checkingApp","errorPageStaticResult","isPageStatic","httpAgentOptions","defaultLocale","nextConfigOutput","output","pprConfig","cacheLifeProfiles","cacheLife","appPageToCheck","customAppGetInitialPropsPromise","namedExportsPromise","getDefinedNamedExports","computedManifestData","gzipSize","actionManifest","entriesWithAction","id","node","entry","workers","edge","pageType","checkPageSpan","actualPage","totalSize","isRoutePPREnabled","isSSG","isStatic","isServerComponent","isHybridAmp","ssgPageRoutes","find","originalAppPath","originalPath","normalizedPath","pageFilePath","isInsideAppDir","staticInfo","runtime","maxDuration","pageRuntime","client","edgeInfo","manifestKey","isPageStaticSpan","workerResult","parentId","getId","cacheHandler","cacheHandlers","isrFlushToDisk","maxMemoryCacheSize","cacheMaxMemorySize","set","warnOnce","isDynamic","prerenderedRoutes","appConfig","revalidate","hasGenerateStaticParams","encoded","fallbackRouteParams","dynamic","prerenderFallbackMode","hasStaticProps","isAmpOnly","BLOCKING_STATIC_RENDER","PRERENDER","hasServerProps","delete","initialRevalidateSeconds","pageDuration","ssgPageDurations","hasEmptyPrelude","errorPageResult","nonStaticErrorPage","returnValue","stopAndPersist","instrumentationHookEntryFiles","requiredServerFilesManifest","normalizedCacheHandlers","serverFilesManifest","configFile","compress","trustHostHeader","isExperimentalCompile","relativeAppDir","sri","ignore","useStaticPages404","pg","optimizeCss","globOrig","cssFilePaths","reject","features","nextScriptWorkers","feature","notFoundRoutes","preview","tbdPrerenderRoutes","usedStaticStatusPages","forEach","has","hasPages500","useDefaultStatic500","combinedPages","isApp404Static","hasStaticApp404","staticGenerationSpan","exportConfig","exportPathMap","defaultMap","query","__nextFallback","__nextSsgPath","get","isDynamicError","_fallbackRouteParams","_isDynamicError","_isAppDir","_isRoutePPREnabled","_isProspectiveRender","isSsg","isFallback","locale","__nextLocale","exportResult","statusMessage","NEXT_SSG_FETCH_METRICS","traces","turborepoAccessTraceResults","ssgNotFoundPaths","serverBundle","unlink","hasRevalidateZero","byPath","isAppRouteHandler","bypassFor","unknownPrerenderRoutes","knownPrerenderRoutes","prerenderedRoute","metadata","hasPostponed","normalizedRoute","dataRoute","posix","prefetchDataRoute","meta","initialStatus","status","initialHeaders","renderingMode","PARTIALLY_STATIC","STATIC","experimentalPPR","experimentalBypassFor","allowHeader","isDynamicAppRoute","fallbackMode","NOT_FOUND","fallbackRevalidate","fallbackStatus","fallbackHeaders","dataRouteRegex","prefetchDataRouteRegex","moveExportedPage","originPage","ext","additionalSsgFile","orig","relativeDest","slice","split","dest","isNotFound","rename","localeExt","extname","relativeDestNoPages","curPath","updatedRelativeDest","updatedOrig","updatedDest","moveExportedAppNotFoundTo404","isStaticSsgFallback","hasAmp","pageInfo","durationInfo","byPage","durationsByPath","hasHtmlOutput","ampPage","localePage","pageFile","rm","force","postBuildSpinner","buildTracesSpinner","analysisEnd","staticPageCount","staticPropsPageCount","serverPropsPageCount","ssrPageCount","hasStatic404","hasReportWebVitals","rewritesCount","headersCount","redirectsCount","headersWithHasCount","rewritesWithHasCount","redirectsWithHasCount","middlewareCount","telemetryState","usages","packagesUsedInServerSideProps","tbdRoute","allowedRevalidateHeaderKeys","hasExportPathMap","exportTrailingSlash","trailingSlash","distPath","cur","mode","projectDir","isTurboSession","sync"],"mappings":"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"}