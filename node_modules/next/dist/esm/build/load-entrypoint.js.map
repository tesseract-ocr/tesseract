{"version":3,"sources":["../../src/build/load-entrypoint.ts"],"sourcesContent":["import fs from 'fs/promises'\nimport path from 'path'\n\n// NOTE: this should be updated if this loader file is moved.\nconst PACKAGE_ROOT = path.normalize(path.join(__dirname, '../../..'))\nconst TEMPLATE_FOLDER = path.join(__dirname, 'templates')\nconst TEMPLATES_ESM_FOLDER = path.normalize(\n  path.join(__dirname, '../../dist/esm/build/templates')\n)\n\n/**\n * Load the entrypoint file from the ESM directory and performs string\n * replacements of the template variables specified in the `replacements`\n * argument.\n *\n * For non-string replacements, the template should use the\n * `declare const ${key}: ${type}` syntax. to ensure that the type is correct\n * and the typescript can compile. You may have to use `@ts-expect-error` to\n * handle replacement values that are related to imports.\n *\n * @param entrypoint the entrypoint to load\n * @param replacements string replacements to perform\n * @param injections code injections to perform\n * @param imports optional imports to insert or set to null\n * @returns the loaded file with the replacements\n */\nexport async function loadEntrypoint(\n  entrypoint:\n    | 'app-page'\n    | 'app-route'\n    | 'edge-app-route'\n    | 'edge-ssr'\n    | 'edge-ssr-app'\n    | 'middleware'\n    | 'pages'\n    | 'pages-api',\n  replacements: Record<`VAR_${string}`, string>,\n  injections?: Record<string, string>,\n  imports?: Record<string, string | null>,\n  importMaps?: Record<string, Record<string, string>>\n): Promise<string> {\n  const filepath = path.resolve(\n    path.join(TEMPLATES_ESM_FOLDER, `${entrypoint}.js`)\n  )\n\n  let file = await fs.readFile(filepath, 'utf8')\n\n  const importMapItems: Record<string, Record<string, string>> = {}\n\n  for (const key of Object.keys(importMaps || {})) {\n    importMapItems[key] = {}\n\n    for (const [innerKey, importPath] of Object.entries(\n      importMaps?.[key] || {}\n    )) {\n      file = `import ${key}_${innerKey} from \"${importPath}\"\\n${file}`\n      importMapItems[key][innerKey] = `${key}_${innerKey}`\n    }\n  }\n\n  file = file.replace(\n    new RegExp(`cacheHandlers = {}`),\n    `cacheHandlers = {\\n${Object.entries(importMapItems['cacheHandlers'] || {})\n      .map(([key, value]) => {\n        return `${key}: ${value}`\n      })\n      .join(',')}\\n}`\n  )\n\n  // Update the relative imports to be absolute. This will update any relative\n  // imports to be relative to the root of the `next` package.\n  let count = 0\n  file = file.replaceAll(\n    /from '(\\..*)'|import '(\\..*)'/g,\n    function (_, fromRequest, importRequest) {\n      count++\n\n      const relative = path\n        .relative(\n          PACKAGE_ROOT,\n          path.resolve(TEMPLATE_FOLDER, fromRequest ?? importRequest)\n        )\n        // Ensure that we use linux style path separators for node.\n        .replace(/\\\\/g, '/')\n\n      // Verify that the relative import is relative to the `next` package. This\n      // will catch cases where the constants at the top of the file were not\n      // updated after the file was moved.\n      if (!relative.startsWith('next/')) {\n        throw new Error(\n          `Invariant: Expected relative import to start with \"next/\", found \"${relative}\"`\n        )\n      }\n\n      return fromRequest\n        ? `from ${JSON.stringify(relative)}`\n        : `import ${JSON.stringify(relative)}`\n    }\n  )\n\n  // Verify that at least one import was replaced. It's the case today where\n  // every template file has at least one import to update, so this ensures that\n  // we don't accidentally remove the import replacement code or use the wrong\n  // template file.\n  if (count === 0) {\n    throw new Error('Invariant: Expected to replace at least one import')\n  }\n\n  const replaced = new Set<string>()\n\n  // Replace all the template variables with the actual values. If a template\n  // variable is missing, throw an error.\n  file = file.replaceAll(\n    new RegExp(\n      `${Object.keys(replacements)\n        .map((k) => `'${k}'`)\n        .join('|')}`,\n      'g'\n    ),\n    (match) => {\n      const key = JSON.parse(match.replace(/'/g, `\"`))\n\n      if (!(key in replacements)) {\n        throw new Error(`Invariant: Unexpected template variable ${key}`)\n      }\n\n      replaced.add(key)\n\n      return JSON.stringify(replacements[key])\n    }\n  )\n\n  // Check to see if there's any remaining template variables.\n  let matches = file.match(/VAR_[A-Z_]+/g)\n  if (matches) {\n    throw new Error(\n      `Invariant: Expected to replace all template variables, found ${matches.join(\n        ', '\n      )}`\n    )\n  }\n\n  // Check to see if any template variable was provided but not used.\n  if (replaced.size !== Object.keys(replacements).length) {\n    // Find the difference between the provided replacements and the replaced\n    // template variables. This will let us notify the user of any template\n    // variables that were not used but were provided.\n    const difference = Object.keys(replacements).filter(\n      (key) => !replaced.has(key)\n    )\n\n    throw new Error(\n      `Invariant: Expected to replace all template variables, missing ${difference.join(\n        ', '\n      )} in template`\n    )\n  }\n\n  // Replace the injections.\n  const injected = new Set<string>()\n  if (injections) {\n    // Track all the injections to ensure that we're not missing any.\n    file = file.replaceAll(\n      new RegExp(`// INJECT:(${Object.keys(injections).join('|')})`, 'g'),\n      (_, key) => {\n        if (!(key in injections)) {\n          throw new Error(`Invariant: Unexpected injection ${key}`)\n        }\n\n        injected.add(key)\n\n        return `const ${key} = ${injections[key]}`\n      }\n    )\n  }\n\n  // Check to see if there's any remaining injections.\n  matches = file.match(/\\/\\/ INJECT:[A-Za-z0-9_]+/g)\n  if (matches) {\n    throw new Error(\n      `Invariant: Expected to inject all injections, found ${matches.join(\n        ', '\n      )}`\n    )\n  }\n\n  // Check to see if any injection was provided but not used.\n  if (injected.size !== Object.keys(injections ?? {}).length) {\n    // Find the difference between the provided injections and the injected\n    // injections. This will let us notify the user of any injections that were\n    // not used but were provided.\n    const difference = Object.keys(injections ?? {}).filter(\n      (key) => !injected.has(key)\n    )\n\n    throw new Error(\n      `Invariant: Expected to inject all injections, missing ${difference.join(\n        ', '\n      )} in template`\n    )\n  }\n\n  // Replace the optional imports.\n  const importsAdded = new Set<string>()\n  if (imports) {\n    // Track all the imports to ensure that we're not missing any.\n    file = file.replaceAll(\n      new RegExp(\n        `// OPTIONAL_IMPORT:(\\\\* as )?(${Object.keys(imports).join('|')})`,\n        'g'\n      ),\n      (_, asNamespace = '', key) => {\n        if (!(key in imports)) {\n          throw new Error(`Invariant: Unexpected optional import ${key}`)\n        }\n\n        importsAdded.add(key)\n\n        if (imports[key]) {\n          return `import ${asNamespace}${key} from ${JSON.stringify(\n            imports[key]\n          )}`\n        } else {\n          return `const ${key} = null`\n        }\n      }\n    )\n  }\n\n  // Check to see if there's any remaining imports.\n  matches = file.match(/\\/\\/ OPTIONAL_IMPORT:(\\* as )?[A-Za-z0-9_]+/g)\n  if (matches) {\n    throw new Error(\n      `Invariant: Expected to inject all imports, found ${matches.join(', ')}`\n    )\n  }\n\n  // Check to see if any import was provided but not used.\n  if (importsAdded.size !== Object.keys(imports ?? {}).length) {\n    // Find the difference between the provided imports and the injected\n    // imports. This will let us notify the user of any imports that were\n    // not used but were provided.\n    const difference = Object.keys(imports ?? {}).filter(\n      (key) => !importsAdded.has(key)\n    )\n\n    throw new Error(\n      `Invariant: Expected to inject all imports, missing ${difference.join(\n        ', '\n      )} in template`\n    )\n  }\n\n  return file\n}\n"],"names":["fs","path","PACKAGE_ROOT","normalize","join","__dirname","TEMPLATE_FOLDER","TEMPLATES_ESM_FOLDER","loadEntrypoint","entrypoint","replacements","injections","imports","importMaps","filepath","resolve","file","readFile","importMapItems","key","Object","keys","innerKey","importPath","entries","replace","RegExp","map","value","count","replaceAll","_","fromRequest","importRequest","relative","startsWith","Error","JSON","stringify","replaced","Set","k","match","parse","add","matches","size","length","difference","filter","has","injected","importsAdded","asNamespace"],"mappings":"AAAA,OAAOA,QAAQ,cAAa;AAC5B,OAAOC,UAAU,OAAM;AAEvB,6DAA6D;AAC7D,MAAMC,eAAeD,KAAKE,SAAS,CAACF,KAAKG,IAAI,CAACC,WAAW;AACzD,MAAMC,kBAAkBL,KAAKG,IAAI,CAACC,WAAW;AAC7C,MAAME,uBAAuBN,KAAKE,SAAS,CACzCF,KAAKG,IAAI,CAACC,WAAW;AAGvB;;;;;;;;;;;;;;;CAeC,GACD,OAAO,eAAeG,eACpBC,UAQe,EACfC,YAA6C,EAC7CC,UAAmC,EACnCC,OAAuC,EACvCC,UAAmD;IAEnD,MAAMC,WAAWb,KAAKc,OAAO,CAC3Bd,KAAKG,IAAI,CAACG,sBAAsB,GAAGE,WAAW,GAAG,CAAC;IAGpD,IAAIO,OAAO,MAAMhB,GAAGiB,QAAQ,CAACH,UAAU;IAEvC,MAAMI,iBAAyD,CAAC;IAEhE,KAAK,MAAMC,OAAOC,OAAOC,IAAI,CAACR,cAAc,CAAC,GAAI;QAC/CK,cAAc,CAACC,IAAI,GAAG,CAAC;QAEvB,KAAK,MAAM,CAACG,UAAUC,WAAW,IAAIH,OAAOI,OAAO,CACjDX,CAAAA,8BAAAA,UAAY,CAACM,IAAI,KAAI,CAAC,GACrB;YACDH,OAAO,CAAC,OAAO,EAAEG,IAAI,CAAC,EAAEG,SAAS,OAAO,EAAEC,WAAW,GAAG,EAAEP,MAAM;YAChEE,cAAc,CAACC,IAAI,CAACG,SAAS,GAAG,GAAGH,IAAI,CAAC,EAAEG,UAAU;QACtD;IACF;IAEAN,OAAOA,KAAKS,OAAO,CACjB,IAAIC,OAAO,CAAC,kBAAkB,CAAC,GAC/B,CAAC,mBAAmB,EAAEN,OAAOI,OAAO,CAACN,cAAc,CAAC,gBAAgB,IAAI,CAAC,GACtES,GAAG,CAAC,CAAC,CAACR,KAAKS,MAAM;QAChB,OAAO,GAAGT,IAAI,EAAE,EAAES,OAAO;IAC3B,GACCxB,IAAI,CAAC,KAAK,GAAG,CAAC;IAGnB,4EAA4E;IAC5E,4DAA4D;IAC5D,IAAIyB,QAAQ;IACZb,OAAOA,KAAKc,UAAU,CACpB,kCACA,SAAUC,CAAC,EAAEC,WAAW,EAAEC,aAAa;QACrCJ;QAEA,MAAMK,WAAWjC,KACdiC,QAAQ,CACPhC,cACAD,KAAKc,OAAO,CAACT,iBAAiB0B,eAAeC,eAE/C,2DAA2D;SAC1DR,OAAO,CAAC,OAAO;QAElB,0EAA0E;QAC1E,uEAAuE;QACvE,oCAAoC;QACpC,IAAI,CAACS,SAASC,UAAU,CAAC,UAAU;YACjC,MAAM,IAAIC,MACR,CAAC,kEAAkE,EAAEF,SAAS,CAAC,CAAC;QAEpF;QAEA,OAAOF,cACH,CAAC,KAAK,EAAEK,KAAKC,SAAS,CAACJ,WAAW,GAClC,CAAC,OAAO,EAAEG,KAAKC,SAAS,CAACJ,WAAW;IAC1C;IAGF,0EAA0E;IAC1E,8EAA8E;IAC9E,4EAA4E;IAC5E,iBAAiB;IACjB,IAAIL,UAAU,GAAG;QACf,MAAM,IAAIO,MAAM;IAClB;IAEA,MAAMG,WAAW,IAAIC;IAErB,2EAA2E;IAC3E,uCAAuC;IACvCxB,OAAOA,KAAKc,UAAU,CACpB,IAAIJ,OACF,GAAGN,OAAOC,IAAI,CAACX,cACZiB,GAAG,CAAC,CAACc,IAAM,CAAC,CAAC,EAAEA,EAAE,CAAC,CAAC,EACnBrC,IAAI,CAAC,MAAM,EACd,MAEF,CAACsC;QACC,MAAMvB,MAAMkB,KAAKM,KAAK,CAACD,MAAMjB,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;QAE9C,IAAI,CAAEN,CAAAA,OAAOT,YAAW,GAAI;YAC1B,MAAM,IAAI0B,MAAM,CAAC,wCAAwC,EAAEjB,KAAK;QAClE;QAEAoB,SAASK,GAAG,CAACzB;QAEb,OAAOkB,KAAKC,SAAS,CAAC5B,YAAY,CAACS,IAAI;IACzC;IAGF,4DAA4D;IAC5D,IAAI0B,UAAU7B,KAAK0B,KAAK,CAAC;IACzB,IAAIG,SAAS;QACX,MAAM,IAAIT,MACR,CAAC,6DAA6D,EAAES,QAAQzC,IAAI,CAC1E,OACC;IAEP;IAEA,mEAAmE;IACnE,IAAImC,SAASO,IAAI,KAAK1B,OAAOC,IAAI,CAACX,cAAcqC,MAAM,EAAE;QACtD,yEAAyE;QACzE,uEAAuE;QACvE,kDAAkD;QAClD,MAAMC,aAAa5B,OAAOC,IAAI,CAACX,cAAcuC,MAAM,CACjD,CAAC9B,MAAQ,CAACoB,SAASW,GAAG,CAAC/B;QAGzB,MAAM,IAAIiB,MACR,CAAC,+DAA+D,EAAEY,WAAW5C,IAAI,CAC/E,MACA,YAAY,CAAC;IAEnB;IAEA,0BAA0B;IAC1B,MAAM+C,WAAW,IAAIX;IACrB,IAAI7B,YAAY;QACd,iEAAiE;QACjEK,OAAOA,KAAKc,UAAU,CACpB,IAAIJ,OAAO,CAAC,WAAW,EAAEN,OAAOC,IAAI,CAACV,YAAYP,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,MAC/D,CAAC2B,GAAGZ;YACF,IAAI,CAAEA,CAAAA,OAAOR,UAAS,GAAI;gBACxB,MAAM,IAAIyB,MAAM,CAAC,gCAAgC,EAAEjB,KAAK;YAC1D;YAEAgC,SAASP,GAAG,CAACzB;YAEb,OAAO,CAAC,MAAM,EAAEA,IAAI,GAAG,EAAER,UAAU,CAACQ,IAAI,EAAE;QAC5C;IAEJ;IAEA,oDAAoD;IACpD0B,UAAU7B,KAAK0B,KAAK,CAAC;IACrB,IAAIG,SAAS;QACX,MAAM,IAAIT,MACR,CAAC,oDAAoD,EAAES,QAAQzC,IAAI,CACjE,OACC;IAEP;IAEA,2DAA2D;IAC3D,IAAI+C,SAASL,IAAI,KAAK1B,OAAOC,IAAI,CAACV,cAAc,CAAC,GAAGoC,MAAM,EAAE;QAC1D,uEAAuE;QACvE,2EAA2E;QAC3E,8BAA8B;QAC9B,MAAMC,aAAa5B,OAAOC,IAAI,CAACV,cAAc,CAAC,GAAGsC,MAAM,CACrD,CAAC9B,MAAQ,CAACgC,SAASD,GAAG,CAAC/B;QAGzB,MAAM,IAAIiB,MACR,CAAC,sDAAsD,EAAEY,WAAW5C,IAAI,CACtE,MACA,YAAY,CAAC;IAEnB;IAEA,gCAAgC;IAChC,MAAMgD,eAAe,IAAIZ;IACzB,IAAI5B,SAAS;QACX,8DAA8D;QAC9DI,OAAOA,KAAKc,UAAU,CACpB,IAAIJ,OACF,CAAC,8BAA8B,EAAEN,OAAOC,IAAI,CAACT,SAASR,IAAI,CAAC,KAAK,CAAC,CAAC,EAClE,MAEF,CAAC2B,GAAGsB,cAAc,EAAE,EAAElC;YACpB,IAAI,CAAEA,CAAAA,OAAOP,OAAM,GAAI;gBACrB,MAAM,IAAIwB,MAAM,CAAC,sCAAsC,EAAEjB,KAAK;YAChE;YAEAiC,aAAaR,GAAG,CAACzB;YAEjB,IAAIP,OAAO,CAACO,IAAI,EAAE;gBAChB,OAAO,CAAC,OAAO,EAAEkC,cAAclC,IAAI,MAAM,EAAEkB,KAAKC,SAAS,CACvD1B,OAAO,CAACO,IAAI,GACX;YACL,OAAO;gBACL,OAAO,CAAC,MAAM,EAAEA,IAAI,OAAO,CAAC;YAC9B;QACF;IAEJ;IAEA,iDAAiD;IACjD0B,UAAU7B,KAAK0B,KAAK,CAAC;IACrB,IAAIG,SAAS;QACX,MAAM,IAAIT,MACR,CAAC,iDAAiD,EAAES,QAAQzC,IAAI,CAAC,OAAO;IAE5E;IAEA,wDAAwD;IACxD,IAAIgD,aAAaN,IAAI,KAAK1B,OAAOC,IAAI,CAACT,WAAW,CAAC,GAAGmC,MAAM,EAAE;QAC3D,oEAAoE;QACpE,qEAAqE;QACrE,8BAA8B;QAC9B,MAAMC,aAAa5B,OAAOC,IAAI,CAACT,WAAW,CAAC,GAAGqC,MAAM,CAClD,CAAC9B,MAAQ,CAACiC,aAAaF,GAAG,CAAC/B;QAG7B,MAAM,IAAIiB,MACR,CAAC,mDAAmD,EAAEY,WAAW5C,IAAI,CACnE,MACA,YAAY,CAAC;IAEnB;IAEA,OAAOY;AACT"}