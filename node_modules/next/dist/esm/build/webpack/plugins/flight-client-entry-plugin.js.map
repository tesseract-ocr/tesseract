{"version":3,"sources":["../../../../src/build/webpack/plugins/flight-client-entry-plugin.ts"],"sourcesContent":["import type {\n  CssImports,\n  ClientComponentImports,\n} from '../loaders/next-flight-client-entry-loader'\n\nimport { webpack } from 'next/dist/compiled/webpack/webpack'\nimport { stringify } from 'querystring'\nimport path from 'path'\nimport { sources } from 'next/dist/compiled/webpack/webpack'\nimport {\n  getInvalidator,\n  getEntries,\n  EntryTypes,\n  getEntryKey,\n} from '../../../server/dev/on-demand-entry-handler'\nimport { WEBPACK_LAYERS } from '../../../lib/constants'\nimport {\n  APP_CLIENT_INTERNALS,\n  BARREL_OPTIMIZATION_PREFIX,\n  COMPILER_NAMES,\n  DEFAULT_RUNTIME_WEBPACK,\n  EDGE_RUNTIME_WEBPACK,\n  SERVER_REFERENCE_MANIFEST,\n  UNDERSCORE_NOT_FOUND_ROUTE_ENTRY,\n} from '../../../shared/lib/constants'\nimport {\n  getActionsFromBuildInfo,\n  isClientComponentEntryModule,\n  isCSSMod,\n  regexCSS,\n} from '../loaders/utils'\nimport {\n  traverseModules,\n  forEachEntryModule,\n  formatBarrelOptimizedResource,\n  getModuleReferencesInOrder,\n} from '../utils'\nimport { normalizePathSep } from '../../../shared/lib/page-path/normalize-path-sep'\nimport { getProxiedPluginState } from '../../build-context'\nimport { PAGE_TYPES } from '../../../lib/page-types'\nimport { getModuleBuildInfo } from '../loaders/get-module-build-info'\nimport { getAssumedSourceType } from '../loaders/next-flight-loader'\nimport { isAppRouteRoute } from '../../../lib/is-app-route-route'\n\ninterface Options {\n  dev: boolean\n  appDir: string\n  isEdgeServer: boolean\n  encryptionKey: string\n}\n\nconst PLUGIN_NAME = 'FlightClientEntryPlugin'\n\ntype Actions = {\n  [actionId: string]: {\n    workers: {\n      [name: string]: { moduleId: string | number; async: boolean }\n    }\n    // Record which layer the action is in (rsc or sc_action), in the specific entry.\n    layer: {\n      [name: string]: string\n    }\n  }\n}\n\ntype ActionIdNamePair = [id: string, name: string]\n\nexport type ActionManifest = {\n  // Assign a unique encryption key during production build.\n  encryptionKey: string\n  node: Actions\n  edge: Actions\n}\n\nexport interface ModuleInfo {\n  moduleId: string | number\n  async: boolean\n}\n\nconst pluginState = getProxiedPluginState({\n  // A map to track \"action\" -> \"list of bundles\".\n  serverActions: {} as ActionManifest['node'],\n  edgeServerActions: {} as ActionManifest['edge'],\n\n  serverActionModules: {} as {\n    [workerName: string]: { server?: ModuleInfo; client?: ModuleInfo }\n  },\n\n  edgeServerActionModules: {} as {\n    [workerName: string]: { server?: ModuleInfo; client?: ModuleInfo }\n  },\n\n  ssrModules: {} as { [ssrModuleId: string]: ModuleInfo },\n  edgeSsrModules: {} as { [ssrModuleId: string]: ModuleInfo },\n\n  rscModules: {} as { [rscModuleId: string]: ModuleInfo },\n  edgeRscModules: {} as { [rscModuleId: string]: ModuleInfo },\n\n  injectedClientEntries: {} as Record<string, string>,\n})\n\nfunction deduplicateCSSImportsForEntry(mergedCSSimports: CssImports) {\n  // If multiple entry module connections are having the same CSS import,\n  // we only need to have one module to keep track of that CSS import.\n  // It is based on the fact that if a page or a layout is rendered in the\n  // given entry, all its parent layouts are always rendered too.\n  // This can avoid duplicate CSS imports in the generated CSS manifest,\n  // for example, if a page and its parent layout are both using the same\n  // CSS import, we only need to have the layout to keep track of that CSS\n  // import.\n  // To achieve this, we need to first collect all the CSS imports from\n  // every connection, and deduplicate them in the order of layers from\n  // top to bottom. The implementation can be generally described as:\n  // - Sort by number of `/` in the request path (the more `/`, the deeper)\n  // - When in the same depth, sort by the filename (template < layout < page and others)\n\n  // Sort the connections as described above.\n  const sortedCSSImports = Object.entries(mergedCSSimports).sort((a, b) => {\n    const [aPath] = a\n    const [bPath] = b\n\n    const aDepth = aPath.split('/').length\n    const bDepth = bPath.split('/').length\n\n    if (aDepth !== bDepth) {\n      return aDepth - bDepth\n    }\n\n    const aName = path.parse(aPath).name\n    const bName = path.parse(bPath).name\n\n    const indexA = ['template', 'layout'].indexOf(aName)\n    const indexB = ['template', 'layout'].indexOf(bName)\n\n    if (indexA === -1) return 1\n    if (indexB === -1) return -1\n    return indexA - indexB\n  })\n\n  const dedupedCSSImports: CssImports = {}\n  const trackedCSSImports = new Set<string>()\n  for (const [entryName, cssImports] of sortedCSSImports) {\n    for (const cssImport of cssImports) {\n      if (trackedCSSImports.has(cssImport)) continue\n\n      // Only track CSS imports that are in files that can inherit CSS.\n      const filename = path.parse(entryName).name\n      if (['template', 'layout'].includes(filename)) {\n        trackedCSSImports.add(cssImport)\n      }\n\n      if (!dedupedCSSImports[entryName]) {\n        dedupedCSSImports[entryName] = []\n      }\n      dedupedCSSImports[entryName].push(cssImport)\n    }\n  }\n\n  return dedupedCSSImports\n}\n\nexport class FlightClientEntryPlugin {\n  dev: boolean\n  appDir: string\n  encryptionKey: string\n  isEdgeServer: boolean\n  assetPrefix: string\n  webpackRuntime: string\n\n  constructor(options: Options) {\n    this.dev = options.dev\n    this.appDir = options.appDir\n    this.isEdgeServer = options.isEdgeServer\n    this.assetPrefix = !this.dev && !this.isEdgeServer ? '../' : ''\n    this.encryptionKey = options.encryptionKey\n    this.webpackRuntime = this.isEdgeServer\n      ? EDGE_RUNTIME_WEBPACK\n      : DEFAULT_RUNTIME_WEBPACK\n  }\n\n  apply(compiler: webpack.Compiler) {\n    compiler.hooks.compilation.tap(\n      PLUGIN_NAME,\n      (compilation, { normalModuleFactory }) => {\n        compilation.dependencyFactories.set(\n          webpack.dependencies.ModuleDependency,\n          normalModuleFactory\n        )\n        compilation.dependencyTemplates.set(\n          webpack.dependencies.ModuleDependency,\n          new webpack.dependencies.NullDependency.Template()\n        )\n      }\n    )\n\n    compiler.hooks.finishMake.tapPromise(PLUGIN_NAME, (compilation) =>\n      this.createClientEntries(compiler, compilation)\n    )\n\n    compiler.hooks.afterCompile.tap(PLUGIN_NAME, (compilation) => {\n      const recordModule = (modId: string, mod: any) => {\n        // Match Resource is undefined unless an import is using the inline match resource syntax\n        // https://webpack.js.org/api/loaders/#inline-matchresource\n        const modPath = mod.matchResource || mod.resourceResolveData?.path\n        const modQuery = mod.resourceResolveData?.query || ''\n        // query is already part of mod.resource\n        // so it's only necessary to add it for matchResource or mod.resourceResolveData\n        const modResource = modPath\n          ? modPath.startsWith(BARREL_OPTIMIZATION_PREFIX)\n            ? formatBarrelOptimizedResource(mod.resource, modPath)\n            : modPath + modQuery\n          : mod.resource\n\n        if (typeof modId !== 'undefined' && modResource) {\n          if (mod.layer === WEBPACK_LAYERS.reactServerComponents) {\n            const key = path\n              .relative(compiler.context, modResource)\n              .replace(/\\/next\\/dist\\/esm\\//, '/next/dist/')\n\n            const moduleInfo: ModuleInfo = {\n              moduleId: modId,\n              async: compilation.moduleGraph.isAsync(mod),\n            }\n\n            if (this.isEdgeServer) {\n              pluginState.edgeRscModules[key] = moduleInfo\n            } else {\n              pluginState.rscModules[key] = moduleInfo\n            }\n          }\n        }\n\n        if (mod.layer !== WEBPACK_LAYERS.serverSideRendering) {\n          return\n        }\n\n        // Check mod resource to exclude the empty resource module like virtual module created by next-flight-client-entry-loader\n        if (typeof modId !== 'undefined' && modResource) {\n          // Note that this isn't that reliable as webpack is still possible to assign\n          // additional queries to make sure there's no conflict even using the `named`\n          // module ID strategy.\n          let ssrNamedModuleId = path.relative(compiler.context, modResource)\n\n          if (!ssrNamedModuleId.startsWith('.')) {\n            // TODO use getModuleId instead\n            ssrNamedModuleId = `./${normalizePathSep(ssrNamedModuleId)}`\n          }\n\n          const moduleInfo: ModuleInfo = {\n            moduleId: modId,\n            async: compilation.moduleGraph.isAsync(mod),\n          }\n\n          if (this.isEdgeServer) {\n            pluginState.edgeSsrModules[\n              ssrNamedModuleId.replace(/\\/next\\/dist\\/esm\\//, '/next/dist/')\n            ] = moduleInfo\n          } else {\n            pluginState.ssrModules[ssrNamedModuleId] = moduleInfo\n          }\n        }\n      }\n\n      traverseModules(compilation, (mod, _chunk, _chunkGroup, modId) => {\n        if (modId) recordModule(modId, mod)\n      })\n    })\n\n    compiler.hooks.make.tap(PLUGIN_NAME, (compilation) => {\n      compilation.hooks.processAssets.tapPromise(\n        {\n          name: PLUGIN_NAME,\n          stage: webpack.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_HASH,\n        },\n        (assets) => this.createActionAssets(compilation, assets)\n      )\n    })\n  }\n\n  async createClientEntries(\n    compiler: webpack.Compiler,\n    compilation: webpack.Compilation\n  ) {\n    const addClientEntryAndSSRModulesList: Array<\n      ReturnType<typeof this.injectClientEntryAndSSRModules>\n    > = []\n    const createdSSRDependenciesForEntry: Record<\n      string,\n      ReturnType<typeof this.injectClientEntryAndSSRModules>[3][]\n    > = {}\n\n    const addActionEntryList: Array<ReturnType<typeof this.injectActionEntry>> =\n      []\n    const actionMapsPerEntry: Record<\n      string,\n      Map<string, ActionIdNamePair[]>\n    > = {}\n    const createdActionIds = new Set<string>()\n\n    // For each SC server compilation entry, we need to create its corresponding\n    // client component entry.\n    forEachEntryModule(compilation, ({ name, entryModule }) => {\n      const internalClientComponentEntryImports: ClientComponentImports = {}\n      const actionEntryImports = new Map<string, ActionIdNamePair[]>()\n      const clientEntriesToInject = []\n      const mergedCSSimports: CssImports = {}\n\n      for (const connection of getModuleReferencesInOrder(\n        entryModule,\n        compilation.moduleGraph\n      )) {\n        // Entry can be any user defined entry files such as layout, page, error, loading, etc.\n        const entryRequest = (\n          connection.dependency as unknown as webpack.NormalModule\n        ).request\n\n        const { clientComponentImports, actionImports, cssImports } =\n          this.collectComponentInfoFromServerEntryDependency({\n            entryRequest,\n            compilation,\n            resolvedModule: connection.resolvedModule,\n          })\n\n        actionImports.forEach(([dep, actions]) =>\n          actionEntryImports.set(dep, actions)\n        )\n\n        const isAbsoluteRequest = path.isAbsolute(entryRequest)\n\n        // Next.js internals are put into a separate entry.\n        if (!isAbsoluteRequest) {\n          Object.keys(clientComponentImports).forEach(\n            (value) => (internalClientComponentEntryImports[value] = new Set())\n          )\n          continue\n        }\n\n        // TODO-APP: Enable these lines. This ensures no entrypoint is created for layout/page when there are no client components.\n        // Currently disabled because it causes test failures in CI.\n        // if (clientImports.length === 0 && actionImports.length === 0) {\n        //   continue\n        // }\n\n        const relativeRequest = isAbsoluteRequest\n          ? path.relative(compilation.options.context!, entryRequest)\n          : entryRequest\n\n        // Replace file suffix as `.js` will be added.\n        const bundlePath = normalizePathSep(\n          relativeRequest.replace(/\\.[^.\\\\/]+$/, '').replace(/^src[\\\\/]/, '')\n        )\n\n        Object.assign(mergedCSSimports, cssImports)\n        clientEntriesToInject.push({\n          compiler,\n          compilation,\n          entryName: name,\n          clientComponentImports,\n          bundlePath,\n          absolutePagePath: entryRequest,\n        })\n\n        // The webpack implementation of writing the client reference manifest relies on all entrypoints writing a page.js even when there is no client components in the page.\n        // It needs the file in order to write the reference manifest for the path in the `.next/server` folder.\n        // TODO-APP: This could be better handled, however Turbopack does not have the same problem as we resolve client components in a single graph.\n        if (\n          name === `app${UNDERSCORE_NOT_FOUND_ROUTE_ENTRY}` &&\n          bundlePath === 'app/not-found'\n        ) {\n          clientEntriesToInject.push({\n            compiler,\n            compilation,\n            entryName: name,\n            clientComponentImports: {},\n            bundlePath: `app${UNDERSCORE_NOT_FOUND_ROUTE_ENTRY}`,\n            absolutePagePath: entryRequest,\n          })\n        }\n      }\n\n      // Make sure CSS imports are deduplicated before injecting the client entry\n      // and SSR modules.\n      const dedupedCSSImports = deduplicateCSSImportsForEntry(mergedCSSimports)\n      for (const clientEntryToInject of clientEntriesToInject) {\n        const injected = this.injectClientEntryAndSSRModules({\n          ...clientEntryToInject,\n          clientImports: {\n            ...clientEntryToInject.clientComponentImports,\n            ...(\n              dedupedCSSImports[clientEntryToInject.absolutePagePath] || []\n            ).reduce<ClientComponentImports>((res, curr) => {\n              res[curr] = new Set()\n              return res\n            }, {}),\n          },\n        })\n\n        // Track all created SSR dependencies for each entry from the server layer.\n        if (!createdSSRDependenciesForEntry[clientEntryToInject.entryName]) {\n          createdSSRDependenciesForEntry[clientEntryToInject.entryName] = []\n        }\n        createdSSRDependenciesForEntry[clientEntryToInject.entryName].push(\n          injected[3]\n        )\n\n        addClientEntryAndSSRModulesList.push(injected)\n      }\n\n      if (!isAppRouteRoute(name)) {\n        // Create internal app\n        addClientEntryAndSSRModulesList.push(\n          this.injectClientEntryAndSSRModules({\n            compiler,\n            compilation,\n            entryName: name,\n            clientImports: { ...internalClientComponentEntryImports },\n            bundlePath: APP_CLIENT_INTERNALS,\n          })\n        )\n      }\n\n      if (actionEntryImports.size > 0) {\n        if (!actionMapsPerEntry[name]) {\n          actionMapsPerEntry[name] = new Map()\n        }\n        actionMapsPerEntry[name] = new Map([\n          ...actionMapsPerEntry[name],\n          ...actionEntryImports,\n        ])\n      }\n    })\n\n    for (const [name, actionEntryImports] of Object.entries(\n      actionMapsPerEntry\n    )) {\n      addActionEntryList.push(\n        this.injectActionEntry({\n          compiler,\n          compilation,\n          actions: actionEntryImports,\n          entryName: name,\n          bundlePath: name,\n          createdActionIds,\n        })\n      )\n    }\n\n    // Invalidate in development to trigger recompilation\n    const invalidator = getInvalidator(compiler.outputPath)\n    // Check if any of the entry injections need an invalidation\n    if (\n      invalidator &&\n      addClientEntryAndSSRModulesList.some(\n        ([shouldInvalidate]) => shouldInvalidate === true\n      )\n    ) {\n      invalidator.invalidate([COMPILER_NAMES.client])\n    }\n\n    // Client compiler is invalidated before awaiting the compilation of the SSR\n    // and RSC client component entries so that the client compiler is running\n    // in parallel to the server compiler.\n    await Promise.all(\n      addClientEntryAndSSRModulesList.flatMap((addClientEntryAndSSRModules) => [\n        addClientEntryAndSSRModules[1],\n        addClientEntryAndSSRModules[2],\n      ])\n    )\n\n    // Wait for action entries to be added.\n    await Promise.all(addActionEntryList)\n\n    const addedClientActionEntryList: Promise<any>[] = []\n    const actionMapsPerClientEntry: Record<\n      string,\n      Map<string, ActionIdNamePair[]>\n    > = {}\n\n    // We need to create extra action entries that are created from the\n    // client layer.\n    // Start from each entry's created SSR dependency from our previous step.\n    for (const [name, ssrEntryDependencies] of Object.entries(\n      createdSSRDependenciesForEntry\n    )) {\n      // Collect from all entries, e.g. layout.js, page.js, loading.js, ...\n      // add aggregate them.\n      const actionEntryImports = this.collectClientActionsFromDependencies({\n        compilation,\n        dependencies: ssrEntryDependencies,\n      })\n\n      if (actionEntryImports.size > 0) {\n        if (!actionMapsPerClientEntry[name]) {\n          actionMapsPerClientEntry[name] = new Map()\n        }\n        actionMapsPerClientEntry[name] = new Map([\n          ...actionMapsPerClientEntry[name],\n          ...actionEntryImports,\n        ])\n      }\n    }\n\n    for (const [entryName, actionEntryImports] of Object.entries(\n      actionMapsPerClientEntry\n    )) {\n      // If an action method is already created in the server layer, we don't\n      // need to create it again in the action layer.\n      // This is to avoid duplicate action instances and make sure the module\n      // state is shared.\n      let remainingClientImportedActions = false\n      const remainingActionEntryImports = new Map<string, ActionIdNamePair[]>()\n      for (const [dep, actions] of actionEntryImports) {\n        const remainingActionNames = []\n        for (const action of actions) {\n          // `action` is a [id, name] pair.\n          if (!createdActionIds.has(entryName + '@' + action[0])) {\n            remainingActionNames.push(action)\n          }\n        }\n        if (remainingActionNames.length > 0) {\n          remainingActionEntryImports.set(dep, remainingActionNames)\n          remainingClientImportedActions = true\n        }\n      }\n\n      if (remainingClientImportedActions) {\n        addedClientActionEntryList.push(\n          this.injectActionEntry({\n            compiler,\n            compilation,\n            actions: remainingActionEntryImports,\n            entryName,\n            bundlePath: entryName,\n            fromClient: true,\n            createdActionIds,\n          })\n        )\n      }\n    }\n\n    await Promise.all(addedClientActionEntryList)\n  }\n\n  collectClientActionsFromDependencies({\n    compilation,\n    dependencies,\n  }: {\n    compilation: webpack.Compilation\n    dependencies: ReturnType<typeof webpack.EntryPlugin.createDependency>[]\n  }) {\n    // action file path -> action names\n    const collectedActions = new Map<string, ActionIdNamePair[]>()\n\n    // Keep track of checked modules to avoid infinite loops with recursive imports.\n    const visitedModule = new Set<string>()\n    const visitedEntry = new Set<string>()\n\n    const collectActions = ({\n      entryRequest,\n      resolvedModule,\n    }: {\n      entryRequest: string\n      resolvedModule: any\n    }) => {\n      const collectActionsInDep = (mod: webpack.NormalModule): void => {\n        if (!mod) return\n\n        const modResource = getModuleResource(mod)\n\n        if (!modResource) return\n\n        if (visitedModule.has(modResource)) return\n        visitedModule.add(modResource)\n\n        const actions = getActionsFromBuildInfo(mod)\n        if (actions) {\n          collectedActions.set(modResource, Object.entries(actions))\n        }\n\n        // Collect used exported actions transversely.\n        getModuleReferencesInOrder(mod, compilation.moduleGraph).forEach(\n          (connection: any) => {\n            collectActionsInDep(\n              connection.resolvedModule as webpack.NormalModule\n            )\n          }\n        )\n      }\n\n      // Don't traverse the module graph anymore once hitting the action layer.\n      if (\n        entryRequest &&\n        !entryRequest.includes('next-flight-action-entry-loader')\n      ) {\n        // Traverse the module graph to find all client components.\n        collectActionsInDep(resolvedModule)\n      }\n    }\n\n    for (const entryDependency of dependencies) {\n      const ssrEntryModule =\n        compilation.moduleGraph.getResolvedModule(entryDependency)!\n      for (const connection of getModuleReferencesInOrder(\n        ssrEntryModule,\n        compilation.moduleGraph\n      )) {\n        const depModule = connection.dependency\n        const request = (depModule as unknown as webpack.NormalModule).request\n\n        // It is possible that the same entry is added multiple times in the\n        // connection graph. We can just skip these to speed up the process.\n        if (visitedEntry.has(request)) continue\n        visitedEntry.add(request)\n\n        collectActions({\n          entryRequest: request,\n          resolvedModule: connection.resolvedModule,\n        })\n      }\n    }\n\n    return collectedActions\n  }\n\n  collectComponentInfoFromServerEntryDependency({\n    entryRequest,\n    compilation,\n    resolvedModule,\n  }: {\n    entryRequest: string\n    compilation: webpack.Compilation\n    resolvedModule: any /* Dependency */\n  }): {\n    cssImports: CssImports\n    clientComponentImports: ClientComponentImports\n    actionImports: [string, ActionIdNamePair[]][]\n  } {\n    // Keep track of checked modules to avoid infinite loops with recursive imports.\n    const visitedOfClientComponentsTraverse = new Set()\n\n    // Info to collect.\n    const clientComponentImports: ClientComponentImports = {}\n    const actionImports: [string, ActionIdNamePair[]][] = []\n    const CSSImports = new Set<string>()\n\n    const filterClientComponents = (\n      mod: webpack.NormalModule,\n      importedIdentifiers: string[]\n    ): void => {\n      if (!mod) return\n\n      const modResource = getModuleResource(mod)\n\n      if (!modResource) return\n      if (visitedOfClientComponentsTraverse.has(modResource)) {\n        if (clientComponentImports[modResource]) {\n          addClientImport(\n            mod,\n            modResource,\n            clientComponentImports,\n            importedIdentifiers,\n            false\n          )\n        }\n        return\n      }\n      visitedOfClientComponentsTraverse.add(modResource)\n\n      const actions = getActionsFromBuildInfo(mod)\n      if (actions) {\n        actionImports.push([modResource, Object.entries(actions)])\n      }\n\n      if (isCSSMod(mod)) {\n        const sideEffectFree =\n          mod.factoryMeta && (mod.factoryMeta as any).sideEffectFree\n\n        if (sideEffectFree) {\n          const unused = !compilation.moduleGraph\n            .getExportsInfo(mod)\n            .isModuleUsed(this.webpackRuntime)\n\n          if (unused) return\n        }\n\n        CSSImports.add(modResource)\n      } else if (isClientComponentEntryModule(mod)) {\n        if (!clientComponentImports[modResource]) {\n          clientComponentImports[modResource] = new Set()\n        }\n        addClientImport(\n          mod,\n          modResource,\n          clientComponentImports,\n          importedIdentifiers,\n          true\n        )\n\n        return\n      }\n\n      getModuleReferencesInOrder(mod, compilation.moduleGraph).forEach(\n        (connection: any) => {\n          let dependencyIds: string[] = []\n\n          // `ids` are the identifiers that are imported from the dependency,\n          // if it's present, it's an array of strings.\n          if (connection.dependency?.ids) {\n            dependencyIds.push(...connection.dependency.ids)\n          } else {\n            dependencyIds = ['*']\n          }\n\n          filterClientComponents(connection.resolvedModule, dependencyIds)\n        }\n      )\n    }\n\n    // Traverse the module graph to find all client components.\n    filterClientComponents(resolvedModule, [])\n\n    return {\n      clientComponentImports,\n      cssImports: CSSImports.size\n        ? {\n            [entryRequest]: Array.from(CSSImports),\n          }\n        : {},\n      actionImports,\n    }\n  }\n\n  injectClientEntryAndSSRModules({\n    compiler,\n    compilation,\n    entryName,\n    clientImports,\n    bundlePath,\n    absolutePagePath,\n  }: {\n    compiler: webpack.Compiler\n    compilation: webpack.Compilation\n    entryName: string\n    clientImports: ClientComponentImports\n    bundlePath: string\n    absolutePagePath?: string\n  }): [\n    shouldInvalidate: boolean,\n    addSSREntryPromise: Promise<void>,\n    addRSCEntryPromise: Promise<void>,\n    ssrDep: ReturnType<typeof webpack.EntryPlugin.createDependency>,\n  ] {\n    let shouldInvalidate = false\n\n    const modules = Object.keys(clientImports)\n      .sort((a, b) => (regexCSS.test(b) ? 1 : a.localeCompare(b)))\n      .map((clientImportPath) => ({\n        request: clientImportPath,\n        ids: [...clientImports[clientImportPath]],\n      }))\n\n    // For the client entry, we always use the CJS build of Next.js. If the\n    // server is using the ESM build (when using the Edge runtime), we need to\n    // replace them.\n    const clientBrowserLoader = `next-flight-client-entry-loader?${stringify({\n      modules: (this.isEdgeServer\n        ? modules.map(({ request, ids }) => ({\n            request: request.replace(\n              /[\\\\/]next[\\\\/]dist[\\\\/]esm[\\\\/]/,\n              '/next/dist/'.replace(/\\//g, path.sep)\n            ),\n            ids,\n          }))\n        : modules\n      ).map((x) => JSON.stringify(x)),\n      server: false,\n    })}!`\n\n    const clientServerLoader = `next-flight-client-entry-loader?${stringify({\n      modules: modules.map((x) => JSON.stringify(x)),\n      server: true,\n    })}!`\n\n    // Add for the client compilation\n    // Inject the entry to the client compiler.\n    if (this.dev) {\n      const entries = getEntries(compiler.outputPath)\n      const pageKey = getEntryKey(\n        COMPILER_NAMES.client,\n        PAGE_TYPES.APP,\n        bundlePath\n      )\n\n      if (!entries[pageKey]) {\n        entries[pageKey] = {\n          type: EntryTypes.CHILD_ENTRY,\n          parentEntries: new Set([entryName]),\n          absoluteEntryFilePath: absolutePagePath,\n          bundlePath,\n          request: clientBrowserLoader,\n          dispose: false,\n          lastActiveTime: Date.now(),\n        }\n        shouldInvalidate = true\n      } else {\n        const entryData = entries[pageKey]\n        // New version of the client loader\n        if (entryData.request !== clientBrowserLoader) {\n          entryData.request = clientBrowserLoader\n          shouldInvalidate = true\n        }\n        if (entryData.type === EntryTypes.CHILD_ENTRY) {\n          entryData.parentEntries.add(entryName)\n        }\n        entryData.dispose = false\n        entryData.lastActiveTime = Date.now()\n      }\n    } else {\n      pluginState.injectedClientEntries[bundlePath] = clientBrowserLoader\n    }\n\n    const clientComponentSSREntryDep = webpack.EntryPlugin.createDependency(\n      clientServerLoader,\n      { name: bundlePath }\n    )\n\n    const clientComponentRSCEntryDep = webpack.EntryPlugin.createDependency(\n      clientServerLoader,\n      { name: bundlePath }\n    )\n\n    return [\n      shouldInvalidate,\n      // Add the entries to the server compiler for the SSR and RSC layers. The\n      // promises are awaited later using `Promise.all` in order to parallelize\n      // adding the entries.\n      this.addEntry(compilation, compiler.context, clientComponentSSREntryDep, {\n        name: entryName,\n        layer: WEBPACK_LAYERS.serverSideRendering,\n      }),\n      this.addEntry(compilation, compiler.context, clientComponentRSCEntryDep, {\n        name: entryName,\n        layer: WEBPACK_LAYERS.reactServerComponents,\n      }),\n      clientComponentSSREntryDep,\n    ]\n  }\n\n  injectActionEntry({\n    compiler,\n    compilation,\n    actions,\n    entryName,\n    bundlePath,\n    fromClient,\n    createdActionIds,\n  }: {\n    compiler: webpack.Compiler\n    compilation: webpack.Compilation\n    actions: Map<string, ActionIdNamePair[]>\n    entryName: string\n    bundlePath: string\n    createdActionIds: Set<string>\n    fromClient?: boolean\n  }) {\n    const actionsArray = Array.from(actions.entries())\n    for (const [, actionsFromModule] of actions) {\n      for (const [id] of actionsFromModule) {\n        createdActionIds.add(entryName + '@' + id)\n      }\n    }\n\n    if (actionsArray.length === 0) {\n      return Promise.resolve()\n    }\n\n    const actionLoader = `next-flight-action-entry-loader?${stringify({\n      actions: JSON.stringify(actionsArray),\n      __client_imported__: fromClient,\n    })}!`\n\n    const currentCompilerServerActions = this.isEdgeServer\n      ? pluginState.edgeServerActions\n      : pluginState.serverActions\n\n    for (const [, actionsFromModule] of actionsArray) {\n      for (const [id] of actionsFromModule) {\n        if (typeof currentCompilerServerActions[id] === 'undefined') {\n          currentCompilerServerActions[id] = {\n            workers: {},\n            layer: {},\n          }\n        }\n        currentCompilerServerActions[id].workers[bundlePath] = {\n          moduleId: '', // TODO: What's the meaning of this?\n          async: false,\n        }\n\n        currentCompilerServerActions[id].layer[bundlePath] = fromClient\n          ? WEBPACK_LAYERS.actionBrowser\n          : WEBPACK_LAYERS.reactServerComponents\n      }\n    }\n\n    // Inject the entry to the server compiler\n    const actionEntryDep = webpack.EntryPlugin.createDependency(actionLoader, {\n      name: bundlePath,\n    })\n\n    return this.addEntry(\n      compilation,\n      // Reuse compilation context.\n      compiler.context,\n      actionEntryDep,\n      {\n        name: entryName,\n        layer: fromClient\n          ? WEBPACK_LAYERS.actionBrowser\n          : WEBPACK_LAYERS.reactServerComponents,\n      }\n    )\n  }\n\n  addEntry(\n    compilation: any,\n    context: string,\n    dependency: webpack.Dependency,\n    options: webpack.EntryOptions\n  ): Promise<any> /* Promise<module> */ {\n    return new Promise((resolve, reject) => {\n      const entry = compilation.entries.get(options.name)\n      entry.includeDependencies.push(dependency)\n      compilation.hooks.addEntry.call(entry, options)\n      compilation.addModuleTree(\n        {\n          context,\n          dependency,\n          contextInfo: { issuerLayer: options.layer },\n        },\n        (err: Error | undefined, module: any) => {\n          if (err) {\n            compilation.hooks.failedEntry.call(dependency, options, err)\n            return reject(err)\n          }\n\n          compilation.hooks.succeedEntry.call(dependency, options, module)\n\n          compilation.moduleGraph\n            .getExportsInfo(module)\n            .setUsedInUnknownWay(\n              this.isEdgeServer ? EDGE_RUNTIME_WEBPACK : DEFAULT_RUNTIME_WEBPACK\n            )\n\n          return resolve(module)\n        }\n      )\n    })\n  }\n\n  async createActionAssets(\n    compilation: webpack.Compilation,\n    assets: webpack.Compilation['assets']\n  ) {\n    const serverActions: ActionManifest['node'] = {}\n    const edgeServerActions: ActionManifest['edge'] = {}\n\n    traverseModules(compilation, (mod, _chunk, chunkGroup, modId) => {\n      // Go through all action entries and record the module ID for each entry.\n      if (\n        chunkGroup.name &&\n        mod.request &&\n        modId &&\n        /next-flight-action-entry-loader/.test(mod.request)\n      ) {\n        const fromClient = /&__client_imported__=true/.test(mod.request)\n\n        const mapping = this.isEdgeServer\n          ? pluginState.edgeServerActionModules\n          : pluginState.serverActionModules\n\n        if (!mapping[chunkGroup.name]) {\n          mapping[chunkGroup.name] = {}\n        }\n        mapping[chunkGroup.name][fromClient ? 'client' : 'server'] = {\n          moduleId: modId,\n          async: compilation.moduleGraph.isAsync(mod),\n        }\n      }\n    })\n\n    for (let id in pluginState.serverActions) {\n      const action = pluginState.serverActions[id]\n      for (let name in action.workers) {\n        const modId =\n          pluginState.serverActionModules[name][\n            action.layer[name] === WEBPACK_LAYERS.actionBrowser\n              ? 'client'\n              : 'server'\n          ]\n        action.workers[name] = modId!\n      }\n      serverActions[id] = action\n    }\n\n    for (let id in pluginState.edgeServerActions) {\n      const action = pluginState.edgeServerActions[id]\n      for (let name in action.workers) {\n        const modId =\n          pluginState.edgeServerActionModules[name][\n            action.layer[name] === WEBPACK_LAYERS.actionBrowser\n              ? 'client'\n              : 'server'\n          ]\n        action.workers[name] = modId!\n      }\n      edgeServerActions[id] = action\n    }\n\n    const serverManifest = {\n      node: serverActions,\n      edge: edgeServerActions,\n      encryptionKey: this.encryptionKey,\n    }\n    const edgeServerManifest = {\n      ...serverManifest,\n      encryptionKey: 'process.env.NEXT_SERVER_ACTIONS_ENCRYPTION_KEY',\n    }\n\n    const json = JSON.stringify(serverManifest, null, this.dev ? 2 : undefined)\n    const edgeJson = JSON.stringify(\n      edgeServerManifest,\n      null,\n      this.dev ? 2 : undefined\n    )\n\n    assets[`${this.assetPrefix}${SERVER_REFERENCE_MANIFEST}.js`] =\n      new sources.RawSource(\n        `self.__RSC_SERVER_MANIFEST=${JSON.stringify(edgeJson)}`\n      ) as unknown as webpack.sources.RawSource\n    assets[`${this.assetPrefix}${SERVER_REFERENCE_MANIFEST}.json`] =\n      new sources.RawSource(json) as unknown as webpack.sources.RawSource\n  }\n}\n\nfunction addClientImport(\n  mod: webpack.NormalModule,\n  modRequest: string,\n  clientComponentImports: ClientComponentImports,\n  importedIdentifiers: string[],\n  isFirstVisitModule: boolean\n) {\n  const clientEntryType = getModuleBuildInfo(mod).rsc?.clientEntryType\n  const isCjsModule = clientEntryType === 'cjs'\n  const assumedSourceType = getAssumedSourceType(\n    mod,\n    isCjsModule ? 'commonjs' : 'auto'\n  )\n\n  const clientImportsSet = clientComponentImports[modRequest]\n\n  if (importedIdentifiers[0] === '*') {\n    // If there's collected import path with named import identifiers,\n    // or there's nothing in collected imports are empty.\n    // we should include the whole module.\n    if (!isFirstVisitModule && [...clientImportsSet][0] !== '*') {\n      clientComponentImports[modRequest] = new Set(['*'])\n    }\n  } else {\n    const isAutoModuleSourceType = assumedSourceType === 'auto'\n    if (isAutoModuleSourceType) {\n      clientComponentImports[modRequest] = new Set(['*'])\n    } else {\n      // If it's not analyzed as named ESM exports, e.g. if it's mixing `export *` with named exports,\n      // We'll include all modules since it's not able to do tree-shaking.\n      for (const name of importedIdentifiers) {\n        // For cjs module default import, we include the whole module since\n        const isCjsDefaultImport = isCjsModule && name === 'default'\n\n        // Always include __esModule along with cjs module default export,\n        // to make sure it work with client module proxy from React.\n        if (isCjsDefaultImport) {\n          clientComponentImports[modRequest].add('__esModule')\n        }\n\n        clientComponentImports[modRequest].add(name)\n      }\n    }\n  }\n}\n\nfunction getModuleResource(mod: webpack.NormalModule): string {\n  const modPath: string = mod.resourceResolveData?.path || ''\n  const modQuery = mod.resourceResolveData?.query || ''\n  // We have to always use the resolved request here to make sure the\n  // server and client are using the same module path (required by RSC), as\n  // the server compiler and client compiler have different resolve configs.\n  let modResource: string = modPath + modQuery\n\n  // Context modules don't have a resource path, we use the identifier instead.\n  if (mod.constructor.name === 'ContextModule') {\n    modResource = mod.identifier()\n  }\n\n  // For the barrel optimization, we need to use the match resource instead\n  // because there will be 2 modules for the same file (same resource path)\n  // but they're different modules and can't be deduped via `visitedModule`.\n  // The first module is a virtual re-export module created by the loader.\n  if (mod.matchResource?.startsWith(BARREL_OPTIMIZATION_PREFIX)) {\n    modResource = mod.matchResource + ':' + modResource\n  }\n  return modResource\n}\n"],"names":["webpack","stringify","path","sources","getInvalidator","getEntries","EntryTypes","getEntryKey","WEBPACK_LAYERS","APP_CLIENT_INTERNALS","BARREL_OPTIMIZATION_PREFIX","COMPILER_NAMES","DEFAULT_RUNTIME_WEBPACK","EDGE_RUNTIME_WEBPACK","SERVER_REFERENCE_MANIFEST","UNDERSCORE_NOT_FOUND_ROUTE_ENTRY","getActionsFromBuildInfo","isClientComponentEntryModule","isCSSMod","regexCSS","traverseModules","forEachEntryModule","formatBarrelOptimizedResource","getModuleReferencesInOrder","normalizePathSep","getProxiedPluginState","PAGE_TYPES","getModuleBuildInfo","getAssumedSourceType","isAppRouteRoute","PLUGIN_NAME","pluginState","serverActions","edgeServerActions","serverActionModules","edgeServerActionModules","ssrModules","edgeSsrModules","rscModules","edgeRscModules","injectedClientEntries","deduplicateCSSImportsForEntry","mergedCSSimports","sortedCSSImports","Object","entries","sort","a","b","aPath","bPath","aDepth","split","length","bDepth","aName","parse","name","bName","indexA","indexOf","indexB","dedupedCSSImports","trackedCSSImports","Set","entryName","cssImports","cssImport","has","filename","includes","add","push","FlightClientEntryPlugin","constructor","options","dev","appDir","isEdgeServer","assetPrefix","encryptionKey","webpackRuntime","apply","compiler","hooks","compilation","tap","normalModuleFactory","dependencyFactories","set","dependencies","ModuleDependency","dependencyTemplates","NullDependency","Template","finishMake","tapPromise","createClientEntries","afterCompile","recordModule","modId","mod","modPath","matchResource","resourceResolveData","modQuery","query","modResource","startsWith","resource","layer","reactServerComponents","key","relative","context","replace","moduleInfo","moduleId","async","moduleGraph","isAsync","serverSideRendering","ssrNamedModuleId","_chunk","_chunkGroup","make","processAssets","stage","Compilation","PROCESS_ASSETS_STAGE_OPTIMIZE_HASH","assets","createActionAssets","addClientEntryAndSSRModulesList","createdSSRDependenciesForEntry","addActionEntryList","actionMapsPerEntry","createdActionIds","entryModule","internalClientComponentEntryImports","actionEntryImports","Map","clientEntriesToInject","connection","entryRequest","dependency","request","clientComponentImports","actionImports","collectComponentInfoFromServerEntryDependency","resolvedModule","forEach","dep","actions","isAbsoluteRequest","isAbsolute","keys","value","relativeRequest","bundlePath","assign","absolutePagePath","clientEntryToInject","injected","injectClientEntryAndSSRModules","clientImports","reduce","res","curr","size","injectActionEntry","invalidator","outputPath","some","shouldInvalidate","invalidate","client","Promise","all","flatMap","addClientEntryAndSSRModules","addedClientActionEntryList","actionMapsPerClientEntry","ssrEntryDependencies","collectClientActionsFromDependencies","remainingClientImportedActions","remainingActionEntryImports","remainingActionNames","action","fromClient","collectedActions","visitedModule","visitedEntry","collectActions","collectActionsInDep","getModuleResource","entryDependency","ssrEntryModule","getResolvedModule","depModule","visitedOfClientComponentsTraverse","CSSImports","filterClientComponents","importedIdentifiers","addClientImport","sideEffectFree","factoryMeta","unused","getExportsInfo","isModuleUsed","dependencyIds","ids","Array","from","modules","test","localeCompare","map","clientImportPath","clientBrowserLoader","sep","x","JSON","server","clientServerLoader","pageKey","APP","type","CHILD_ENTRY","parentEntries","absoluteEntryFilePath","dispose","lastActiveTime","Date","now","entryData","clientComponentSSREntryDep","EntryPlugin","createDependency","clientComponentRSCEntryDep","addEntry","actionsArray","actionsFromModule","id","resolve","actionLoader","__client_imported__","currentCompilerServerActions","workers","actionBrowser","actionEntryDep","reject","entry","get","includeDependencies","call","addModuleTree","contextInfo","issuerLayer","err","module","failedEntry","succeedEntry","setUsedInUnknownWay","chunkGroup","mapping","serverManifest","node","edge","edgeServerManifest","json","undefined","edgeJson","RawSource","modRequest","isFirstVisitModule","clientEntryType","rsc","isCjsModule","assumedSourceType","clientImportsSet","isAutoModuleSourceType","isCjsDefaultImport","identifier"],"mappings":"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"}