{"version":3,"sources":["../../../src/export/helpers/create-incremental-cache.ts"],"sourcesContent":["import path from 'path'\nimport { IncrementalCache } from '../../server/lib/incremental-cache'\nimport { hasNextSupport } from '../../server/ci-info'\nimport { nodeFs } from '../../server/lib/node-fs-methods'\nimport { interopDefault } from '../../lib/interop-default'\nimport { formatDynamicImportPath } from '../../lib/format-dynamic-import-path'\n\nexport async function createIncrementalCache({\n  cacheHandler,\n  dynamicIO,\n  cacheMaxMemorySize,\n  fetchCacheKeyPrefix,\n  distDir,\n  dir,\n  flushToDisk,\n  cacheHandlers,\n}: {\n  dynamicIO: boolean\n  cacheHandler?: string\n  cacheMaxMemorySize?: number\n  fetchCacheKeyPrefix?: string\n  distDir: string\n  dir: string\n  flushToDisk?: boolean\n  cacheHandlers?: Record<string, string | undefined>\n}) {\n  // Custom cache handler overrides.\n  let CacheHandler: any\n  if (cacheHandler) {\n    CacheHandler = interopDefault(\n      await import(formatDynamicImportPath(dir, cacheHandler)).then(\n        (mod) => mod.default || mod\n      )\n    )\n  }\n\n  if (!(globalThis as any).__nextCacheHandlers && cacheHandlers) {\n    ;(globalThis as any).__nextCacheHandlers = {}\n\n    for (const key of Object.keys(cacheHandlers)) {\n      if (cacheHandlers[key]) {\n        ;(globalThis as any).__nextCacheHandlers[key] = interopDefault(\n          await import(formatDynamicImportPath(dir, cacheHandlers[key])).then(\n            (mod) => mod.default || mod\n          )\n        )\n      }\n    }\n  }\n\n  const incrementalCache = new IncrementalCache({\n    dev: false,\n    requestHeaders: {},\n    flushToDisk,\n    dynamicIO,\n    fetchCache: true,\n    maxMemoryCacheSize: cacheMaxMemorySize,\n    fetchCacheKeyPrefix,\n    getPrerenderManifest: () => ({\n      version: 4,\n      routes: {},\n      dynamicRoutes: {},\n      preview: {\n        previewModeEncryptionKey: '',\n        previewModeId: '',\n        previewModeSigningKey: '',\n      },\n      notFoundRoutes: [],\n    }),\n    fs: nodeFs,\n    serverDistDir: path.join(distDir, 'server'),\n    CurCacheHandler: CacheHandler,\n    minimalMode: hasNextSupport,\n  })\n\n  ;(globalThis as any).__incrementalCache = incrementalCache\n\n  return incrementalCache\n}\n"],"names":["path","IncrementalCache","hasNextSupport","nodeFs","interopDefault","formatDynamicImportPath","createIncrementalCache","cacheHandler","dynamicIO","cacheMaxMemorySize","fetchCacheKeyPrefix","distDir","dir","flushToDisk","cacheHandlers","CacheHandler","then","mod","default","globalThis","__nextCacheHandlers","key","Object","keys","incrementalCache","dev","requestHeaders","fetchCache","maxMemoryCacheSize","getPrerenderManifest","version","routes","dynamicRoutes","preview","previewModeEncryptionKey","previewModeId","previewModeSigningKey","notFoundRoutes","fs","serverDistDir","join","CurCacheHandler","minimalMode","__incrementalCache"],"mappings":"AAAA,OAAOA,UAAU,OAAM;AACvB,SAASC,gBAAgB,QAAQ,qCAAoC;AACrE,SAASC,cAAc,QAAQ,uBAAsB;AACrD,SAASC,MAAM,QAAQ,mCAAkC;AACzD,SAASC,cAAc,QAAQ,4BAA2B;AAC1D,SAASC,uBAAuB,QAAQ,uCAAsC;AAE9E,OAAO,eAAeC,uBAAuB,EAC3CC,YAAY,EACZC,SAAS,EACTC,kBAAkB,EAClBC,mBAAmB,EACnBC,OAAO,EACPC,GAAG,EACHC,WAAW,EACXC,aAAa,EAUd;IACC,kCAAkC;IAClC,IAAIC;IACJ,IAAIR,cAAc;QAChBQ,eAAeX,eACb,MAAM,MAAM,CAACC,wBAAwBO,KAAKL,eAAeS,IAAI,CAC3D,CAACC,MAAQA,IAAIC,OAAO,IAAID;IAG9B;IAEA,IAAI,CAAC,AAACE,WAAmBC,mBAAmB,IAAIN,eAAe;;QAC3DK,WAAmBC,mBAAmB,GAAG,CAAC;QAE5C,KAAK,MAAMC,OAAOC,OAAOC,IAAI,CAACT,eAAgB;YAC5C,IAAIA,aAAa,CAACO,IAAI,EAAE;;gBACpBF,WAAmBC,mBAAmB,CAACC,IAAI,GAAGjB,eAC9C,MAAM,MAAM,CAACC,wBAAwBO,KAAKE,aAAa,CAACO,IAAI,GAAGL,IAAI,CACjE,CAACC,MAAQA,IAAIC,OAAO,IAAID;YAG9B;QACF;IACF;IAEA,MAAMO,mBAAmB,IAAIvB,iBAAiB;QAC5CwB,KAAK;QACLC,gBAAgB,CAAC;QACjBb;QACAL;QACAmB,YAAY;QACZC,oBAAoBnB;QACpBC;QACAmB,sBAAsB,IAAO,CAAA;gBAC3BC,SAAS;gBACTC,QAAQ,CAAC;gBACTC,eAAe,CAAC;gBAChBC,SAAS;oBACPC,0BAA0B;oBAC1BC,eAAe;oBACfC,uBAAuB;gBACzB;gBACAC,gBAAgB,EAAE;YACpB,CAAA;QACAC,IAAInC;QACJoC,eAAevC,KAAKwC,IAAI,CAAC7B,SAAS;QAClC8B,iBAAiB1B;QACjB2B,aAAaxC;IACf;IAEEiB,WAAmBwB,kBAAkB,GAAGnB;IAE1C,OAAOA;AACT"}