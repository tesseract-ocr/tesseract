{"version":3,"sources":["../../../../../src/shared/lib/router/utils/route-regex.ts"],"sourcesContent":["import {\n  NEXT_INTERCEPTION_MARKER_PREFIX,\n  NEXT_QUERY_PARAM_PREFIX,\n} from '../../../../lib/constants'\nimport { INTERCEPTION_ROUTE_MARKERS } from '../../../../server/lib/interception-routes'\nimport { escapeStringRegexp } from '../../escape-regexp'\nimport { removeTrailingSlash } from './remove-trailing-slash'\n\nexport interface Group {\n  pos: number\n  repeat: boolean\n  optional: boolean\n}\n\nexport interface RouteRegex {\n  groups: { [groupName: string]: Group }\n  re: RegExp\n}\n\n/**\n * Regular expression pattern used to match route parameters.\n * Matches both single parameters and parameter groups.\n * Examples:\n *   - `[[...slug]]` matches parameter group with key 'slug', repeat: true, optional: true\n *   - `[...slug]` matches parameter group with key 'slug', repeat: true, optional: false\n *   - `[[foo]]` matches parameter with key 'foo', repeat: false, optional: true\n *   - `[bar]` matches parameter with key 'bar', repeat: false, optional: false\n */\nconst PARAMETER_PATTERN = /\\[((?:\\[.*\\])|.+)\\]/\n\n/**\n * Parses a given parameter from a route to a data structure that can be used\n * to generate the parametrized route.\n * Examples:\n *   - `[[...slug]]` -> `{ key: 'slug', repeat: true, optional: true }`\n *   - `[...slug]` -> `{ key: 'slug', repeat: true, optional: false }`\n *   - `[[foo]]` -> `{ key: 'foo', repeat: false, optional: true }`\n *   - `[bar]` -> `{ key: 'bar', repeat: false, optional: false }`\n *   - `fizz` -> `{ key: 'fizz', repeat: false, optional: false }`\n * @param param - The parameter to parse.\n * @returns The parsed parameter as a data structure.\n */\nexport function parseParameter(param: string) {\n  const match = param.match(PARAMETER_PATTERN)\n\n  if (!match) {\n    return parseMatchedParameter(param)\n  }\n\n  return parseMatchedParameter(match[1])\n}\n\n/**\n * Parses a matched parameter from the PARAMETER_PATTERN regex to a data structure that can be used\n * to generate the parametrized route.\n * Examples:\n *   - `[...slug]` -> `{ key: 'slug', repeat: true, optional: true }`\n *   - `...slug` -> `{ key: 'slug', repeat: true, optional: false }`\n *   - `[foo]` -> `{ key: 'foo', repeat: false, optional: true }`\n *   - `bar` -> `{ key: 'bar', repeat: false, optional: false }`\n * @param param - The matched parameter to parse.\n * @returns The parsed parameter as a data structure.\n */\nfunction parseMatchedParameter(param: string) {\n  const optional = param.startsWith('[') && param.endsWith(']')\n  if (optional) {\n    param = param.slice(1, -1)\n  }\n  const repeat = param.startsWith('...')\n  if (repeat) {\n    param = param.slice(3)\n  }\n  return { key: param, repeat, optional }\n}\n\nfunction getParametrizedRoute(route: string) {\n  const segments = removeTrailingSlash(route).slice(1).split('/')\n  const groups: { [groupName: string]: Group } = {}\n  let groupIndex = 1\n  return {\n    parameterizedRoute: segments\n      .map((segment) => {\n        const markerMatch = INTERCEPTION_ROUTE_MARKERS.find((m) =>\n          segment.startsWith(m)\n        )\n        const paramMatches = segment.match(PARAMETER_PATTERN) // Check for parameters\n\n        if (markerMatch && paramMatches) {\n          const { key, optional, repeat } = parseMatchedParameter(\n            paramMatches[1]\n          )\n          groups[key] = { pos: groupIndex++, repeat, optional }\n          return `/${escapeStringRegexp(markerMatch)}([^/]+?)`\n        } else if (paramMatches) {\n          const { key, repeat, optional } = parseMatchedParameter(\n            paramMatches[1]\n          )\n          groups[key] = { pos: groupIndex++, repeat, optional }\n          return repeat ? (optional ? '(?:/(.+?))?' : '/(.+?)') : '/([^/]+?)'\n        } else {\n          return `/${escapeStringRegexp(segment)}`\n        }\n      })\n      .join(''),\n    groups,\n  }\n}\n\n/**\n * From a normalized route this function generates a regular expression and\n * a corresponding groups object intended to be used to store matching groups\n * from the regular expression.\n */\nexport function getRouteRegex(normalizedRoute: string): RouteRegex {\n  const { parameterizedRoute, groups } = getParametrizedRoute(normalizedRoute)\n  return {\n    re: new RegExp(`^${parameterizedRoute}(?:/)?$`),\n    groups: groups,\n  }\n}\n\n/**\n * Builds a function to generate a minimal routeKey using only a-z and minimal\n * number of characters.\n */\nfunction buildGetSafeRouteKey() {\n  let i = 0\n\n  return () => {\n    let routeKey = ''\n    let j = ++i\n    while (j > 0) {\n      routeKey += String.fromCharCode(97 + ((j - 1) % 26))\n      j = Math.floor((j - 1) / 26)\n    }\n    return routeKey\n  }\n}\n\nfunction getSafeKeyFromSegment({\n  interceptionMarker,\n  getSafeRouteKey,\n  segment,\n  routeKeys,\n  keyPrefix,\n}: {\n  interceptionMarker?: string\n  getSafeRouteKey: () => string\n  segment: string\n  routeKeys: Record<string, string>\n  keyPrefix?: string\n}) {\n  const { key, optional, repeat } = parseMatchedParameter(segment)\n\n  // replace any non-word characters since they can break\n  // the named regex\n  let cleanedKey = key.replace(/\\W/g, '')\n\n  if (keyPrefix) {\n    cleanedKey = `${keyPrefix}${cleanedKey}`\n  }\n  let invalidKey = false\n\n  // check if the key is still invalid and fallback to using a known\n  // safe key\n  if (cleanedKey.length === 0 || cleanedKey.length > 30) {\n    invalidKey = true\n  }\n  if (!isNaN(parseInt(cleanedKey.slice(0, 1)))) {\n    invalidKey = true\n  }\n\n  if (invalidKey) {\n    cleanedKey = getSafeRouteKey()\n  }\n\n  if (keyPrefix) {\n    routeKeys[cleanedKey] = `${keyPrefix}${key}`\n  } else {\n    routeKeys[cleanedKey] = key\n  }\n\n  // if the segment has an interception marker, make sure that's part of the regex pattern\n  // this is to ensure that the route with the interception marker doesn't incorrectly match\n  // the non-intercepted route (ie /app/(.)[username] should not match /app/[username])\n  const interceptionPrefix = interceptionMarker\n    ? escapeStringRegexp(interceptionMarker)\n    : ''\n\n  return repeat\n    ? optional\n      ? `(?:/${interceptionPrefix}(?<${cleanedKey}>.+?))?`\n      : `/${interceptionPrefix}(?<${cleanedKey}>.+?)`\n    : `/${interceptionPrefix}(?<${cleanedKey}>[^/]+?)`\n}\n\nfunction getNamedParametrizedRoute(route: string, prefixRouteKeys: boolean) {\n  const segments = removeTrailingSlash(route).slice(1).split('/')\n  const getSafeRouteKey = buildGetSafeRouteKey()\n  const routeKeys: { [named: string]: string } = {}\n  return {\n    namedParameterizedRoute: segments\n      .map((segment) => {\n        const hasInterceptionMarker = INTERCEPTION_ROUTE_MARKERS.some((m) =>\n          segment.startsWith(m)\n        )\n        const paramMatches = segment.match(/\\[((?:\\[.*\\])|.+)\\]/) // Check for parameters\n\n        if (hasInterceptionMarker && paramMatches) {\n          const [usedMarker] = segment.split(paramMatches[0])\n\n          return getSafeKeyFromSegment({\n            getSafeRouteKey,\n            interceptionMarker: usedMarker,\n            segment: paramMatches[1],\n            routeKeys,\n            keyPrefix: prefixRouteKeys\n              ? NEXT_INTERCEPTION_MARKER_PREFIX\n              : undefined,\n          })\n        } else if (paramMatches) {\n          return getSafeKeyFromSegment({\n            getSafeRouteKey,\n            segment: paramMatches[1],\n            routeKeys,\n            keyPrefix: prefixRouteKeys ? NEXT_QUERY_PARAM_PREFIX : undefined,\n          })\n        } else {\n          return `/${escapeStringRegexp(segment)}`\n        }\n      })\n      .join(''),\n    routeKeys,\n  }\n}\n\n/**\n * This function extends `getRouteRegex` generating also a named regexp where\n * each group is named along with a routeKeys object that indexes the assigned\n * named group with its corresponding key. When the routeKeys need to be\n * prefixed to uniquely identify internally the \"prefixRouteKey\" arg should\n * be \"true\" currently this is only the case when creating the routes-manifest\n * during the build\n */\nexport function getNamedRouteRegex(\n  normalizedRoute: string,\n  prefixRouteKey: boolean\n) {\n  const result = getNamedParametrizedRoute(normalizedRoute, prefixRouteKey)\n  return {\n    ...getRouteRegex(normalizedRoute),\n    namedRegex: `^${result.namedParameterizedRoute}(?:/)?$`,\n    routeKeys: result.routeKeys,\n  }\n}\n\n/**\n * Generates a named regexp.\n * This is intended to be using for build time only.\n */\nexport function getNamedMiddlewareRegex(\n  normalizedRoute: string,\n  options: {\n    catchAll?: boolean\n  }\n) {\n  const { parameterizedRoute } = getParametrizedRoute(normalizedRoute)\n  const { catchAll = true } = options\n  if (parameterizedRoute === '/') {\n    let catchAllRegex = catchAll ? '.*' : ''\n    return {\n      namedRegex: `^/${catchAllRegex}$`,\n    }\n  }\n\n  const { namedParameterizedRoute } = getNamedParametrizedRoute(\n    normalizedRoute,\n    false\n  )\n  let catchAllGroupedRegex = catchAll ? '(?:(/.*)?)' : ''\n  return {\n    namedRegex: `^${namedParameterizedRoute}${catchAllGroupedRegex}$`,\n  }\n}\n"],"names":["NEXT_INTERCEPTION_MARKER_PREFIX","NEXT_QUERY_PARAM_PREFIX","INTERCEPTION_ROUTE_MARKERS","escapeStringRegexp","removeTrailingSlash","PARAMETER_PATTERN","parseParameter","param","match","parseMatchedParameter","optional","startsWith","endsWith","slice","repeat","key","getParametrizedRoute","route","segments","split","groups","groupIndex","parameterizedRoute","map","segment","markerMatch","find","m","paramMatches","pos","join","getRouteRegex","normalizedRoute","re","RegExp","buildGetSafeRouteKey","i","routeKey","j","String","fromCharCode","Math","floor","getSafeKeyFromSegment","interceptionMarker","getSafeRouteKey","routeKeys","keyPrefix","cleanedKey","replace","invalidKey","length","isNaN","parseInt","interceptionPrefix","getNamedParametrizedRoute","prefixRouteKeys","namedParameterizedRoute","hasInterceptionMarker","some","usedMarker","undefined","getNamedRouteRegex","prefixRouteKey","result","namedRegex","getNamedMiddlewareRegex","options","catchAll","catchAllRegex","catchAllGroupedRegex"],"mappings":"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"}