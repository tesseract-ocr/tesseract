{"version":3,"sources":["../../../src/server/app-render/app-render.tsx"],"sourcesContent":["import type {\n  ActionResult,\n  DynamicParamTypesShort,\n  FlightRouterState,\n  FlightSegmentPath,\n  RenderOpts,\n  Segment,\n  CacheNodeSeedData,\n  PreloadCallbacks,\n  RSCPayload,\n  FlightData,\n  InitialRSCPayload,\n  FlightDataPath,\n} from './types'\nimport {\n  workAsyncStorage,\n  type WorkStore,\n} from '../app-render/work-async-storage.external'\nimport type { RequestStore } from '../app-render/work-unit-async-storage.external'\nimport type { NextParsedUrlQuery } from '../request-meta'\nimport type { LoaderTree } from '../lib/app-dir-module'\nimport type { AppPageModule } from '../route-modules/app-page/module'\nimport type {\n  ClientReferenceManifest,\n  ManifestNode,\n} from '../../build/webpack/plugins/flight-manifest-plugin'\nimport type { DeepReadonly } from '../../shared/lib/deep-readonly'\nimport type { BaseNextRequest, BaseNextResponse } from '../base-http'\nimport type { IncomingHttpHeaders } from 'http'\n\nimport React, { type ErrorInfo, type JSX } from 'react'\n\nimport RenderResult, {\n  type AppPageRenderResultMetadata,\n  type RenderResultOptions,\n} from '../render-result'\nimport {\n  chainStreams,\n  renderToInitialFizzStream,\n  createDocumentClosingStream,\n  continueFizzStream,\n  continueDynamicPrerender,\n  continueStaticPrerender,\n  continueDynamicHTMLResume,\n  streamToBuffer,\n  streamToString,\n} from '../stream-utils/node-web-streams-helper'\nimport { stripInternalQueries } from '../internal-utils'\nimport {\n  NEXT_HMR_REFRESH_HEADER,\n  NEXT_ROUTER_PREFETCH_HEADER,\n  NEXT_ROUTER_STATE_TREE_HEADER,\n  NEXT_ROUTER_STALE_TIME_HEADER,\n  NEXT_URL,\n  RSC_HEADER,\n} from '../../client/components/app-router-headers'\nimport {\n  createTrackedMetadataContext,\n  createMetadataContext,\n} from '../../lib/metadata/metadata-context'\nimport { createRequestStoreForRender } from '../async-storage/request-store'\nimport { createWorkStore } from '../async-storage/work-store'\nimport {\n  getAccessFallbackErrorTypeByStatus,\n  getAccessFallbackHTTPStatus,\n  isHTTPAccessFallbackError,\n} from '../../client/components/http-access-fallback/http-access-fallback'\nimport {\n  getURLFromRedirectError,\n  getRedirectStatusCodeFromError,\n} from '../../client/components/redirect'\nimport { isRedirectError } from '../../client/components/redirect-error'\nimport { getImplicitTags } from '../lib/implicit-tags'\nimport { AppRenderSpan, NextNodeServerSpan } from '../lib/trace/constants'\nimport { getTracer } from '../lib/trace/tracer'\nimport { FlightRenderResult } from './flight-render-result'\nimport {\n  createFlightReactServerErrorHandler,\n  createHTMLReactServerErrorHandler,\n  createHTMLErrorHandler,\n  type DigestedError,\n  isUserLandError,\n  getDigestForWellKnownError,\n} from './create-error-handler'\nimport {\n  getShortDynamicParamType,\n  dynamicParamTypes,\n} from './get-short-dynamic-param-type'\nimport { getSegmentParam } from './get-segment-param'\nimport { getScriptNonceFromHeader } from './get-script-nonce-from-header'\nimport { parseAndValidateFlightRouterState } from './parse-and-validate-flight-router-state'\nimport { createFlightRouterStateFromLoaderTree } from './create-flight-router-state-from-loader-tree'\nimport { handleAction } from './action-handler'\nimport { isBailoutToCSRError } from '../../shared/lib/lazy-dynamic/bailout-to-csr'\nimport { warn, error } from '../../build/output/log'\nimport { appendMutableCookies } from '../web/spec-extension/adapters/request-cookies'\nimport { createServerInsertedHTML } from './server-inserted-html'\nimport { getRequiredScripts } from './required-scripts'\nimport { addPathPrefix } from '../../shared/lib/router/utils/add-path-prefix'\nimport { makeGetServerInsertedHTML } from './make-get-server-inserted-html'\nimport { walkTreeWithFlightRouterState } from './walk-tree-with-flight-router-state'\nimport { createComponentTree } from './create-component-tree'\nimport { getAssetQueryString } from './get-asset-query-string'\nimport { setReferenceManifestsSingleton } from './encryption-utils'\nimport {\n  DynamicState,\n  type PostponedState,\n  parsePostponedState,\n} from './postponed-state'\nimport {\n  getDynamicDataPostponedState,\n  getDynamicHTMLPostponedState,\n  getPostponedFromState,\n} from './postponed-state'\nimport { isDynamicServerError } from '../../client/components/hooks-server-context'\nimport {\n  useFlightStream,\n  createInlinedDataReadableStream,\n} from './use-flight-response'\nimport {\n  StaticGenBailoutError,\n  isStaticGenBailoutError,\n} from '../../client/components/static-generation-bailout'\nimport { getStackWithoutErrorMessage } from '../../lib/format-server-error'\nimport {\n  accessedDynamicData,\n  createPostponedAbortSignal,\n  formatDynamicAPIAccesses,\n  isPrerenderInterruptedError,\n  createDynamicTrackingState,\n  createDynamicValidationState,\n  getFirstDynamicReason,\n  trackAllowedDynamicAccess,\n  throwIfDisallowedDynamic,\n  consumeDynamicAccess,\n  type DynamicAccess,\n} from './dynamic-rendering'\nimport {\n  getClientComponentLoaderMetrics,\n  wrapClientComponentLoader,\n} from '../client-component-renderer-logger'\nimport { createServerModuleMap } from './action-utils'\nimport { isNodeNextRequest } from '../base-http/helpers'\nimport { parseParameter } from '../../shared/lib/router/utils/route-regex'\nimport { parseRelativeUrl } from '../../shared/lib/router/utils/parse-relative-url'\nimport AppRouter from '../../client/components/app-router'\nimport type { ServerComponentsHmrCache } from '../response-cache'\nimport type { RequestErrorContext } from '../instrumentation/types'\nimport { getServerActionRequestMetadata } from '../lib/server-action-request-meta'\nimport { createInitialRouterState } from '../../client/components/router-reducer/create-initial-router-state'\nimport { createMutableActionQueue } from '../../shared/lib/router/action-queue'\nimport { getRevalidateReason } from '../instrumentation/utils'\nimport { PAGE_SEGMENT_KEY } from '../../shared/lib/segment'\nimport type { FallbackRouteParams } from '../request/fallback-params'\nimport { DynamicServerError } from '../../client/components/hooks-server-context'\nimport { ServerPrerenderStreamResult } from './app-render-prerender-utils'\nimport {\n  type ReactServerPrerenderResult,\n  ReactServerResult,\n  createReactServerPrerenderResult,\n  createReactServerPrerenderResultFromRender,\n  prerenderAndAbortInSequentialTasks,\n  prerenderServerWithPhases,\n  prerenderClientWithPhases,\n} from './app-render-prerender-utils'\nimport { printDebugThrownValueForProspectiveRender } from './prospective-render-utils'\nimport { scheduleInSequentialTasks } from './app-render-render-utils'\nimport { waitAtLeastOneReactRenderTask } from '../../lib/scheduler'\nimport {\n  workUnitAsyncStorage,\n  type PrerenderStore,\n} from './work-unit-async-storage.external'\nimport { CacheSignal } from './cache-signal'\nimport { getTracedMetadata } from '../lib/trace/utils'\nimport { InvariantError } from '../../shared/lib/invariant-error'\n\nimport './clean-async-snapshot.external'\nimport { INFINITE_CACHE } from '../../lib/constants'\nimport { createComponentStylesAndScripts } from './create-component-styles-and-scripts'\nimport { parseLoaderTree } from './parse-loader-tree'\nimport {\n  createPrerenderResumeDataCache,\n  createRenderResumeDataCache,\n} from '../resume-data-cache/resume-data-cache'\nimport type { MetadataErrorType } from '../../lib/metadata/resolve-metadata'\n\nexport type GetDynamicParamFromSegment = (\n  // [slug] / [[slug]] / [...slug]\n  segment: string\n) => {\n  param: string\n  value: string | string[] | null\n  treeSegment: Segment\n  type: DynamicParamTypesShort\n} | null\n\nexport type GenerateFlight = typeof generateDynamicFlightRenderResult\n\nexport type AppRenderContext = {\n  workStore: WorkStore\n  url: ReturnType<typeof parseRelativeUrl>\n  componentMod: AppPageModule\n  renderOpts: RenderOpts\n  parsedRequestHeaders: ParsedRequestHeaders\n  getDynamicParamFromSegment: GetDynamicParamFromSegment\n  query: NextParsedUrlQuery\n  isPrefetch: boolean\n  isAction: boolean\n  requestTimestamp: number\n  appUsingSizeAdjustment: boolean\n  flightRouterState?: FlightRouterState\n  requestId: string\n  pagePath: string\n  clientReferenceManifest: DeepReadonly<ClientReferenceManifest>\n  assetPrefix: string\n  isNotFoundPath: boolean\n  nonce: string | undefined\n  res: BaseNextResponse\n}\n\ninterface ParseRequestHeadersOptions {\n  readonly isDevWarmup: undefined | boolean\n  readonly isRoutePPREnabled: boolean\n}\n\nconst flightDataPathHeadKey = 'h'\n\ninterface ParsedRequestHeaders {\n  /**\n   * Router state provided from the client-side router. Used to handle rendering\n   * from the common layout down. This value will be undefined if the request is\n   * not a client-side navigation request, or if the request is a prefetch\n   * request.\n   */\n  readonly flightRouterState: FlightRouterState | undefined\n  readonly isPrefetchRequest: boolean\n  readonly isDevWarmupRequest: boolean\n  readonly isHmrRefresh: boolean\n  readonly isRSCRequest: boolean\n  readonly nonce: string | undefined\n}\n\nfunction parseRequestHeaders(\n  headers: IncomingHttpHeaders,\n  options: ParseRequestHeadersOptions\n): ParsedRequestHeaders {\n  const isDevWarmupRequest = options.isDevWarmup === true\n\n  // dev warmup requests are treated as prefetch RSC requests\n  const isPrefetchRequest =\n    isDevWarmupRequest ||\n    headers[NEXT_ROUTER_PREFETCH_HEADER.toLowerCase()] !== undefined\n\n  const isHmrRefresh =\n    headers[NEXT_HMR_REFRESH_HEADER.toLowerCase()] !== undefined\n\n  // dev warmup requests are treated as prefetch RSC requests\n  const isRSCRequest =\n    isDevWarmupRequest || headers[RSC_HEADER.toLowerCase()] !== undefined\n\n  const shouldProvideFlightRouterState =\n    isRSCRequest && (!isPrefetchRequest || !options.isRoutePPREnabled)\n\n  const flightRouterState = shouldProvideFlightRouterState\n    ? parseAndValidateFlightRouterState(\n        headers[NEXT_ROUTER_STATE_TREE_HEADER.toLowerCase()]\n      )\n    : undefined\n\n  const csp =\n    headers['content-security-policy'] ||\n    headers['content-security-policy-report-only']\n\n  const nonce =\n    typeof csp === 'string' ? getScriptNonceFromHeader(csp) : undefined\n\n  return {\n    flightRouterState,\n    isPrefetchRequest,\n    isHmrRefresh,\n    isRSCRequest,\n    isDevWarmupRequest,\n    nonce,\n  }\n}\n\nfunction createNotFoundLoaderTree(loaderTree: LoaderTree): LoaderTree {\n  // Align the segment with parallel-route-default in next-app-loader\n  const components = loaderTree[2]\n  return [\n    '',\n    {\n      children: [\n        PAGE_SEGMENT_KEY,\n        {},\n        {\n          page: components['not-found'],\n        },\n      ],\n    },\n    components,\n  ]\n}\n\nexport type CreateSegmentPath = (child: FlightSegmentPath) => FlightSegmentPath\n\n/**\n * Returns a function that parses the dynamic segment and return the associated value.\n */\nfunction makeGetDynamicParamFromSegment(\n  params: { [key: string]: any },\n  pagePath: string,\n  fallbackRouteParams: FallbackRouteParams | null\n): GetDynamicParamFromSegment {\n  return function getDynamicParamFromSegment(\n    // [slug] / [[slug]] / [...slug]\n    segment: string\n  ) {\n    const segmentParam = getSegmentParam(segment)\n    if (!segmentParam) {\n      return null\n    }\n\n    const key = segmentParam.param\n\n    let value = params[key]\n\n    if (fallbackRouteParams && fallbackRouteParams.has(segmentParam.param)) {\n      value = fallbackRouteParams.get(segmentParam.param)\n    } else if (Array.isArray(value)) {\n      value = value.map((i) => encodeURIComponent(i))\n    } else if (typeof value === 'string') {\n      value = encodeURIComponent(value)\n    }\n\n    if (!value) {\n      const isCatchall = segmentParam.type === 'catchall'\n      const isOptionalCatchall = segmentParam.type === 'optional-catchall'\n\n      if (isCatchall || isOptionalCatchall) {\n        const dynamicParamType = dynamicParamTypes[segmentParam.type]\n        // handle the case where an optional catchall does not have a value,\n        // e.g. `/dashboard/[[...slug]]` when requesting `/dashboard`\n        if (isOptionalCatchall) {\n          return {\n            param: key,\n            value: null,\n            type: dynamicParamType,\n            treeSegment: [key, '', dynamicParamType],\n          }\n        }\n\n        // handle the case where a catchall or optional catchall does not have a value,\n        // e.g. `/foo/bar/hello` and `@slot/[...catchall]` or `@slot/[[...catchall]]` is matched\n        value = pagePath\n          .split('/')\n          // remove the first empty string\n          .slice(1)\n          // replace any dynamic params with the actual values\n          .flatMap((pathSegment) => {\n            const param = parseParameter(pathSegment)\n            // if the segment matches a param, return the param value\n            // otherwise, it's a static segment, so just return that\n            return params[param.key] ?? param.key\n          })\n\n        return {\n          param: key,\n          value,\n          type: dynamicParamType,\n          // This value always has to be a string.\n          treeSegment: [key, value.join('/'), dynamicParamType],\n        }\n      }\n    }\n\n    const type = getShortDynamicParamType(segmentParam.type)\n\n    return {\n      param: key,\n      // The value that is passed to user code.\n      value: value,\n      // The value that is rendered in the router tree.\n      treeSegment: [key, Array.isArray(value) ? value.join('/') : value, type],\n      type: type,\n    }\n  }\n}\n\nfunction NonIndex({ ctx }: { ctx: AppRenderContext }) {\n  const is404Page = ctx.pagePath === '/404'\n  const isInvalidStatusCode =\n    typeof ctx.res.statusCode === 'number' && ctx.res.statusCode > 400\n\n  if (is404Page || isInvalidStatusCode) {\n    return <meta name=\"robots\" content=\"noindex\" />\n  }\n  return null\n}\n\n/**\n * This is used by server actions & client-side navigations to generate RSC data from a client-side request.\n * This function is only called on \"dynamic\" requests (ie, there wasn't already a static response).\n * It uses request headers (namely `Next-Router-State-Tree`) to determine where to start rendering.\n */\nasync function generateDynamicRSCPayload(\n  ctx: AppRenderContext,\n  options?: {\n    actionResult: ActionResult\n    skipFlight: boolean\n  }\n): Promise<RSCPayload> {\n  // Flight data that is going to be passed to the browser.\n  // Currently a single item array but in the future multiple patches might be combined in a single request.\n\n  // We initialize `flightData` to an empty string because the client router knows how to tolerate\n  // it (treating it as an MPA navigation). The only time this function wouldn't generate flight data\n  // is for server actions, if the server action handler instructs this function to skip it. When the server\n  // action reducer sees a falsy value, it'll simply resolve the action with no data.\n  let flightData: FlightData = ''\n\n  const {\n    componentMod: {\n      tree: loaderTree,\n      createServerSearchParamsForMetadata,\n      createServerParamsForMetadata,\n      createMetadataComponents,\n      MetadataBoundary,\n      ViewportBoundary,\n    },\n    getDynamicParamFromSegment,\n    appUsingSizeAdjustment,\n    query,\n    requestId,\n    flightRouterState,\n    workStore,\n    url,\n  } = ctx\n\n  if (!options?.skipFlight) {\n    const preloadCallbacks: PreloadCallbacks = []\n\n    const searchParams = createServerSearchParamsForMetadata(query, workStore)\n    const [MetadataTree, getMetadataReady] = createMetadataComponents({\n      tree: loaderTree,\n      searchParams,\n      metadataContext: createTrackedMetadataContext(\n        url.pathname,\n        ctx.renderOpts,\n        workStore\n      ),\n      getDynamicParamFromSegment,\n      appUsingSizeAdjustment,\n      createServerParamsForMetadata,\n      workStore,\n      MetadataBoundary,\n      ViewportBoundary,\n    })\n    flightData = (\n      await walkTreeWithFlightRouterState({\n        ctx,\n        createSegmentPath: (child) => child,\n        loaderTreeToFilter: loaderTree,\n        parentParams: {},\n        flightRouterState,\n        isFirst: true,\n        // For flight, render metadata inside leaf page\n        rscPayloadHead: (\n          <React.Fragment key={flightDataPathHeadKey}>\n            <NonIndex ctx={ctx} />\n            {/* Adding requestId as react key to make metadata remount for each render */}\n            <MetadataTree key={requestId} />\n          </React.Fragment>\n        ),\n        injectedCSS: new Set(),\n        injectedJS: new Set(),\n        injectedFontPreloadTags: new Set(),\n        rootLayoutIncluded: false,\n        getMetadataReady,\n        preloadCallbacks,\n      })\n    ).map((path) => path.slice(1)) // remove the '' (root) segment\n  }\n\n  // If we have an action result, then this is a server action response.\n  // We can rely on this because `ActionResult` will always be a promise, even if\n  // the result is falsey.\n  if (options?.actionResult) {\n    return {\n      a: options.actionResult,\n      f: flightData,\n      b: ctx.renderOpts.buildId,\n    }\n  }\n\n  // Otherwise, it's a regular RSC response.\n  return {\n    b: ctx.renderOpts.buildId,\n    f: flightData,\n    S: workStore.isStaticGeneration,\n  }\n}\n\nfunction createErrorContext(\n  ctx: AppRenderContext,\n  renderSource: RequestErrorContext['renderSource']\n): RequestErrorContext {\n  return {\n    routerKind: 'App Router',\n    routePath: ctx.pagePath,\n    routeType: ctx.isAction ? 'action' : 'render',\n    renderSource,\n    revalidateReason: getRevalidateReason(ctx.workStore),\n  }\n}\n/**\n * Produces a RenderResult containing the Flight data for the given request. See\n * `generateDynamicRSCPayload` for information on the contents of the render result.\n */\nasync function generateDynamicFlightRenderResult(\n  req: BaseNextRequest,\n  ctx: AppRenderContext,\n  requestStore: RequestStore,\n  options?: {\n    actionResult: ActionResult\n    skipFlight: boolean\n    componentTree?: CacheNodeSeedData\n    preloadCallbacks?: PreloadCallbacks\n    temporaryReferences?: WeakMap<any, string>\n  }\n): Promise<RenderResult> {\n  const renderOpts = ctx.renderOpts\n\n  function onFlightDataRenderError(err: DigestedError) {\n    return renderOpts.onInstrumentationRequestError?.(\n      err,\n      req,\n      createErrorContext(ctx, 'react-server-components-payload')\n    )\n  }\n  const onError = createFlightReactServerErrorHandler(\n    !!renderOpts.dev,\n    onFlightDataRenderError\n  )\n\n  const RSCPayload: RSCPayload & {\n    /** Only available during dynamicIO development builds. Used for logging errors. */\n    _validation?: Promise<React.ReactNode>\n  } = await workUnitAsyncStorage.run(\n    requestStore,\n    generateDynamicRSCPayload,\n    ctx,\n    options\n  )\n\n  if (\n    // We only want this behavior when running `next dev`\n    renderOpts.dev &&\n    // We only want this behavior when we have React's dev builds available\n    process.env.NODE_ENV === 'development' &&\n    // We only have a Prerender environment for projects opted into dynamicIO\n    renderOpts.experimental.dynamicIO\n  ) {\n    const [resolveValidation, validationOutlet] = createValidationOutlet()\n    RSCPayload._validation = validationOutlet\n\n    spawnDynamicValidationInDev(\n      resolveValidation,\n      ctx.componentMod.tree,\n      ctx,\n      false,\n      ctx.clientReferenceManifest,\n      ctx.workStore.route,\n      requestStore\n    ).catch(resolveValidation) // avoid unhandled rejections and a forever hanging promise\n  }\n\n  // For app dir, use the bundled version of Flight server renderer (renderToReadableStream)\n  // which contains the subset React.\n  const flightReadableStream = workUnitAsyncStorage.run(\n    requestStore,\n    ctx.componentMod.renderToReadableStream,\n    RSCPayload,\n    ctx.clientReferenceManifest.clientModules,\n    {\n      onError,\n      temporaryReferences: options?.temporaryReferences,\n    }\n  )\n\n  return new FlightRenderResult(flightReadableStream, {\n    fetchMetrics: ctx.workStore.fetchMetrics,\n  })\n}\n\n/**\n * Performs a \"warmup\" render of the RSC payload for a given route. This function is called by the server\n * prior to an actual render request in Dev mode only. It's purpose is to fill caches so the actual render\n * can accurately log activity in the right render context (Prerender vs Render).\n *\n * At the moment this implementation is mostly a fork of generateDynamicFlightRenderResult\n */\nasync function warmupDevRender(\n  req: BaseNextRequest,\n  ctx: AppRenderContext\n): Promise<RenderResult> {\n  const renderOpts = ctx.renderOpts\n  if (!renderOpts.dev) {\n    throw new InvariantError(\n      'generateDynamicFlightRenderResult should never be called in `next start` mode.'\n    )\n  }\n\n  function onFlightDataRenderError(err: DigestedError) {\n    return renderOpts.onInstrumentationRequestError?.(\n      err,\n      req,\n      createErrorContext(ctx, 'react-server-components-payload')\n    )\n  }\n  const onError = createFlightReactServerErrorHandler(\n    true,\n    onFlightDataRenderError\n  )\n\n  // We're doing a dev warmup, so we should create a new resume data cache so\n  // we can fill it.\n  const prerenderResumeDataCache = createPrerenderResumeDataCache()\n\n  const renderController = new AbortController()\n  const prerenderController = new AbortController()\n  const cacheSignal = new CacheSignal()\n  const prerenderStore: PrerenderStore = {\n    type: 'prerender',\n    phase: 'render',\n    implicitTags: [],\n    renderSignal: renderController.signal,\n    controller: prerenderController,\n    cacheSignal,\n    dynamicTracking: null,\n    revalidate: INFINITE_CACHE,\n    expire: INFINITE_CACHE,\n    stale: INFINITE_CACHE,\n    tags: [],\n    prerenderResumeDataCache,\n  }\n\n  const rscPayload = await workUnitAsyncStorage.run(\n    prerenderStore,\n    generateDynamicRSCPayload,\n    ctx\n  )\n\n  // For app dir, use the bundled version of Flight server renderer (renderToReadableStream)\n  // which contains the subset React.\n  workUnitAsyncStorage.run(\n    prerenderStore,\n    ctx.componentMod.renderToReadableStream,\n    rscPayload,\n    ctx.clientReferenceManifest.clientModules,\n    {\n      onError,\n      signal: renderController.signal,\n    }\n  )\n\n  // Wait for all caches to be finished filling\n  await cacheSignal.cacheReady()\n  // We unset the cache so any late over-run renders aren't able to write into this cache\n  prerenderStore.prerenderResumeDataCache = null\n  // Abort the render\n  renderController.abort()\n\n  // We don't really want to return a result here but the stack of functions\n  // that calls into renderToHTML... expects a result. We should refactor this to\n  // lift the warmup pathway outside of renderToHTML... but for now this suffices\n  return new FlightRenderResult('', {\n    fetchMetrics: ctx.workStore.fetchMetrics,\n    devRenderResumeDataCache: createRenderResumeDataCache(\n      prerenderResumeDataCache\n    ),\n  })\n}\n\n/**\n * Crawlers will inadvertently think the canonicalUrl in the RSC payload should be crawled\n * when our intention is to just seed the router state with the current URL.\n * This function splits up the pathname so that we can later join it on\n * when we're ready to consume the path.\n */\nfunction prepareInitialCanonicalUrl(url: RequestStore['url']) {\n  return (url.pathname + url.search).split('/')\n}\n\n// This is the data necessary to render <AppRouter /> when no SSR errors are encountered\nasync function getRSCPayload(\n  tree: LoaderTree,\n  ctx: AppRenderContext,\n  is404: boolean\n): Promise<InitialRSCPayload & { P: React.ReactNode }> {\n  const injectedCSS = new Set<string>()\n  const injectedJS = new Set<string>()\n  const injectedFontPreloadTags = new Set<string>()\n  let missingSlots: Set<string> | undefined\n\n  // We only track missing parallel slots in development\n  if (process.env.NODE_ENV === 'development') {\n    missingSlots = new Set<string>()\n  }\n\n  const {\n    getDynamicParamFromSegment,\n    query,\n    appUsingSizeAdjustment,\n    componentMod: {\n      GlobalError,\n      createServerSearchParamsForMetadata,\n      createServerParamsForMetadata,\n      createMetadataComponents,\n      MetadataBoundary,\n      ViewportBoundary,\n    },\n    url,\n    workStore,\n  } = ctx\n\n  const initialTree = createFlightRouterStateFromLoaderTree(\n    tree,\n    getDynamicParamFromSegment,\n    query\n  )\n\n  const searchParams = createServerSearchParamsForMetadata(query, workStore)\n  const [MetadataTree, getMetadataReady] = createMetadataComponents({\n    tree,\n    errorType: is404 ? 'not-found' : undefined,\n    searchParams,\n    metadataContext: createTrackedMetadataContext(\n      url.pathname,\n      ctx.renderOpts,\n      workStore\n    ),\n    getDynamicParamFromSegment,\n    appUsingSizeAdjustment,\n    createServerParamsForMetadata,\n    workStore,\n    MetadataBoundary,\n    ViewportBoundary,\n  })\n\n  const preloadCallbacks: PreloadCallbacks = []\n\n  const seedData = await createComponentTree({\n    ctx,\n    createSegmentPath: (child) => child,\n    loaderTree: tree,\n    parentParams: {},\n    firstItem: true,\n    injectedCSS,\n    injectedJS,\n    injectedFontPreloadTags,\n    rootLayoutIncluded: false,\n    getMetadataReady,\n    missingSlots,\n    preloadCallbacks,\n    authInterrupts: ctx.renderOpts.experimental.authInterrupts,\n  })\n\n  // When the `vary` response header is present with `Next-URL`, that means there's a chance\n  // it could respond differently if there's an interception route. We provide this information\n  // to `AppRouter` so that it can properly seed the prefetch cache with a prefix, if needed.\n  const varyHeader = ctx.res.getHeader('vary')\n  const couldBeIntercepted =\n    typeof varyHeader === 'string' && varyHeader.includes(NEXT_URL)\n\n  const initialHead = (\n    <React.Fragment key={flightDataPathHeadKey}>\n      <NonIndex ctx={ctx} />\n      {/* Adding requestId as react key to make metadata remount for each render */}\n      <MetadataTree key={ctx.requestId} />\n    </React.Fragment>\n  )\n\n  const globalErrorStyles = await getGlobalErrorStyles(tree, ctx)\n\n  // Assume the head we're rendering contains only partial data if PPR is\n  // enabled and this is a statically generated response. This is used by the\n  // client Segment Cache after a prefetch to determine if it can skip the\n  // second request to fill in the dynamic data.\n  //\n  // See similar comment in create-component-tree.tsx for more context.\n  const isPossiblyPartialHead =\n    workStore.isStaticGeneration &&\n    ctx.renderOpts.experimental.isRoutePPREnabled === true\n\n  return {\n    // See the comment above the `Preloads` component (below) for why this is part of the payload\n    P: <Preloads preloadCallbacks={preloadCallbacks} />,\n    b: ctx.renderOpts.buildId,\n    p: ctx.assetPrefix,\n    c: prepareInitialCanonicalUrl(url),\n    i: !!couldBeIntercepted,\n    f: [\n      [\n        initialTree,\n        seedData,\n        initialHead,\n        isPossiblyPartialHead,\n      ] as FlightDataPath,\n    ],\n    m: missingSlots,\n    G: [GlobalError, globalErrorStyles],\n    s: typeof ctx.renderOpts.postponed === 'string',\n    S: workStore.isStaticGeneration,\n  }\n}\n\n/**\n * Preload calls (such as `ReactDOM.preloadStyle` and `ReactDOM.preloadFont`) need to be called during rendering\n * in order to create the appropriate preload tags in the DOM, otherwise they're a no-op. Since we invoke\n * renderToReadableStream with a function that returns component props rather than a component itself, we use\n * this component to \"render  \" the preload calls.\n */\nfunction Preloads({ preloadCallbacks }: { preloadCallbacks: Function[] }) {\n  preloadCallbacks.forEach((preloadFn) => preloadFn())\n  return null\n}\n\n// This is the data necessary to render <AppRouter /> when an error state is triggered\nasync function getErrorRSCPayload(\n  tree: LoaderTree,\n  ctx: AppRenderContext,\n  errorType: MetadataErrorType | 'redirect' | undefined\n) {\n  const {\n    getDynamicParamFromSegment,\n    query,\n    appUsingSizeAdjustment,\n    componentMod: {\n      GlobalError,\n      createServerSearchParamsForMetadata,\n      createServerParamsForMetadata,\n      createMetadataComponents,\n      MetadataBoundary,\n      ViewportBoundary,\n    },\n    url,\n    requestId,\n    workStore,\n  } = ctx\n\n  const searchParams = createServerSearchParamsForMetadata(query, workStore)\n  const [MetadataTree] = createMetadataComponents({\n    tree,\n    searchParams,\n    // We create an untracked metadata context here because we can't postpone\n    // again during the error render.\n    metadataContext: createMetadataContext(url.pathname, ctx.renderOpts),\n    errorType,\n    getDynamicParamFromSegment,\n    appUsingSizeAdjustment,\n    createServerParamsForMetadata,\n    workStore,\n    MetadataBoundary,\n    ViewportBoundary,\n  })\n\n  const initialHead = (\n    <React.Fragment key={flightDataPathHeadKey}>\n      <NonIndex ctx={ctx} />\n      {/* Adding requestId as react key to make metadata remount for each render */}\n      <MetadataTree key={requestId} />\n      {process.env.NODE_ENV === 'development' && (\n        <meta name=\"next-error\" content=\"not-found\" />\n      )}\n    </React.Fragment>\n  )\n\n  const initialTree = createFlightRouterStateFromLoaderTree(\n    tree,\n    getDynamicParamFromSegment,\n    query\n  )\n\n  // For metadata notFound error there's no global not found boundary on top\n  // so we create a not found page with AppRouter\n  const initialSeedData: CacheNodeSeedData = [\n    initialTree[0],\n    <html id=\"__next_error__\">\n      <head></head>\n      <body></body>\n    </html>,\n    {},\n    null,\n    false,\n  ]\n\n  const globalErrorStyles = await getGlobalErrorStyles(tree, ctx)\n\n  const isPossiblyPartialHead =\n    workStore.isStaticGeneration &&\n    ctx.renderOpts.experimental.isRoutePPREnabled === true\n\n  return {\n    b: ctx.renderOpts.buildId,\n    p: ctx.assetPrefix,\n    c: prepareInitialCanonicalUrl(url),\n    m: undefined,\n    i: false,\n    f: [\n      [\n        initialTree,\n        initialSeedData,\n        initialHead,\n        isPossiblyPartialHead,\n      ] as FlightDataPath,\n    ],\n    G: [GlobalError, globalErrorStyles],\n    s: typeof ctx.renderOpts.postponed === 'string',\n    S: workStore.isStaticGeneration,\n  } satisfies InitialRSCPayload\n}\n\n// This component must run in an SSR context. It will render the RSC root component\nfunction App<T>({\n  reactServerStream,\n  preinitScripts,\n  clientReferenceManifest,\n  nonce,\n  ServerInsertedHTMLProvider,\n}: {\n  reactServerStream: BinaryStreamOf<T>\n  preinitScripts: () => void\n  clientReferenceManifest: NonNullable<RenderOpts['clientReferenceManifest']>\n  ServerInsertedHTMLProvider: React.ComponentType<{ children: JSX.Element }>\n  nonce?: string\n}): JSX.Element {\n  preinitScripts()\n  const response = React.use(\n    useFlightStream<InitialRSCPayload>(\n      reactServerStream,\n      clientReferenceManifest,\n      nonce\n    )\n  )\n\n  const initialState = createInitialRouterState({\n    initialFlightData: response.f,\n    initialCanonicalUrlParts: response.c,\n    // location and initialParallelRoutes are not initialized in the SSR render\n    // they are set to an empty map and window.location, respectively during hydration\n    initialParallelRoutes: null!,\n    location: null,\n    couldBeIntercepted: response.i,\n    postponed: response.s,\n    prerendered: response.S,\n  })\n\n  const actionQueue = createMutableActionQueue(initialState)\n\n  const { HeadManagerContext } =\n    require('../../shared/lib/head-manager-context.shared-runtime') as typeof import('../../shared/lib/head-manager-context.shared-runtime')\n\n  return (\n    <HeadManagerContext.Provider\n      value={{\n        appDir: true,\n        nonce,\n      }}\n    >\n      <ServerInsertedHTMLProvider>\n        <AppRouter\n          actionQueue={actionQueue}\n          globalErrorComponentAndStyles={response.G}\n          assetPrefix={response.p}\n        />\n      </ServerInsertedHTMLProvider>\n    </HeadManagerContext.Provider>\n  )\n}\n\n// @TODO our error stream should be probably just use the same root component. But it was previously\n// different I don't want to figure out if that is meaningful at this time so just keeping the behavior\n// consistent for now.\nfunction AppWithoutContext<T>({\n  reactServerStream,\n  preinitScripts,\n  clientReferenceManifest,\n  nonce,\n}: {\n  reactServerStream: BinaryStreamOf<T>\n  preinitScripts: () => void\n  clientReferenceManifest: NonNullable<RenderOpts['clientReferenceManifest']>\n  nonce?: string\n}): JSX.Element {\n  preinitScripts()\n  const response = React.use(\n    useFlightStream<InitialRSCPayload>(\n      reactServerStream,\n      clientReferenceManifest,\n      nonce\n    )\n  )\n\n  const initialState = createInitialRouterState({\n    initialFlightData: response.f,\n    initialCanonicalUrlParts: response.c,\n    // location and initialParallelRoutes are not initialized in the SSR render\n    // they are set to an empty map and window.location, respectively during hydration\n    initialParallelRoutes: null!,\n    location: null,\n    couldBeIntercepted: response.i,\n    postponed: response.s,\n    prerendered: response.S,\n  })\n\n  const actionQueue = createMutableActionQueue(initialState)\n\n  return (\n    <AppRouter\n      actionQueue={actionQueue}\n      globalErrorComponentAndStyles={response.G}\n      assetPrefix={response.p}\n    />\n  )\n}\n\n// We use a trick with TS Generics to branch streams with a type so we can\n// consume the parsed value of a Readable Stream if it was constructed with a\n// certain object shape. The generic type is not used directly in the type so it\n// requires a disabling of the eslint rule disallowing unused vars\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport type BinaryStreamOf<T> = ReadableStream<Uint8Array>\n\nasync function renderToHTMLOrFlightImpl(\n  req: BaseNextRequest,\n  res: BaseNextResponse,\n  url: ReturnType<typeof parseRelativeUrl>,\n  pagePath: string,\n  query: NextParsedUrlQuery,\n  renderOpts: RenderOpts,\n  workStore: WorkStore,\n  parsedRequestHeaders: ParsedRequestHeaders,\n  requestEndedState: { ended?: boolean },\n  postponedState: PostponedState | null,\n  implicitTags: Array<string>,\n  serverComponentsHmrCache: ServerComponentsHmrCache | undefined\n) {\n  const isNotFoundPath = pagePath === '/404'\n  if (isNotFoundPath) {\n    res.statusCode = 404\n  }\n\n  // A unique request timestamp used by development to ensure that it's\n  // consistent and won't change during this request. This is important to\n  // avoid that resources can be deduped by React Float if the same resource is\n  // rendered or preloaded multiple times: `<link href=\"a.css?v={Date.now()}\"/>`.\n  const requestTimestamp = Date.now()\n\n  const {\n    serverActionsManifest,\n    ComponentMod,\n    nextFontManifest,\n    serverActions,\n    assetPrefix = '',\n    enableTainting,\n  } = renderOpts\n\n  // We need to expose the bundled `require` API globally for\n  // react-server-dom-webpack. This is a hack until we find a better way.\n  if (ComponentMod.__next_app__) {\n    const instrumented = wrapClientComponentLoader(ComponentMod)\n    // @ts-ignore\n    globalThis.__next_require__ = instrumented.require\n    // When we are prerendering if there is a cacheSignal for tracking\n    // cache reads we wrap the loadChunk in this tracking. This allows us\n    // to treat chunk loading with similar semantics as cache reads to avoid\n    // async loading chunks from causing a prerender to abort too early.\n    // @ts-ignore\n    globalThis.__next_chunk_load__ = (...args: Array<any>) => {\n      const loadingChunk = instrumented.loadChunk(...args)\n      trackChunkLoading(loadingChunk)\n      return loadingChunk\n    }\n  }\n\n  if (process.env.NODE_ENV === 'development') {\n    // reset isr status at start of request\n    const { pathname } = new URL(req.url || '/', 'http://n')\n    renderOpts.setAppIsrStatus?.(pathname, null)\n  }\n\n  if (\n    // The type check here ensures that `req` is correctly typed, and the\n    // environment variable check provides dead code elimination.\n    process.env.NEXT_RUNTIME !== 'edge' &&\n    isNodeNextRequest(req)\n  ) {\n    req.originalRequest.on('end', () => {\n      requestEndedState.ended = true\n\n      if ('performance' in globalThis) {\n        const metrics = getClientComponentLoaderMetrics({ reset: true })\n        if (metrics) {\n          getTracer()\n            .startSpan(NextNodeServerSpan.clientComponentLoading, {\n              startTime: metrics.clientComponentLoadStart,\n              attributes: {\n                'next.clientComponentLoadCount':\n                  metrics.clientComponentLoadCount,\n                'next.span_type': NextNodeServerSpan.clientComponentLoading,\n              },\n            })\n            .end(\n              metrics.clientComponentLoadStart +\n                metrics.clientComponentLoadTimes\n            )\n        }\n      }\n    })\n  }\n\n  const metadata: AppPageRenderResultMetadata = {}\n\n  const appUsingSizeAdjustment = !!nextFontManifest?.appUsingSizeAdjust\n\n  // TODO: fix this typescript\n  const clientReferenceManifest = renderOpts.clientReferenceManifest!\n\n  const serverModuleMap = createServerModuleMap({ serverActionsManifest })\n\n  setReferenceManifestsSingleton({\n    page: workStore.page,\n    clientReferenceManifest,\n    serverActionsManifest,\n    serverModuleMap,\n  })\n\n  ComponentMod.patchFetch()\n\n  // Pull out the hooks/references from the component.\n  const { tree: loaderTree, taintObjectReference } = ComponentMod\n\n  if (enableTainting) {\n    taintObjectReference(\n      'Do not pass process.env to client components since it will leak sensitive data',\n      process.env\n    )\n  }\n\n  workStore.fetchMetrics = []\n  metadata.fetchMetrics = workStore.fetchMetrics\n\n  // don't modify original query object\n  query = { ...query }\n  stripInternalQueries(query)\n\n  const {\n    flightRouterState,\n    isPrefetchRequest,\n    isRSCRequest,\n    isDevWarmupRequest,\n    isHmrRefresh,\n    nonce,\n  } = parsedRequestHeaders\n\n  /**\n   * The metadata items array created in next-app-loader with all relevant information\n   * that we need to resolve the final metadata.\n   */\n  let requestId: string\n\n  if (process.env.NEXT_RUNTIME === 'edge') {\n    requestId = crypto.randomUUID()\n  } else {\n    requestId = require('next/dist/compiled/nanoid').nanoid()\n  }\n\n  /**\n   * Dynamic parameters. E.g. when you visit `/dashboard/vercel` which is rendered by `/dashboard/[slug]` the value will be {\"slug\": \"vercel\"}.\n   */\n  const params = renderOpts.params ?? {}\n\n  const { isStaticGeneration, fallbackRouteParams } = workStore\n\n  const getDynamicParamFromSegment = makeGetDynamicParamFromSegment(\n    params,\n    pagePath,\n    fallbackRouteParams\n  )\n\n  const isActionRequest = getServerActionRequestMetadata(req).isServerAction\n\n  const ctx: AppRenderContext = {\n    componentMod: ComponentMod,\n    url,\n    renderOpts,\n    workStore,\n    parsedRequestHeaders,\n    getDynamicParamFromSegment,\n    query,\n    isPrefetch: isPrefetchRequest,\n    isAction: isActionRequest,\n    requestTimestamp,\n    appUsingSizeAdjustment,\n    flightRouterState,\n    requestId,\n    pagePath,\n    clientReferenceManifest,\n    assetPrefix,\n    isNotFoundPath,\n    nonce,\n    res,\n  }\n\n  getTracer().setRootSpanAttribute('next.route', pagePath)\n\n  if (isStaticGeneration) {\n    // We're either building or revalidating. In either case we need to\n    // prerender our page rather than render it.\n    const prerenderToStreamWithTracing = getTracer().wrap(\n      AppRenderSpan.getBodyResult,\n      {\n        spanName: `prerender route (app) ${pagePath}`,\n        attributes: {\n          'next.route': pagePath,\n        },\n      },\n      prerenderToStream\n    )\n\n    const response = await prerenderToStreamWithTracing(\n      req,\n      res,\n      ctx,\n      metadata,\n      workStore,\n      loaderTree,\n      implicitTags\n    )\n\n    // If we're debugging partial prerendering, print all the dynamic API accesses\n    // that occurred during the render.\n    // @TODO move into renderToStream function\n    if (\n      response.dynamicAccess &&\n      accessedDynamicData(response.dynamicAccess) &&\n      renderOpts.isDebugDynamicAccesses\n    ) {\n      warn('The following dynamic usage was detected:')\n      for (const access of formatDynamicAPIAccesses(response.dynamicAccess)) {\n        warn(access)\n      }\n    }\n\n    // If we encountered any unexpected errors during build we fail the\n    // prerendering phase and the build.\n    if (response.digestErrorsMap.size) {\n      const buildFailingError = response.digestErrorsMap.values().next().value\n      if (buildFailingError) throw buildFailingError\n    }\n    // Pick first userland SSR error, which is also not a RSC error.\n    if (response.ssrErrors.length) {\n      const buildFailingError = response.ssrErrors.find((err) =>\n        isUserLandError(err)\n      )\n      if (buildFailingError) throw buildFailingError\n    }\n\n    const options: RenderResultOptions = {\n      metadata,\n    }\n    // If we have pending revalidates, wait until they are all resolved.\n    if (\n      workStore.pendingRevalidates ||\n      workStore.pendingRevalidateWrites ||\n      workStore.revalidatedTags\n    ) {\n      options.waitUntil = Promise.all([\n        workStore.incrementalCache?.revalidateTag(\n          workStore.revalidatedTags || []\n        ),\n        ...Object.values(workStore.pendingRevalidates || {}),\n        ...(workStore.pendingRevalidateWrites || []),\n      ])\n    }\n\n    if (response.collectedTags) {\n      metadata.fetchTags = response.collectedTags.join(',')\n    }\n\n    // Let the client router know how long to keep the cached entry around.\n    const staleHeader = String(response.collectedStale)\n    res.setHeader(NEXT_ROUTER_STALE_TIME_HEADER, staleHeader)\n    metadata.headers ??= {}\n    metadata.headers[NEXT_ROUTER_STALE_TIME_HEADER] = staleHeader\n\n    // If force static is specifically set to false, we should not revalidate\n    // the page.\n    if (workStore.forceStatic === false || response.collectedRevalidate === 0) {\n      metadata.revalidate = 0\n    } else {\n      // Copy the revalidation value onto the render result metadata.\n      metadata.revalidate =\n        response.collectedRevalidate >= INFINITE_CACHE\n          ? false\n          : response.collectedRevalidate\n    }\n\n    // provide bailout info for debugging\n    if (metadata.revalidate === 0) {\n      metadata.staticBailoutInfo = {\n        description: workStore.dynamicUsageDescription,\n        stack: workStore.dynamicUsageStack,\n      }\n    }\n\n    return new RenderResult(await streamToString(response.stream), options)\n  } else {\n    // We're rendering dynamically\n    const renderResumeDataCache =\n      renderOpts.devRenderResumeDataCache ??\n      postponedState?.renderResumeDataCache\n\n    const requestStore = createRequestStoreForRender(\n      req,\n      res,\n      url,\n      implicitTags,\n      renderOpts.onUpdateCookies,\n      renderOpts.previewProps,\n      isHmrRefresh,\n      serverComponentsHmrCache,\n      renderResumeDataCache\n    )\n\n    if (\n      process.env.NODE_ENV === 'development' &&\n      renderOpts.setAppIsrStatus &&\n      // The type check here ensures that `req` is correctly typed, and the\n      // environment variable check provides dead code elimination.\n      process.env.NEXT_RUNTIME !== 'edge' &&\n      isNodeNextRequest(req) &&\n      !isDevWarmupRequest\n    ) {\n      const setAppIsrStatus = renderOpts.setAppIsrStatus\n      req.originalRequest.on('end', () => {\n        if (!requestStore.usedDynamic && !workStore.forceDynamic) {\n          // only node can be ISR so we only need to update the status here\n          const { pathname } = new URL(req.url || '/', 'http://n')\n          setAppIsrStatus(pathname, true)\n        }\n      })\n    }\n\n    if (isDevWarmupRequest) {\n      return warmupDevRender(req, ctx)\n    } else if (isRSCRequest) {\n      return generateDynamicFlightRenderResult(req, ctx, requestStore)\n    }\n\n    const renderToStreamWithTracing = getTracer().wrap(\n      AppRenderSpan.getBodyResult,\n      {\n        spanName: `render route (app) ${pagePath}`,\n        attributes: {\n          'next.route': pagePath,\n        },\n      },\n      renderToStream\n    )\n\n    let formState: null | any = null\n    if (isActionRequest) {\n      // For action requests, we handle them differently with a special render result.\n      const actionRequestResult = await handleAction({\n        req,\n        res,\n        ComponentMod,\n        serverModuleMap,\n        generateFlight: generateDynamicFlightRenderResult,\n        workStore,\n        requestStore,\n        serverActions,\n        ctx,\n      })\n\n      if (actionRequestResult) {\n        if (actionRequestResult.type === 'not-found') {\n          const notFoundLoaderTree = createNotFoundLoaderTree(loaderTree)\n          res.statusCode = 404\n          const stream = await renderToStreamWithTracing(\n            requestStore,\n            req,\n            res,\n            ctx,\n            workStore,\n            notFoundLoaderTree,\n            formState,\n            postponedState\n          )\n\n          return new RenderResult(stream, { metadata })\n        } else if (actionRequestResult.type === 'done') {\n          if (actionRequestResult.result) {\n            actionRequestResult.result.assignMetadata(metadata)\n            return actionRequestResult.result\n          } else if (actionRequestResult.formState) {\n            formState = actionRequestResult.formState\n          }\n        }\n      }\n    }\n\n    const options: RenderResultOptions = {\n      metadata,\n    }\n\n    const stream = await renderToStreamWithTracing(\n      requestStore,\n      req,\n      res,\n      ctx,\n      workStore,\n      loaderTree,\n      formState,\n      postponedState\n    )\n\n    // If we have pending revalidates, wait until they are all resolved.\n    if (\n      workStore.pendingRevalidates ||\n      workStore.pendingRevalidateWrites ||\n      workStore.revalidatedTags\n    ) {\n      options.waitUntil = Promise.all([\n        workStore.incrementalCache?.revalidateTag(\n          workStore.revalidatedTags || []\n        ),\n        ...Object.values(workStore.pendingRevalidates || {}),\n        ...(workStore.pendingRevalidateWrites || []),\n      ])\n    }\n\n    // Create the new render result for the response.\n    return new RenderResult(stream, options)\n  }\n}\n\nexport type AppPageRender = (\n  req: BaseNextRequest,\n  res: BaseNextResponse,\n  pagePath: string,\n  query: NextParsedUrlQuery,\n  fallbackRouteParams: FallbackRouteParams | null,\n  renderOpts: RenderOpts,\n  serverComponentsHmrCache: ServerComponentsHmrCache | undefined,\n  isDevWarmup: boolean\n) => Promise<RenderResult<AppPageRenderResultMetadata>>\n\nexport const renderToHTMLOrFlight: AppPageRender = (\n  req,\n  res,\n  pagePath,\n  query,\n  fallbackRouteParams,\n  renderOpts,\n  serverComponentsHmrCache,\n  isDevWarmup\n) => {\n  if (!req.url) {\n    throw new Error('Invalid URL')\n  }\n\n  const url = parseRelativeUrl(req.url, undefined, false)\n\n  // We read these values from the request object as, in certain cases,\n  // base-server will strip them to opt into different rendering behavior.\n  const parsedRequestHeaders = parseRequestHeaders(req.headers, {\n    isDevWarmup,\n    isRoutePPREnabled: renderOpts.experimental.isRoutePPREnabled === true,\n  })\n\n  const { isPrefetchRequest } = parsedRequestHeaders\n\n  const requestEndedState = { ended: false }\n  let postponedState: PostponedState | null = null\n\n  // If provided, the postpone state should be parsed so it can be provided to\n  // React.\n  if (typeof renderOpts.postponed === 'string') {\n    if (fallbackRouteParams) {\n      throw new InvariantError(\n        'postponed state should not be provided when fallback params are provided'\n      )\n    }\n\n    postponedState = parsePostponedState(\n      renderOpts.postponed,\n      renderOpts.params\n    )\n  }\n\n  if (\n    postponedState?.renderResumeDataCache &&\n    renderOpts.devRenderResumeDataCache\n  ) {\n    throw new InvariantError(\n      'postponed state and dev warmup immutable resume data cache should not be provided together'\n    )\n  }\n\n  const implicitTags = getImplicitTags(\n    renderOpts.routeModule.definition.page,\n    url,\n    fallbackRouteParams\n  )\n\n  const workStore = createWorkStore({\n    page: renderOpts.routeModule.definition.page,\n    fallbackRouteParams,\n    renderOpts,\n    requestEndedState,\n    // @TODO move to workUnitStore of type Request\n    isPrefetchRequest,\n  })\n\n  return workAsyncStorage.run(\n    workStore,\n    // The function to run\n    renderToHTMLOrFlightImpl,\n    // all of it's args\n    req,\n    res,\n    url,\n    pagePath,\n    query,\n    renderOpts,\n    workStore,\n    parsedRequestHeaders,\n    requestEndedState,\n    postponedState,\n    implicitTags,\n    serverComponentsHmrCache\n  )\n}\n\nasync function renderToStream(\n  requestStore: RequestStore,\n  req: BaseNextRequest,\n  res: BaseNextResponse,\n  ctx: AppRenderContext,\n  workStore: WorkStore,\n  tree: LoaderTree,\n  formState: any,\n  postponedState: PostponedState | null\n): Promise<ReadableStream<Uint8Array>> {\n  const renderOpts = ctx.renderOpts\n  const ComponentMod = renderOpts.ComponentMod\n  // TODO: fix this typescript\n  const clientReferenceManifest = renderOpts.clientReferenceManifest!\n\n  const { ServerInsertedHTMLProvider, renderServerInsertedHTML } =\n    createServerInsertedHTML()\n\n  const tracingMetadata = getTracedMetadata(\n    getTracer().getTracePropagationData(),\n    renderOpts.experimental.clientTraceMetadata\n  )\n\n  const polyfills: JSX.IntrinsicElements['script'][] =\n    renderOpts.buildManifest.polyfillFiles\n      .filter(\n        (polyfill) =>\n          polyfill.endsWith('.js') && !polyfill.endsWith('.module.js')\n      )\n      .map((polyfill) => ({\n        src: `${ctx.assetPrefix}/_next/${polyfill}${getAssetQueryString(\n          ctx,\n          false\n        )}`,\n        integrity: renderOpts.subresourceIntegrityManifest?.[polyfill],\n        crossOrigin: renderOpts.crossOrigin,\n        noModule: true,\n        nonce: ctx.nonce,\n      }))\n\n  const [preinitScripts, bootstrapScript] = getRequiredScripts(\n    renderOpts.buildManifest,\n    // Why is assetPrefix optional on renderOpts?\n    // @TODO make it default empty string on renderOpts and get rid of it from ctx\n    ctx.assetPrefix,\n    renderOpts.crossOrigin,\n    renderOpts.subresourceIntegrityManifest,\n    getAssetQueryString(ctx, true),\n    ctx.nonce,\n    renderOpts.page\n  )\n\n  const reactServerErrorsByDigest: Map<string, DigestedError> = new Map()\n  const silenceLogger = false\n  function onHTMLRenderRSCError(err: DigestedError) {\n    return renderOpts.onInstrumentationRequestError?.(\n      err,\n      req,\n      createErrorContext(ctx, 'react-server-components')\n    )\n  }\n  const serverComponentsErrorHandler = createHTMLReactServerErrorHandler(\n    !!renderOpts.dev,\n    !!renderOpts.nextExport,\n    reactServerErrorsByDigest,\n    silenceLogger,\n    onHTMLRenderRSCError\n  )\n\n  function onHTMLRenderSSRError(err: DigestedError) {\n    return renderOpts.onInstrumentationRequestError?.(\n      err,\n      req,\n      createErrorContext(ctx, 'server-rendering')\n    )\n  }\n\n  const allCapturedErrors: Array<unknown> = []\n  const htmlRendererErrorHandler = createHTMLErrorHandler(\n    !!renderOpts.dev,\n    !!renderOpts.nextExport,\n    reactServerErrorsByDigest,\n    allCapturedErrors,\n    silenceLogger,\n    onHTMLRenderSSRError\n  )\n\n  let reactServerResult: null | ReactServerResult = null\n\n  const setHeader = res.setHeader.bind(res)\n\n  try {\n    if (\n      // We only want this behavior when running `next dev`\n      renderOpts.dev &&\n      // We only want this behavior when we have React's dev builds available\n      process.env.NODE_ENV === 'development' &&\n      // Edge routes never prerender so we don't have a Prerender environment for anything in edge runtime\n      process.env.NEXT_RUNTIME !== 'edge' &&\n      // We only have a Prerender environment for projects opted into dynamicIO\n      renderOpts.experimental.dynamicIO\n    ) {\n      // This is a dynamic render. We don't do dynamic tracking because we're not prerendering\n      const RSCPayload: InitialRSCPayload & {\n        /** Only available during dynamicIO development builds. Used for logging errors. */\n        _validation?: Promise<React.ReactNode>\n      } = await workUnitAsyncStorage.run(\n        requestStore,\n        getRSCPayload,\n        tree,\n        ctx,\n        res.statusCode === 404\n      )\n      const [resolveValidation, validationOutlet] = createValidationOutlet()\n      RSCPayload._validation = validationOutlet\n\n      const reactServerStream = await workUnitAsyncStorage.run(\n        requestStore,\n        scheduleInSequentialTasks,\n        () => {\n          requestStore.prerenderPhase = true\n          return ComponentMod.renderToReadableStream(\n            RSCPayload,\n            clientReferenceManifest.clientModules,\n            {\n              onError: serverComponentsErrorHandler,\n              environmentName: () =>\n                requestStore.prerenderPhase === true ? 'Prerender' : 'Server',\n              filterStackFrame(url: string, _functionName: string): boolean {\n                // The default implementation filters out <anonymous> stack frames\n                // but we want to retain them because current Server Components and\n                // built-in Components in parent stacks don't have source location.\n                return !url.startsWith('node:') && !url.includes('node_modules')\n              },\n            }\n          )\n        },\n        () => {\n          requestStore.prerenderPhase = false\n        }\n      )\n\n      spawnDynamicValidationInDev(\n        resolveValidation,\n        tree,\n        ctx,\n        res.statusCode === 404,\n        clientReferenceManifest,\n        workStore.route,\n        requestStore\n      ).catch(resolveValidation) // avoid unhandled rejections and a forever hanging promise\n\n      reactServerResult = new ReactServerResult(reactServerStream)\n    } else {\n      // This is a dynamic render. We don't do dynamic tracking because we're not prerendering\n      const RSCPayload = await workUnitAsyncStorage.run(\n        requestStore,\n        getRSCPayload,\n        tree,\n        ctx,\n        res.statusCode === 404\n      )\n\n      reactServerResult = new ReactServerResult(\n        workUnitAsyncStorage.run(\n          requestStore,\n          ComponentMod.renderToReadableStream,\n          RSCPayload,\n          clientReferenceManifest.clientModules,\n          {\n            onError: serverComponentsErrorHandler,\n          }\n        )\n      )\n    }\n\n    // React doesn't start rendering synchronously but we want the RSC render to have a chance to start\n    // before we begin SSR rendering because we want to capture any available preload headers so we tick\n    // one task before continuing\n    await waitAtLeastOneReactRenderTask()\n\n    // If provided, the postpone state should be parsed as JSON so it can be\n    // provided to React.\n    if (typeof renderOpts.postponed === 'string') {\n      if (postponedState?.type === DynamicState.DATA) {\n        // We have a complete HTML Document in the prerender but we need to\n        // still include the new server component render because it was not included\n        // in the static prelude.\n        const inlinedReactServerDataStream = createInlinedDataReadableStream(\n          reactServerResult.tee(),\n          ctx.nonce,\n          formState\n        )\n\n        return chainStreams(\n          inlinedReactServerDataStream,\n          createDocumentClosingStream()\n        )\n      } else if (postponedState) {\n        // We assume we have dynamic HTML requiring a resume render to complete\n        const postponed = getPostponedFromState(postponedState)\n\n        const resume = require('react-dom/server.edge')\n          .resume as (typeof import('react-dom/server.edge'))['resume']\n\n        const htmlStream = await workUnitAsyncStorage.run(\n          requestStore,\n          resume,\n          <App\n            reactServerStream={reactServerResult.tee()}\n            preinitScripts={preinitScripts}\n            clientReferenceManifest={clientReferenceManifest}\n            ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n            nonce={ctx.nonce}\n          />,\n          postponed,\n          {\n            onError: htmlRendererErrorHandler,\n            nonce: ctx.nonce,\n          }\n        )\n\n        const getServerInsertedHTML = makeGetServerInsertedHTML({\n          polyfills,\n          renderServerInsertedHTML,\n          serverCapturedErrors: allCapturedErrors,\n          basePath: renderOpts.basePath,\n          tracingMetadata: tracingMetadata,\n        })\n        return await continueDynamicHTMLResume(htmlStream, {\n          inlinedDataStream: createInlinedDataReadableStream(\n            reactServerResult.consume(),\n            ctx.nonce,\n            formState\n          ),\n          getServerInsertedHTML,\n        })\n      }\n    }\n\n    // This is a regular dynamic render\n    const renderToReadableStream = require('react-dom/server.edge')\n      .renderToReadableStream as (typeof import('react-dom/server.edge'))['renderToReadableStream']\n\n    const htmlStream = await workUnitAsyncStorage.run(\n      requestStore,\n      renderToReadableStream,\n      <App\n        reactServerStream={reactServerResult.tee()}\n        preinitScripts={preinitScripts}\n        clientReferenceManifest={clientReferenceManifest}\n        ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n        nonce={ctx.nonce}\n      />,\n      {\n        onError: htmlRendererErrorHandler,\n        nonce: ctx.nonce,\n        onHeaders: (headers: Headers) => {\n          headers.forEach((value, key) => {\n            setHeader(key, value)\n          })\n        },\n        maxHeadersLength: renderOpts.reactMaxHeadersLength,\n        // When debugging the static shell, client-side rendering should be\n        // disabled to prevent blanking out the page.\n        bootstrapScripts: renderOpts.isDebugStaticShell\n          ? []\n          : [bootstrapScript],\n        formState,\n      }\n    )\n\n    const getServerInsertedHTML = makeGetServerInsertedHTML({\n      polyfills,\n      renderServerInsertedHTML,\n      serverCapturedErrors: allCapturedErrors,\n      basePath: renderOpts.basePath,\n      tracingMetadata: tracingMetadata,\n    })\n    /**\n     * Rules of Static & Dynamic HTML:\n     *\n     *    1.) We must generate static HTML unless the caller explicitly opts\n     *        in to dynamic HTML support.\n     *\n     *    2.) If dynamic HTML support is requested, we must honor that request\n     *        or throw an error. It is the sole responsibility of the caller to\n     *        ensure they aren't e.g. requesting dynamic HTML for an AMP page.\n     *\n     * These rules help ensure that other existing features like request caching,\n     * coalescing, and ISR continue working as intended.\n     */\n    const generateStaticHTML = renderOpts.supportsDynamicResponse !== true\n    const validateRootLayout = renderOpts.dev\n    return await continueFizzStream(htmlStream, {\n      inlinedDataStream: createInlinedDataReadableStream(\n        reactServerResult.consume(),\n        ctx.nonce,\n        formState\n      ),\n      isStaticGeneration: generateStaticHTML,\n      getServerInsertedHTML,\n      serverInsertedHTMLToHead: true,\n      validateRootLayout,\n    })\n  } catch (err) {\n    if (\n      isStaticGenBailoutError(err) ||\n      (typeof err === 'object' &&\n        err !== null &&\n        'message' in err &&\n        typeof err.message === 'string' &&\n        err.message.includes(\n          'https://nextjs.org/docs/advanced-features/static-html-export'\n        ))\n    ) {\n      // Ensure that \"next dev\" prints the red error overlay\n      throw err\n    }\n\n    // If a bailout made it to this point, it means it wasn't wrapped inside\n    // a suspense boundary.\n    const shouldBailoutToCSR = isBailoutToCSRError(err)\n    if (shouldBailoutToCSR) {\n      const stack = getStackWithoutErrorMessage(err)\n      error(\n        `${err.reason} should be wrapped in a suspense boundary at page \"${ctx.pagePath}\". Read more: https://nextjs.org/docs/messages/missing-suspense-with-csr-bailout\\n${stack}`\n      )\n\n      throw err\n    }\n\n    let errorType: MetadataErrorType | 'redirect' | undefined\n\n    if (isHTTPAccessFallbackError(err)) {\n      res.statusCode = getAccessFallbackHTTPStatus(err)\n      errorType = getAccessFallbackErrorTypeByStatus(res.statusCode)\n    } else if (isRedirectError(err)) {\n      errorType = 'redirect'\n      res.statusCode = getRedirectStatusCodeFromError(err)\n\n      const redirectUrl = addPathPrefix(\n        getURLFromRedirectError(err),\n        renderOpts.basePath\n      )\n\n      // If there were mutable cookies set, we need to set them on the\n      // response.\n      const headers = new Headers()\n      if (appendMutableCookies(headers, requestStore.mutableCookies)) {\n        setHeader('set-cookie', Array.from(headers.values()))\n      }\n\n      setHeader('location', redirectUrl)\n    } else if (!shouldBailoutToCSR) {\n      res.statusCode = 500\n    }\n\n    const [errorPreinitScripts, errorBootstrapScript] = getRequiredScripts(\n      renderOpts.buildManifest,\n      ctx.assetPrefix,\n      renderOpts.crossOrigin,\n      renderOpts.subresourceIntegrityManifest,\n      getAssetQueryString(ctx, false),\n      ctx.nonce,\n      '/_not-found/page'\n    )\n\n    const errorRSCPayload = await workUnitAsyncStorage.run(\n      requestStore,\n      getErrorRSCPayload,\n      tree,\n      ctx,\n      errorType\n    )\n\n    const errorServerStream = workUnitAsyncStorage.run(\n      requestStore,\n      ComponentMod.renderToReadableStream,\n      errorRSCPayload,\n      clientReferenceManifest.clientModules,\n      {\n        onError: serverComponentsErrorHandler,\n      }\n    )\n\n    if (reactServerResult === null) {\n      // We errored when we did not have an RSC stream to read from. This is not just a render\n      // error, we need to throw early\n      throw err\n    }\n\n    try {\n      const fizzStream = await workUnitAsyncStorage.run(\n        requestStore,\n        renderToInitialFizzStream,\n        {\n          ReactDOMServer: require('react-dom/server.edge'),\n          element: (\n            <AppWithoutContext\n              reactServerStream={errorServerStream}\n              preinitScripts={errorPreinitScripts}\n              clientReferenceManifest={clientReferenceManifest}\n              nonce={ctx.nonce}\n            />\n          ),\n          streamOptions: {\n            nonce: ctx.nonce,\n            // Include hydration scripts in the HTML\n            bootstrapScripts: [errorBootstrapScript],\n            formState,\n          },\n        }\n      )\n\n      /**\n       * Rules of Static & Dynamic HTML:\n       *\n       *    1.) We must generate static HTML unless the caller explicitly opts\n       *        in to dynamic HTML support.\n       *\n       *    2.) If dynamic HTML support is requested, we must honor that request\n       *        or throw an error. It is the sole responsibility of the caller to\n       *        ensure they aren't e.g. requesting dynamic HTML for an AMP page.\n       *\n       * These rules help ensure that other existing features like request caching,\n       * coalescing, and ISR continue working as intended.\n       */\n      const generateStaticHTML = renderOpts.supportsDynamicResponse !== true\n      const validateRootLayout = renderOpts.dev\n      return await continueFizzStream(fizzStream, {\n        inlinedDataStream: createInlinedDataReadableStream(\n          // This is intentionally using the readable datastream from the\n          // main render rather than the flight data from the error page\n          // render\n          reactServerResult.consume(),\n          ctx.nonce,\n          formState\n        ),\n        isStaticGeneration: generateStaticHTML,\n        getServerInsertedHTML: makeGetServerInsertedHTML({\n          polyfills,\n          renderServerInsertedHTML,\n          serverCapturedErrors: [],\n          basePath: renderOpts.basePath,\n          tracingMetadata: tracingMetadata,\n        }),\n        serverInsertedHTMLToHead: true,\n        validateRootLayout,\n      })\n    } catch (finalErr: any) {\n      if (\n        process.env.NODE_ENV === 'development' &&\n        isHTTPAccessFallbackError(finalErr)\n      ) {\n        const { bailOnRootNotFound } =\n          require('../../client/components/dev-root-http-access-fallback-boundary') as typeof import('../../client/components/dev-root-http-access-fallback-boundary')\n        bailOnRootNotFound()\n      }\n      throw finalErr\n    }\n  }\n}\n\nfunction createValidationOutlet() {\n  let resolveValidation: (value: React.ReactNode) => void\n  let outlet = new Promise<React.ReactNode>((resolve) => {\n    resolveValidation = resolve\n  })\n  return [resolveValidation!, outlet] as const\n}\n\nasync function spawnDynamicValidationInDev(\n  resolveValidation: (validatingElement: React.ReactNode) => void,\n  tree: LoaderTree,\n  ctx: AppRenderContext,\n  isNotFound: boolean,\n  clientReferenceManifest: NonNullable<RenderOpts['clientReferenceManifest']>,\n  route: string,\n  requestStore: RequestStore\n): Promise<void> {\n  const { componentMod: ComponentMod } = ctx\n\n  // Prerender controller represents the lifetime of the prerender.\n  // It will be aborted when a Task is complete or a synchronously aborting\n  // API is called. Notably during cache-filling renders this does not actually\n  // terminate the render itself which will continue until all caches are filled\n  const initialServerPrerenderController = new AbortController()\n\n  // This controller represents the lifetime of the React render call. Notably\n  // during the cache-filling render it is different from the prerender controller\n  // because we don't want to end the react render until all caches are filled.\n  const initialServerRenderController = new AbortController()\n\n  const cacheSignal = new CacheSignal()\n  const prerenderResumeDataCache = createPrerenderResumeDataCache()\n  const initialServerPrerenderStore: PrerenderStore = {\n    type: 'prerender',\n    phase: 'render',\n    implicitTags: [],\n    renderSignal: initialServerRenderController.signal,\n    controller: initialServerPrerenderController,\n    cacheSignal,\n    dynamicTracking: null,\n    revalidate: INFINITE_CACHE,\n    expire: INFINITE_CACHE,\n    stale: INFINITE_CACHE,\n    tags: [],\n    prerenderResumeDataCache,\n  }\n\n  const initialClientController = new AbortController()\n  const initialClientPrerenderStore: PrerenderStore = {\n    type: 'prerender',\n    phase: 'render',\n    implicitTags: [],\n    renderSignal: initialClientController.signal,\n    controller: initialClientController,\n    cacheSignal,\n    dynamicTracking: null,\n    revalidate: INFINITE_CACHE,\n    expire: INFINITE_CACHE,\n    stale: INFINITE_CACHE,\n    tags: [],\n    prerenderResumeDataCache,\n  }\n\n  // We're not going to use the result of this render because the only time it could be used\n  // is if it completes in a microtask and that's likely very rare for any non-trivial app\n  const firstAttemptRSCPayload = await workUnitAsyncStorage.run(\n    initialServerPrerenderStore,\n    getRSCPayload,\n    tree,\n    ctx,\n    isNotFound\n  )\n\n  let initialServerStream\n  try {\n    initialServerStream = workUnitAsyncStorage.run(\n      initialServerPrerenderStore,\n      ComponentMod.renderToReadableStream,\n      firstAttemptRSCPayload,\n      clientReferenceManifest.clientModules,\n      {\n        onError: (err) => {\n          const digest = getDigestForWellKnownError(err)\n\n          if (digest) {\n            return digest\n          }\n\n          if (\n            initialServerPrerenderController.signal.aborted ||\n            initialServerRenderController.signal.aborted\n          ) {\n            // The render aborted before this error was handled which indicates\n            // the error is caused by unfinished components within the render\n            return\n          } else if (\n            process.env.NEXT_DEBUG_BUILD ||\n            process.env.__NEXT_VERBOSE_LOGGING\n          ) {\n            printDebugThrownValueForProspectiveRender(err, route)\n          }\n        },\n        signal: initialServerRenderController.signal,\n      }\n    )\n  } catch (err: unknown) {\n    if (\n      initialServerPrerenderController.signal.aborted ||\n      initialServerRenderController.signal.aborted\n    ) {\n      // These are expected errors that might error the prerender. we ignore them.\n    } else if (\n      process.env.NEXT_DEBUG_BUILD ||\n      process.env.__NEXT_VERBOSE_LOGGING\n    ) {\n      // We don't normally log these errors because we are going to retry anyway but\n      // it can be useful for debugging Next.js itself to get visibility here when needed\n      printDebugThrownValueForProspectiveRender(err, route)\n    }\n  }\n\n  const { ServerInsertedHTMLProvider } = createServerInsertedHTML()\n  const nonce = '1'\n\n  if (initialServerStream) {\n    const [warmupStream, renderStream] = initialServerStream.tee()\n    initialServerStream = null\n    // Before we attempt the SSR initial render we need to ensure all client modules\n    // are already loaded.\n    await warmFlightResponse(warmupStream, clientReferenceManifest)\n\n    const prerender = require('react-dom/static.edge')\n      .prerender as (typeof import('react-dom/static.edge'))['prerender']\n    const pendingInitialClientResult = workUnitAsyncStorage.run(\n      initialClientPrerenderStore,\n      prerender,\n      <App\n        reactServerStream={renderStream}\n        preinitScripts={() => {}}\n        clientReferenceManifest={clientReferenceManifest}\n        ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n        nonce={nonce}\n      />,\n      {\n        signal: initialClientController.signal,\n        onError: (err) => {\n          const digest = getDigestForWellKnownError(err)\n\n          if (digest) {\n            return digest\n          }\n\n          if (initialClientController.signal.aborted) {\n            // These are expected errors that might error the prerender. we ignore them.\n          } else if (\n            process.env.NEXT_DEBUG_BUILD ||\n            process.env.__NEXT_VERBOSE_LOGGING\n          ) {\n            // We don't normally log these errors because we are going to retry anyway but\n            // it can be useful for debugging Next.js itself to get visibility here when needed\n            printDebugThrownValueForProspectiveRender(err, route)\n          }\n        },\n      }\n    )\n    pendingInitialClientResult.catch((err: unknown) => {\n      if (initialClientController.signal.aborted) {\n        // We aborted the render normally and can ignore this error\n      } else {\n        // We're going to retry to so we normally would suppress this error but\n        // when verbose logging is on we print it\n        if (process.env.__NEXT_VERBOSE_LOGGING) {\n          printDebugThrownValueForProspectiveRender(err, route)\n        }\n      }\n    })\n  }\n\n  await cacheSignal.cacheReady()\n  // It is important that we abort the SSR render first to avoid\n  // connection closed errors from having an incomplete RSC stream\n  initialClientController.abort()\n  initialServerRenderController.abort()\n  initialServerPrerenderController.abort()\n\n  // We've now filled caches and triggered any inadvertent sync bailouts\n  // due to lazy module initialization. We can restart our render to capture results\n\n  const finalServerController = new AbortController()\n  const serverDynamicTracking = createDynamicTrackingState(false)\n\n  const finalServerPrerenderStore: PrerenderStore = {\n    type: 'prerender',\n    phase: 'render',\n    implicitTags: [],\n    renderSignal: finalServerController.signal,\n    controller: finalServerController,\n    // During the final prerender we don't need to track cache access so we omit the signal\n    cacheSignal: null,\n    dynamicTracking: serverDynamicTracking,\n    revalidate: INFINITE_CACHE,\n    expire: INFINITE_CACHE,\n    stale: INFINITE_CACHE,\n    tags: [],\n    prerenderResumeDataCache,\n  }\n\n  const finalClientController = new AbortController()\n  const clientDynamicTracking = createDynamicTrackingState(false)\n  const dynamicValidation = createDynamicValidationState()\n\n  const finalClientPrerenderStore: PrerenderStore = {\n    type: 'prerender',\n    phase: 'render',\n    implicitTags: [],\n    renderSignal: finalClientController.signal,\n    controller: finalClientController,\n    // During the final prerender we don't need to track cache access so we omit the signal\n    cacheSignal: null,\n    dynamicTracking: clientDynamicTracking,\n    revalidate: INFINITE_CACHE,\n    expire: INFINITE_CACHE,\n    stale: INFINITE_CACHE,\n    tags: [],\n    prerenderResumeDataCache,\n  }\n\n  const finalServerPayload = await workUnitAsyncStorage.run(\n    finalServerPrerenderStore,\n    getRSCPayload,\n    tree,\n    ctx,\n    isNotFound\n  )\n\n  const serverPrerenderStreamResult = await prerenderServerWithPhases(\n    finalServerController.signal,\n    () =>\n      workUnitAsyncStorage.run(\n        finalServerPrerenderStore,\n        ComponentMod.renderToReadableStream,\n        finalServerPayload,\n        clientReferenceManifest.clientModules,\n        {\n          onError: (err) => {\n            if (\n              finalServerController.signal.aborted &&\n              isPrerenderInterruptedError(err)\n            ) {\n              return err.digest\n            }\n\n            return getDigestForWellKnownError(err)\n          },\n          signal: finalServerController.signal,\n        }\n      ),\n    () => {\n      finalServerController.abort()\n    }\n  )\n\n  const serverPhasedStream = serverPrerenderStreamResult.asPhasedStream()\n  try {\n    const prerender = require('react-dom/static.edge')\n      .prerender as (typeof import('react-dom/static.edge'))['prerender']\n    await prerenderClientWithPhases(\n      () =>\n        workUnitAsyncStorage.run(\n          finalClientPrerenderStore,\n          prerender,\n          <App\n            reactServerStream={serverPhasedStream}\n            preinitScripts={() => {}}\n            clientReferenceManifest={clientReferenceManifest}\n            ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n            nonce={ctx.nonce}\n          />,\n          {\n            signal: finalClientController.signal,\n            onError: (err, errorInfo) => {\n              if (\n                isPrerenderInterruptedError(err) ||\n                finalClientController.signal.aborted\n              ) {\n                requestStore.usedDynamic = true\n\n                const componentStack = errorInfo.componentStack\n                if (typeof componentStack === 'string') {\n                  trackAllowedDynamicAccess(\n                    route,\n                    componentStack,\n                    dynamicValidation,\n                    serverDynamicTracking,\n                    clientDynamicTracking\n                  )\n                }\n                return\n              }\n\n              return getDigestForWellKnownError(err)\n            },\n          }\n        ),\n      () => {\n        finalClientController.abort()\n        serverPhasedStream.assertExhausted()\n      }\n    )\n  } catch (err) {\n    if (\n      isPrerenderInterruptedError(err) ||\n      finalClientController.signal.aborted\n    ) {\n      // we don't have a root because the abort errored in the root. We can just ignore this error\n    } else {\n      // This error is something else and should bubble up\n      throw err\n    }\n  }\n\n  function LogDynamicValidation() {\n    try {\n      throwIfDisallowedDynamic(\n        route,\n        dynamicValidation,\n        serverDynamicTracking,\n        clientDynamicTracking\n      )\n    } catch {}\n    return null\n  }\n\n  resolveValidation(<LogDynamicValidation />)\n}\n\ntype PrerenderToStreamResult = {\n  stream: ReadableStream<Uint8Array>\n  digestErrorsMap: Map<string, DigestedError>\n  ssrErrors: Array<unknown>\n  dynamicAccess?: null | Array<DynamicAccess>\n  collectedRevalidate: number\n  collectedExpire: number\n  collectedStale: number\n  collectedTags: null | string[]\n}\n\n/**\n * Determines whether we should generate static flight data.\n */\nfunction shouldGenerateStaticFlightData(workStore: WorkStore): boolean {\n  const { fallbackRouteParams, isStaticGeneration } = workStore\n  if (!isStaticGeneration) return false\n\n  if (fallbackRouteParams && fallbackRouteParams.size > 0) {\n    return false\n  }\n\n  return true\n}\n\nasync function prerenderToStream(\n  req: BaseNextRequest,\n  res: BaseNextResponse,\n  ctx: AppRenderContext,\n  metadata: AppPageRenderResultMetadata,\n  workStore: WorkStore,\n  tree: LoaderTree,\n  implicitTags: Array<string>\n): Promise<PrerenderToStreamResult> {\n  // When prerendering formState is always null. We still include it\n  // because some shared APIs expect a formState value and this is slightly\n  // more explicit than making it an optional function argument\n  const formState = null\n\n  const renderOpts = ctx.renderOpts\n  const ComponentMod = renderOpts.ComponentMod\n  // TODO: fix this typescript\n  const clientReferenceManifest = renderOpts.clientReferenceManifest!\n  const fallbackRouteParams = workStore.fallbackRouteParams\n\n  const { ServerInsertedHTMLProvider, renderServerInsertedHTML } =\n    createServerInsertedHTML()\n\n  const tracingMetadata = getTracedMetadata(\n    getTracer().getTracePropagationData(),\n    renderOpts.experimental.clientTraceMetadata\n  )\n\n  const polyfills: JSX.IntrinsicElements['script'][] =\n    renderOpts.buildManifest.polyfillFiles\n      .filter(\n        (polyfill) =>\n          polyfill.endsWith('.js') && !polyfill.endsWith('.module.js')\n      )\n      .map((polyfill) => ({\n        src: `${ctx.assetPrefix}/_next/${polyfill}${getAssetQueryString(\n          ctx,\n          false\n        )}`,\n        integrity: renderOpts.subresourceIntegrityManifest?.[polyfill],\n        crossOrigin: renderOpts.crossOrigin,\n        noModule: true,\n        nonce: ctx.nonce,\n      }))\n\n  const [preinitScripts, bootstrapScript] = getRequiredScripts(\n    renderOpts.buildManifest,\n    // Why is assetPrefix optional on renderOpts?\n    // @TODO make it default empty string on renderOpts and get rid of it from ctx\n    ctx.assetPrefix,\n    renderOpts.crossOrigin,\n    renderOpts.subresourceIntegrityManifest,\n    getAssetQueryString(ctx, true),\n    ctx.nonce,\n    renderOpts.page\n  )\n\n  const reactServerErrorsByDigest: Map<string, DigestedError> = new Map()\n  // We don't report errors during prerendering through our instrumentation hooks\n  const silenceLogger = !!renderOpts.experimental.isRoutePPREnabled\n  function onHTMLRenderRSCError(err: DigestedError) {\n    return renderOpts.onInstrumentationRequestError?.(\n      err,\n      req,\n      createErrorContext(ctx, 'react-server-components')\n    )\n  }\n  const serverComponentsErrorHandler = createHTMLReactServerErrorHandler(\n    !!renderOpts.dev,\n    !!renderOpts.nextExport,\n    reactServerErrorsByDigest,\n    silenceLogger,\n    onHTMLRenderRSCError\n  )\n\n  function onHTMLRenderSSRError(err: DigestedError) {\n    return renderOpts.onInstrumentationRequestError?.(\n      err,\n      req,\n      createErrorContext(ctx, 'server-rendering')\n    )\n  }\n  const allCapturedErrors: Array<unknown> = []\n  const htmlRendererErrorHandler = createHTMLErrorHandler(\n    !!renderOpts.dev,\n    !!renderOpts.nextExport,\n    reactServerErrorsByDigest,\n    allCapturedErrors,\n    silenceLogger,\n    onHTMLRenderSSRError\n  )\n\n  let reactServerPrerenderResult:\n    | null\n    | ReactServerPrerenderResult\n    | ServerPrerenderStreamResult = null\n  const setHeader = (name: string, value: string | string[]) => {\n    res.setHeader(name, value)\n\n    metadata.headers ??= {}\n    metadata.headers[name] = res.getHeader(name)\n\n    return res\n  }\n\n  let prerenderStore: PrerenderStore | null = null\n\n  try {\n    if (renderOpts.experimental.dynamicIO) {\n      if (renderOpts.experimental.isRoutePPREnabled) {\n        /**\n         * dynamicIO with PPR\n         *\n         * The general approach is to render the RSC stream first allowing any cache reads to resolve.\n         * Once we have settled all cache reads we restart the render and abort after a single Task.\n         *\n         * Unlike with the non PPR case we can't synchronously abort the render when a dynamic API is used\n         * during the initial render because we need to ensure all caches can be filled as part of the initial Task\n         * and a synchronous abort might prevent us from filling all caches.\n         *\n         * Once the render is complete we allow the SSR render to finish and use a combination of the postponed state\n         * and the reactServerIsDynamic value to determine how to treat the resulting render\n         */\n\n        // Prerender controller represents the lifetime of the prerender.\n        // It will be aborted when a Task is complete or a synchronously aborting\n        // API is called. Notably during cache-filling renders this does not actually\n        // terminate the render itself which will continue until all caches are filled\n        const initialServerPrerenderController = new AbortController()\n\n        // This controller represents the lifetime of the React render call. Notably\n        // during the cache-filling render it is different from the prerender controller\n        // because we don't want to end the react render until all caches are filled.\n        const initialServerRenderController = new AbortController()\n\n        // The cacheSignal helps us track whether caches are still filling or we are ready\n        // to cut the render off.\n        const cacheSignal = new CacheSignal()\n\n        // The resume data cache here should use a fresh instance as it's\n        // performing a fresh prerender. If we get to implementing the\n        // prerendering of an already prerendered page, we should use the passed\n        // resume data cache instead.\n        const prerenderResumeDataCache = createPrerenderResumeDataCache()\n\n        const initialServerPrerenderStore: PrerenderStore = (prerenderStore = {\n          type: 'prerender',\n          phase: 'render',\n          implicitTags: implicitTags,\n          renderSignal: initialServerRenderController.signal,\n          controller: initialServerPrerenderController,\n          cacheSignal,\n          dynamicTracking: null,\n          revalidate: INFINITE_CACHE,\n          expire: INFINITE_CACHE,\n          stale: INFINITE_CACHE,\n          tags: [...implicitTags],\n          prerenderResumeDataCache,\n        })\n\n        // We're not going to use the result of this render because the only time it could be used\n        // is if it completes in a microtask and that's likely very rare for any non-trivial app\n        const initialServerPayload = await workUnitAsyncStorage.run(\n          initialServerPrerenderStore,\n          getRSCPayload,\n          tree,\n          ctx,\n          res.statusCode === 404\n        )\n\n        const pendingInitialServerResult = workUnitAsyncStorage.run(\n          initialServerPrerenderStore,\n          ComponentMod.prerender,\n          initialServerPayload,\n          clientReferenceManifest.clientModules,\n          {\n            onError: (err) => {\n              const digest = getDigestForWellKnownError(err)\n\n              if (digest) {\n                return digest\n              }\n\n              if (initialServerPrerenderController.signal.aborted) {\n                // The render aborted before this error was handled which indicates\n                // the error is caused by unfinished components within the render\n                return\n              } else if (\n                process.env.NEXT_DEBUG_BUILD ||\n                process.env.__NEXT_VERBOSE_LOGGING\n              ) {\n                printDebugThrownValueForProspectiveRender(err, workStore.route)\n              }\n            },\n            // we don't care to track postpones during the prospective render because we need\n            // to always do a final render anyway\n            onPostpone: undefined,\n            // We don't want to stop rendering until the cacheSignal is complete so we pass\n            // a different signal to this render call than is used by dynamic APIs to signify\n            // transitioning out of the prerender environment\n            signal: initialServerRenderController.signal,\n          }\n        )\n\n        await cacheSignal.cacheReady()\n        initialServerRenderController.abort()\n        initialServerPrerenderController.abort()\n\n        let initialServerResult\n        try {\n          initialServerResult = await createReactServerPrerenderResult(\n            pendingInitialServerResult\n          )\n        } catch (err) {\n          if (\n            initialServerRenderController.signal.aborted ||\n            initialServerPrerenderController.signal.aborted\n          ) {\n            // These are expected errors that might error the prerender. we ignore them.\n          } else if (\n            process.env.NEXT_DEBUG_BUILD ||\n            process.env.__NEXT_VERBOSE_LOGGING\n          ) {\n            // We don't normally log these errors because we are going to retry anyway but\n            // it can be useful for debugging Next.js itself to get visibility here when needed\n            printDebugThrownValueForProspectiveRender(err, workStore.route)\n          }\n        }\n\n        if (initialServerResult) {\n          // Before we attempt the SSR initial render we need to ensure all client modules\n          // are already loaded.\n          await warmFlightResponse(\n            initialServerResult.asStream(),\n            clientReferenceManifest\n          )\n\n          const initialClientController = new AbortController()\n          const initialClientPrerenderStore: PrerenderStore = {\n            type: 'prerender',\n            phase: 'render',\n            implicitTags: implicitTags,\n            renderSignal: initialClientController.signal,\n            controller: initialClientController,\n            cacheSignal: null,\n            dynamicTracking: null,\n            revalidate: INFINITE_CACHE,\n            expire: INFINITE_CACHE,\n            stale: INFINITE_CACHE,\n            tags: [...implicitTags],\n            prerenderResumeDataCache,\n          }\n\n          const prerender = require('react-dom/static.edge')\n            .prerender as (typeof import('react-dom/static.edge'))['prerender']\n          await prerenderAndAbortInSequentialTasks(\n            () =>\n              workUnitAsyncStorage.run(\n                initialClientPrerenderStore,\n                prerender,\n                <App\n                  reactServerStream={initialServerResult.asUnclosingStream()}\n                  preinitScripts={preinitScripts}\n                  clientReferenceManifest={clientReferenceManifest}\n                  ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n                  nonce={ctx.nonce}\n                />,\n                {\n                  signal: initialClientController.signal,\n                  onError: (err) => {\n                    const digest = getDigestForWellKnownError(err)\n\n                    if (digest) {\n                      return digest\n                    }\n\n                    if (initialClientController.signal.aborted) {\n                      // These are expected errors that might error the prerender. we ignore them.\n                    } else if (\n                      process.env.NEXT_DEBUG_BUILD ||\n                      process.env.__NEXT_VERBOSE_LOGGING\n                    ) {\n                      // We don't normally log these errors because we are going to retry anyway but\n                      // it can be useful for debugging Next.js itself to get visibility here when needed\n                      printDebugThrownValueForProspectiveRender(\n                        err,\n                        workStore.route\n                      )\n                    }\n                  },\n                  // When debugging the static shell, client-side rendering should be\n                  // disabled to prevent blanking out the page.\n                  bootstrapScripts: renderOpts.isDebugStaticShell\n                    ? []\n                    : [bootstrapScript],\n                }\n              ),\n            () => {\n              initialClientController.abort()\n            }\n          ).catch((err) => {\n            if (\n              initialServerRenderController.signal.aborted ||\n              isPrerenderInterruptedError(err)\n            ) {\n              // These are expected errors that might error the prerender. we ignore them.\n            } else if (\n              process.env.NEXT_DEBUG_BUILD ||\n              process.env.__NEXT_VERBOSE_LOGGING\n            ) {\n              // We don't normally log these errors because we are going to retry anyway but\n              // it can be useful for debugging Next.js itself to get visibility here when needed\n              printDebugThrownValueForProspectiveRender(err, workStore.route)\n            }\n          })\n        }\n\n        let serverIsDynamic = false\n        const finalServerController = new AbortController()\n        const serverDynamicTracking = createDynamicTrackingState(\n          renderOpts.isDebugDynamicAccesses\n        )\n\n        const finalRenderPrerenderStore: PrerenderStore = (prerenderStore = {\n          type: 'prerender',\n          phase: 'render',\n          implicitTags: implicitTags,\n          renderSignal: finalServerController.signal,\n          controller: finalServerController,\n          // During the final prerender we don't need to track cache access so we omit the signal\n          cacheSignal: null,\n          dynamicTracking: serverDynamicTracking,\n          revalidate: INFINITE_CACHE,\n          expire: INFINITE_CACHE,\n          stale: INFINITE_CACHE,\n          tags: [...implicitTags],\n          prerenderResumeDataCache,\n        })\n\n        const finalAttemptRSCPayload = await workUnitAsyncStorage.run(\n          finalRenderPrerenderStore,\n          getRSCPayload,\n          tree,\n          ctx,\n          res.statusCode === 404\n        )\n        const reactServerResult = (reactServerPrerenderResult =\n          await createReactServerPrerenderResult(\n            prerenderAndAbortInSequentialTasks(\n              () =>\n                workUnitAsyncStorage.run(\n                  // The store to scope\n                  finalRenderPrerenderStore,\n                  // The function to run\n                  ComponentMod.prerender,\n                  // ... the arguments for the function to run\n                  finalAttemptRSCPayload,\n                  clientReferenceManifest.clientModules,\n                  {\n                    onError: (err: unknown) => {\n                      if (finalServerController.signal.aborted) {\n                        serverIsDynamic = true\n                        return\n                      }\n\n                      return serverComponentsErrorHandler(err)\n                    },\n                    signal: finalServerController.signal,\n                  }\n                ),\n              () => {\n                finalServerController.abort()\n              }\n            )\n          ))\n\n        const clientDynamicTracking = createDynamicTrackingState(\n          renderOpts.isDebugDynamicAccesses\n        )\n        const finalClientController = new AbortController()\n        const finalClientPrerenderStore: PrerenderStore = {\n          type: 'prerender',\n          phase: 'render',\n          implicitTags: implicitTags,\n          renderSignal: finalClientController.signal,\n          controller: finalClientController,\n          // For HTML Generation we don't need to track cache reads (RSC only)\n          cacheSignal: null,\n          dynamicTracking: clientDynamicTracking,\n          revalidate: INFINITE_CACHE,\n          expire: INFINITE_CACHE,\n          stale: INFINITE_CACHE,\n          tags: [...implicitTags],\n          prerenderResumeDataCache,\n        }\n\n        let clientIsDynamic = false\n        let dynamicValidation = createDynamicValidationState()\n\n        const prerender = require('react-dom/static.edge')\n          .prerender as (typeof import('react-dom/static.edge'))['prerender']\n        let { prelude, postponed } = await prerenderAndAbortInSequentialTasks(\n          () =>\n            workUnitAsyncStorage.run(\n              finalClientPrerenderStore,\n              prerender,\n              <App\n                reactServerStream={reactServerResult.asUnclosingStream()}\n                preinitScripts={preinitScripts}\n                clientReferenceManifest={clientReferenceManifest}\n                ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n                nonce={ctx.nonce}\n              />,\n              {\n                signal: finalClientController.signal,\n                onError: (err: unknown, errorInfo: ErrorInfo) => {\n                  if (\n                    isPrerenderInterruptedError(err) ||\n                    finalClientController.signal.aborted\n                  ) {\n                    clientIsDynamic = true\n\n                    const componentStack: string | undefined = (\n                      errorInfo as any\n                    ).componentStack\n                    if (typeof componentStack === 'string') {\n                      trackAllowedDynamicAccess(\n                        workStore.route,\n                        componentStack,\n                        dynamicValidation,\n                        serverDynamicTracking,\n                        clientDynamicTracking\n                      )\n                    }\n                    return\n                  }\n\n                  return htmlRendererErrorHandler(err, errorInfo)\n                },\n                onHeaders: (headers: Headers) => {\n                  headers.forEach((value, key) => {\n                    setHeader(key, value)\n                  })\n                },\n                maxHeadersLength: renderOpts.reactMaxHeadersLength,\n                // When debugging the static shell, client-side rendering should be\n                // disabled to prevent blanking out the page.\n                bootstrapScripts: renderOpts.isDebugStaticShell\n                  ? []\n                  : [bootstrapScript],\n              }\n            ),\n          () => {\n            finalClientController.abort()\n          }\n        )\n\n        throwIfDisallowedDynamic(\n          workStore.route,\n          dynamicValidation,\n          serverDynamicTracking,\n          clientDynamicTracking\n        )\n\n        const getServerInsertedHTML = makeGetServerInsertedHTML({\n          polyfills,\n          renderServerInsertedHTML,\n          serverCapturedErrors: allCapturedErrors,\n          basePath: renderOpts.basePath,\n          tracingMetadata: tracingMetadata,\n        })\n\n        const flightData = await streamToBuffer(reactServerResult.asStream())\n        metadata.flightData = flightData\n        metadata.segmentData = await collectSegmentData(\n          flightData,\n          finalRenderPrerenderStore,\n          ComponentMod,\n          renderOpts\n        )\n\n        if (serverIsDynamic || clientIsDynamic) {\n          if (postponed != null) {\n            // Dynamic HTML case\n            metadata.postponed = await getDynamicHTMLPostponedState(\n              postponed,\n              fallbackRouteParams,\n              prerenderResumeDataCache\n            )\n          } else {\n            // Dynamic Data case\n            metadata.postponed = await getDynamicDataPostponedState(\n              prerenderResumeDataCache\n            )\n          }\n          reactServerResult.consume()\n          return {\n            digestErrorsMap: reactServerErrorsByDigest,\n            ssrErrors: allCapturedErrors,\n            stream: await continueDynamicPrerender(prelude, {\n              getServerInsertedHTML,\n            }),\n            dynamicAccess: consumeDynamicAccess(\n              serverDynamicTracking,\n              clientDynamicTracking\n            ),\n            // TODO: Should this include the SSR pass?\n            collectedRevalidate: finalRenderPrerenderStore.revalidate,\n            collectedExpire: finalRenderPrerenderStore.expire,\n            collectedStale: finalRenderPrerenderStore.stale,\n            collectedTags: finalRenderPrerenderStore.tags,\n          }\n        } else {\n          // Static case\n          if (workStore.forceDynamic) {\n            throw new StaticGenBailoutError(\n              'Invariant: a Page with `dynamic = \"force-dynamic\"` did not trigger the dynamic pathway. This is a bug in Next.js'\n            )\n          }\n\n          let htmlStream = prelude\n          if (postponed != null) {\n            // We postponed but nothing dynamic was used. We resume the render now and immediately abort it\n            // so we can set all the postponed boundaries to client render mode before we store the HTML response\n            const resume = require('react-dom/server.edge')\n              .resume as (typeof import('react-dom/server.edge'))['resume']\n\n            // We don't actually want to render anything so we just pass a stream\n            // that never resolves. The resume call is going to abort immediately anyway\n            const foreverStream = new ReadableStream<Uint8Array>()\n\n            const resumeStream = await resume(\n              <App\n                reactServerStream={foreverStream}\n                preinitScripts={() => {}}\n                clientReferenceManifest={clientReferenceManifest}\n                ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n                nonce={ctx.nonce}\n              />,\n              JSON.parse(JSON.stringify(postponed)),\n              {\n                signal: createPostponedAbortSignal('static prerender resume'),\n                onError: htmlRendererErrorHandler,\n                nonce: ctx.nonce,\n              }\n            )\n\n            // First we write everything from the prerender, then we write everything from the aborted resume render\n            htmlStream = chainStreams(prelude, resumeStream)\n          }\n\n          return {\n            digestErrorsMap: reactServerErrorsByDigest,\n            ssrErrors: allCapturedErrors,\n            stream: await continueStaticPrerender(htmlStream, {\n              inlinedDataStream: createInlinedDataReadableStream(\n                reactServerResult.consumeAsStream(),\n                ctx.nonce,\n                formState\n              ),\n              getServerInsertedHTML,\n            }),\n            dynamicAccess: consumeDynamicAccess(\n              serverDynamicTracking,\n              clientDynamicTracking\n            ),\n            // TODO: Should this include the SSR pass?\n            collectedRevalidate: finalRenderPrerenderStore.revalidate,\n            collectedExpire: finalRenderPrerenderStore.expire,\n            collectedStale: finalRenderPrerenderStore.stale,\n            collectedTags: finalRenderPrerenderStore.tags,\n          }\n        }\n      } else {\n        /**\n         * dynamicIO without PPR\n         *\n         * The general approach is to render the RSC tree first allowing for any inflight\n         * caches to resolve. Once we have settled inflight caches we can check and see if any\n         * synchronous dynamic APIs were used. If so we don't need to bother doing anything more\n         * because the page will be dynamic on re-render anyway\n         *\n         * If no sync dynamic APIs were used we then re-render and abort after a single Task.\n         * If the render errors we know that the page has some dynamic IO. This assumes and relies\n         * upon caches reading from a in process memory cache and resolving in a microtask. While this\n         * is true from our own default cache implementation and if you don't exceed our LRU size it\n         * might not be true for custom cache implementations.\n         *\n         * Future implementations can do some different strategies during build like using IPC to\n         * synchronously fill caches during this special rendering mode. For now this heuristic should work\n         */\n\n        const cache = workStore.incrementalCache\n        if (!cache) {\n          throw new Error(\n            'Expected incremental cache to exist. This is a bug in Next.js'\n          )\n        }\n\n        // Prerender controller represents the lifetime of the prerender.\n        // It will be aborted when a Task is complete or a synchronously aborting\n        // API is called. Notably during cache-filling renders this does not actually\n        // terminate the render itself which will continue until all caches are filled\n        const initialServerPrerenderController = new AbortController()\n\n        // This controller represents the lifetime of the React render call. Notably\n        // during the cache-filling render it is different from the prerender controller\n        // because we don't want to end the react render until all caches are filled.\n        const initialServerRenderController = new AbortController()\n\n        const cacheSignal = new CacheSignal()\n        const prerenderResumeDataCache = createPrerenderResumeDataCache()\n\n        const initialServerPrerenderStore: PrerenderStore = (prerenderStore = {\n          type: 'prerender',\n          phase: 'render',\n          implicitTags: implicitTags,\n          renderSignal: initialServerRenderController.signal,\n          controller: initialServerPrerenderController,\n          cacheSignal,\n          dynamicTracking: null,\n          revalidate: INFINITE_CACHE,\n          expire: INFINITE_CACHE,\n          stale: INFINITE_CACHE,\n          tags: [...implicitTags],\n          prerenderResumeDataCache,\n        })\n\n        const initialClientController = new AbortController()\n        const initialClientPrerenderStore: PrerenderStore = (prerenderStore = {\n          type: 'prerender',\n          phase: 'render',\n          implicitTags: implicitTags,\n          renderSignal: initialClientController.signal,\n          controller: initialClientController,\n          cacheSignal,\n          dynamicTracking: null,\n          revalidate: INFINITE_CACHE,\n          expire: INFINITE_CACHE,\n          stale: INFINITE_CACHE,\n          tags: [...implicitTags],\n          prerenderResumeDataCache,\n        })\n\n        // We're not going to use the result of this render because the only time it could be used\n        // is if it completes in a microtask and that's likely very rare for any non-trivial app\n        const firstAttemptRSCPayload = await workUnitAsyncStorage.run(\n          initialServerPrerenderStore,\n          getRSCPayload,\n          tree,\n          ctx,\n          res.statusCode === 404\n        )\n\n        let initialServerStream\n        try {\n          initialServerStream = workUnitAsyncStorage.run(\n            initialServerPrerenderStore,\n            ComponentMod.renderToReadableStream,\n            firstAttemptRSCPayload,\n            clientReferenceManifest.clientModules,\n            {\n              onError: (err) => {\n                const digest = getDigestForWellKnownError(err)\n\n                if (digest) {\n                  return digest\n                }\n\n                if (\n                  initialServerPrerenderController.signal.aborted ||\n                  initialServerRenderController.signal.aborted\n                ) {\n                  // The render aborted before this error was handled which indicates\n                  // the error is caused by unfinished components within the render\n                  return\n                } else if (\n                  process.env.NEXT_DEBUG_BUILD ||\n                  process.env.__NEXT_VERBOSE_LOGGING\n                ) {\n                  printDebugThrownValueForProspectiveRender(\n                    err,\n                    workStore.route\n                  )\n                }\n              },\n              signal: initialServerRenderController.signal,\n            }\n          )\n        } catch (err: unknown) {\n          if (\n            initialServerPrerenderController.signal.aborted ||\n            initialServerRenderController.signal.aborted\n          ) {\n            // These are expected errors that might error the prerender. we ignore them.\n          } else if (\n            process.env.NEXT_DEBUG_BUILD ||\n            process.env.__NEXT_VERBOSE_LOGGING\n          ) {\n            // We don't normally log these errors because we are going to retry anyway but\n            // it can be useful for debugging Next.js itself to get visibility here when needed\n            printDebugThrownValueForProspectiveRender(err, workStore.route)\n          }\n        }\n\n        if (initialServerStream) {\n          const [warmupStream, renderStream] = initialServerStream.tee()\n          initialServerStream = null\n          // Before we attempt the SSR initial render we need to ensure all client modules\n          // are already loaded.\n          await warmFlightResponse(warmupStream, clientReferenceManifest)\n\n          const prerender = require('react-dom/static.edge')\n            .prerender as (typeof import('react-dom/static.edge'))['prerender']\n          const pendingInitialClientResult = workUnitAsyncStorage.run(\n            initialClientPrerenderStore,\n            prerender,\n            <App\n              reactServerStream={renderStream}\n              preinitScripts={preinitScripts}\n              clientReferenceManifest={clientReferenceManifest}\n              ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n              nonce={ctx.nonce}\n            />,\n            {\n              signal: initialClientController.signal,\n              onError: (err) => {\n                const digest = getDigestForWellKnownError(err)\n\n                if (digest) {\n                  return digest\n                }\n\n                if (initialClientController.signal.aborted) {\n                  // These are expected errors that might error the prerender. we ignore them.\n                } else if (\n                  process.env.NEXT_DEBUG_BUILD ||\n                  process.env.__NEXT_VERBOSE_LOGGING\n                ) {\n                  // We don't normally log these errors because we are going to retry anyway but\n                  // it can be useful for debugging Next.js itself to get visibility here when needed\n                  printDebugThrownValueForProspectiveRender(\n                    err,\n                    workStore.route\n                  )\n                }\n              },\n              // When debugging the static shell, client-side rendering should be\n              // disabled to prevent blanking out the page.\n              bootstrapScripts: renderOpts.isDebugStaticShell\n                ? []\n                : [bootstrapScript],\n            }\n          )\n          pendingInitialClientResult.catch((err: unknown) => {\n            if (initialClientController.signal.aborted) {\n              // We aborted the render normally and can ignore this error\n            } else {\n              // We're going to retry to so we normally would suppress this error but\n              // when verbose logging is on we print it\n              if (process.env.__NEXT_VERBOSE_LOGGING) {\n                printDebugThrownValueForProspectiveRender(err, workStore.route)\n              }\n            }\n          })\n        }\n\n        await cacheSignal.cacheReady()\n        // It is important that we abort the SSR render first to avoid\n        // connection closed errors from having an incomplete RSC stream\n        initialClientController.abort()\n        initialServerRenderController.abort()\n        initialServerPrerenderController.abort()\n\n        // We've now filled caches and triggered any inadvertant sync bailouts\n        // due to lazy module initialization. We can restart our render to capture results\n\n        let serverIsDynamic = false\n        const finalServerController = new AbortController()\n        const serverDynamicTracking = createDynamicTrackingState(\n          renderOpts.isDebugDynamicAccesses\n        )\n\n        const finalServerPrerenderStore: PrerenderStore = (prerenderStore = {\n          type: 'prerender',\n          phase: 'render',\n          implicitTags: implicitTags,\n          renderSignal: finalServerController.signal,\n          controller: finalServerController,\n          // During the final prerender we don't need to track cache access so we omit the signal\n          cacheSignal: null,\n          dynamicTracking: serverDynamicTracking,\n          revalidate: INFINITE_CACHE,\n          expire: INFINITE_CACHE,\n          stale: INFINITE_CACHE,\n          tags: [...implicitTags],\n          prerenderResumeDataCache,\n        })\n\n        let clientIsDynamic = false\n        const finalClientController = new AbortController()\n        const clientDynamicTracking = createDynamicTrackingState(\n          renderOpts.isDebugDynamicAccesses\n        )\n        const dynamicValidation = createDynamicValidationState()\n\n        const finalClientPrerenderStore: PrerenderStore = (prerenderStore = {\n          type: 'prerender',\n          phase: 'render',\n          implicitTags: implicitTags,\n          renderSignal: finalClientController.signal,\n          controller: finalClientController,\n          // During the final prerender we don't need to track cache access so we omit the signal\n          cacheSignal: null,\n          dynamicTracking: clientDynamicTracking,\n          revalidate: INFINITE_CACHE,\n          expire: INFINITE_CACHE,\n          stale: INFINITE_CACHE,\n          tags: [...implicitTags],\n          prerenderResumeDataCache,\n        })\n\n        const finalServerPayload = await workUnitAsyncStorage.run(\n          finalServerPrerenderStore,\n          getRSCPayload,\n          tree,\n          ctx,\n          res.statusCode === 404\n        )\n\n        const serverPrerenderStreamResult = (reactServerPrerenderResult =\n          await prerenderServerWithPhases(\n            finalServerController.signal,\n            () =>\n              workUnitAsyncStorage.run(\n                finalServerPrerenderStore,\n                ComponentMod.renderToReadableStream,\n                finalServerPayload,\n                clientReferenceManifest.clientModules,\n                {\n                  onError: (err: unknown) => {\n                    if (finalServerController.signal.aborted) {\n                      serverIsDynamic = true\n                      if (isPrerenderInterruptedError(err)) {\n                        return err.digest\n                      }\n                      return getDigestForWellKnownError(err)\n                    }\n\n                    return serverComponentsErrorHandler(err)\n                  },\n                  signal: finalServerController.signal,\n                }\n              ),\n            () => {\n              finalServerController.abort()\n            }\n          ))\n\n        let htmlStream\n        const serverPhasedStream = serverPrerenderStreamResult.asPhasedStream()\n        try {\n          const prerender = require('react-dom/static.edge')\n            .prerender as (typeof import('react-dom/static.edge'))['prerender']\n          const result = await prerenderClientWithPhases(\n            () =>\n              workUnitAsyncStorage.run(\n                finalClientPrerenderStore,\n                prerender,\n                <App\n                  reactServerStream={serverPhasedStream}\n                  preinitScripts={preinitScripts}\n                  clientReferenceManifest={clientReferenceManifest}\n                  ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n                  nonce={ctx.nonce}\n                />,\n                {\n                  signal: finalClientController.signal,\n                  onError: (err: unknown, errorInfo: ErrorInfo) => {\n                    if (\n                      isPrerenderInterruptedError(err) ||\n                      finalClientController.signal.aborted\n                    ) {\n                      clientIsDynamic = true\n\n                      const componentStack: string | undefined = (\n                        errorInfo as any\n                      ).componentStack\n                      if (typeof componentStack === 'string') {\n                        trackAllowedDynamicAccess(\n                          workStore.route,\n                          componentStack,\n                          dynamicValidation,\n                          serverDynamicTracking,\n                          clientDynamicTracking\n                        )\n                      }\n                      return\n                    }\n\n                    return htmlRendererErrorHandler(err, errorInfo)\n                  },\n                  // When debugging the static shell, client-side rendering should be\n                  // disabled to prevent blanking out the page.\n                  bootstrapScripts: renderOpts.isDebugStaticShell\n                    ? []\n                    : [bootstrapScript],\n                }\n              ),\n            () => {\n              finalClientController.abort()\n              serverPhasedStream.assertExhausted()\n            }\n          )\n          htmlStream = result.prelude\n        } catch (err) {\n          if (\n            isPrerenderInterruptedError(err) ||\n            finalClientController.signal.aborted\n          ) {\n            // we don't have a root because the abort errored in the root. We can just ignore this error\n          } else {\n            // This error is something else and should bubble up\n            throw err\n          }\n        }\n\n        throwIfDisallowedDynamic(\n          workStore.route,\n          dynamicValidation,\n          serverDynamicTracking,\n          clientDynamicTracking\n        )\n\n        if (serverIsDynamic || clientIsDynamic) {\n          const dynamicReason = serverIsDynamic\n            ? getFirstDynamicReason(serverDynamicTracking)\n            : getFirstDynamicReason(clientDynamicTracking)\n          if (dynamicReason) {\n            throw new DynamicServerError(\n              `Route \"${workStore.route}\" couldn't be rendered statically because it used \\`${dynamicReason}\\`. See more info here: https://nextjs.org/docs/messages/next-prerender-data`\n            )\n          } else {\n            throw new DynamicServerError(\n              `Route \"${workStore.route}\" couldn't be rendered statically it accessed data without explicitly caching it. See more info here: https://nextjs.org/docs/messages/next-prerender-data`\n            )\n          }\n        }\n\n        const flightData = await streamToBuffer(\n          serverPrerenderStreamResult.asStream()\n        )\n        metadata.flightData = flightData\n        metadata.segmentData = await collectSegmentData(\n          flightData,\n          finalClientPrerenderStore,\n          ComponentMod,\n          renderOpts\n        )\n\n        const getServerInsertedHTML = makeGetServerInsertedHTML({\n          polyfills,\n          renderServerInsertedHTML,\n          serverCapturedErrors: allCapturedErrors,\n          basePath: renderOpts.basePath,\n          tracingMetadata: tracingMetadata,\n        })\n        const validateRootLayout = renderOpts.dev\n        return {\n          digestErrorsMap: reactServerErrorsByDigest,\n          ssrErrors: allCapturedErrors,\n          stream: await continueFizzStream(htmlStream!, {\n            inlinedDataStream: createInlinedDataReadableStream(\n              serverPrerenderStreamResult.asStream(),\n              ctx.nonce,\n              formState\n            ),\n            isStaticGeneration: true,\n            getServerInsertedHTML,\n            serverInsertedHTMLToHead: true,\n            validateRootLayout,\n          }),\n          dynamicAccess: consumeDynamicAccess(\n            serverDynamicTracking,\n            clientDynamicTracking\n          ),\n          // TODO: Should this include the SSR pass?\n          collectedRevalidate: finalServerPrerenderStore.revalidate,\n          collectedExpire: finalServerPrerenderStore.expire,\n          collectedStale: finalServerPrerenderStore.stale,\n          collectedTags: finalServerPrerenderStore.tags,\n        }\n      }\n    } else if (renderOpts.experimental.isRoutePPREnabled) {\n      // We're statically generating with PPR and need to do dynamic tracking\n      let dynamicTracking = createDynamicTrackingState(\n        renderOpts.isDebugDynamicAccesses\n      )\n\n      const prerenderResumeDataCache = createPrerenderResumeDataCache()\n      const reactServerPrerenderStore: PrerenderStore = (prerenderStore = {\n        type: 'prerender-ppr',\n        phase: 'render',\n        implicitTags: implicitTags,\n        dynamicTracking,\n        revalidate: INFINITE_CACHE,\n        expire: INFINITE_CACHE,\n        stale: INFINITE_CACHE,\n        tags: [...implicitTags],\n        prerenderResumeDataCache,\n      })\n      const RSCPayload = await workUnitAsyncStorage.run(\n        reactServerPrerenderStore,\n        getRSCPayload,\n        tree,\n        ctx,\n        res.statusCode === 404\n      )\n      const reactServerResult = (reactServerPrerenderResult =\n        await createReactServerPrerenderResultFromRender(\n          workUnitAsyncStorage.run(\n            reactServerPrerenderStore,\n            ComponentMod.renderToReadableStream,\n            // ... the arguments for the function to run\n            RSCPayload,\n            clientReferenceManifest.clientModules,\n            {\n              onError: serverComponentsErrorHandler,\n            }\n          )\n        ))\n\n      const ssrPrerenderStore: PrerenderStore = {\n        type: 'prerender-ppr',\n        phase: 'render',\n        implicitTags: implicitTags,\n        dynamicTracking,\n        revalidate: INFINITE_CACHE,\n        expire: INFINITE_CACHE,\n        stale: INFINITE_CACHE,\n        tags: [...implicitTags],\n        prerenderResumeDataCache,\n      }\n      const prerender = require('react-dom/static.edge')\n        .prerender as (typeof import('react-dom/static.edge'))['prerender']\n      const { prelude, postponed } = await workUnitAsyncStorage.run(\n        ssrPrerenderStore,\n        prerender,\n        <App\n          reactServerStream={reactServerResult.asUnclosingStream()}\n          preinitScripts={preinitScripts}\n          clientReferenceManifest={clientReferenceManifest}\n          ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n          nonce={ctx.nonce}\n        />,\n        {\n          onError: htmlRendererErrorHandler,\n          onHeaders: (headers: Headers) => {\n            headers.forEach((value, key) => {\n              setHeader(key, value)\n            })\n          },\n          maxHeadersLength: renderOpts.reactMaxHeadersLength,\n          // When debugging the static shell, client-side rendering should be\n          // disabled to prevent blanking out the page.\n          bootstrapScripts: renderOpts.isDebugStaticShell\n            ? []\n            : [bootstrapScript],\n        }\n      )\n      const getServerInsertedHTML = makeGetServerInsertedHTML({\n        polyfills,\n        renderServerInsertedHTML,\n        serverCapturedErrors: allCapturedErrors,\n        basePath: renderOpts.basePath,\n        tracingMetadata: tracingMetadata,\n      })\n\n      // After awaiting here we've waited for the entire RSC render to complete. Crucially this means\n      // that when we detect whether we've used dynamic APIs below we know we'll have picked up even\n      // parts of the React Server render that might not be used in the SSR render.\n      const flightData = await streamToBuffer(reactServerResult.asStream())\n\n      if (shouldGenerateStaticFlightData(workStore)) {\n        metadata.flightData = flightData\n        metadata.segmentData = await collectSegmentData(\n          flightData,\n          ssrPrerenderStore,\n          ComponentMod,\n          renderOpts\n        )\n      }\n\n      /**\n       * When prerendering there are three outcomes to consider\n       *\n       *   Dynamic HTML:      The prerender has dynamic holes (caused by using Next.js Dynamic Rendering APIs)\n       *                      We will need to resume this result when requests are handled and we don't include\n       *                      any server inserted HTML or inlined flight data in the static HTML\n       *\n       *   Dynamic Data:      The prerender has no dynamic holes but dynamic APIs were used. We will not\n       *                      resume this render when requests are handled but we will generate new inlined\n       *                      flight data since it is dynamic and differences may end up reconciling on the client\n       *\n       *   Static:            The prerender has no dynamic holes and no dynamic APIs were used. We statically encode\n       *                      all server inserted HTML and flight data\n       */\n      // First we check if we have any dynamic holes in our HTML prerender\n      if (accessedDynamicData(dynamicTracking.dynamicAccesses)) {\n        if (postponed != null) {\n          // Dynamic HTML case.\n          metadata.postponed = await getDynamicHTMLPostponedState(\n            postponed,\n            fallbackRouteParams,\n            prerenderResumeDataCache\n          )\n        } else {\n          // Dynamic Data case.\n          metadata.postponed = await getDynamicDataPostponedState(\n            prerenderResumeDataCache\n          )\n        }\n        // Regardless of whether this is the Dynamic HTML or Dynamic Data case we need to ensure we include\n        // server inserted html in the static response because the html that is part of the prerender may depend on it\n        // It is possible in the set of stream transforms for Dynamic HTML vs Dynamic Data may differ but currently both states\n        // require the same set so we unify the code path here\n        reactServerResult.consume()\n        return {\n          digestErrorsMap: reactServerErrorsByDigest,\n          ssrErrors: allCapturedErrors,\n          stream: await continueDynamicPrerender(prelude, {\n            getServerInsertedHTML,\n          }),\n          dynamicAccess: dynamicTracking.dynamicAccesses,\n          // TODO: Should this include the SSR pass?\n          collectedRevalidate: reactServerPrerenderStore.revalidate,\n          collectedExpire: reactServerPrerenderStore.expire,\n          collectedStale: reactServerPrerenderStore.stale,\n          collectedTags: reactServerPrerenderStore.tags,\n        }\n      } else if (fallbackRouteParams && fallbackRouteParams.size > 0) {\n        // Rendering the fallback case.\n        metadata.postponed = await getDynamicDataPostponedState(\n          prerenderResumeDataCache\n        )\n\n        return {\n          digestErrorsMap: reactServerErrorsByDigest,\n          ssrErrors: allCapturedErrors,\n          stream: await continueDynamicPrerender(prelude, {\n            getServerInsertedHTML,\n          }),\n          dynamicAccess: dynamicTracking.dynamicAccesses,\n          // TODO: Should this include the SSR pass?\n          collectedRevalidate: reactServerPrerenderStore.revalidate,\n          collectedExpire: reactServerPrerenderStore.expire,\n          collectedStale: reactServerPrerenderStore.stale,\n          collectedTags: reactServerPrerenderStore.tags,\n        }\n      } else {\n        // Static case\n        // We still have not used any dynamic APIs. At this point we can produce an entirely static prerender response\n        if (workStore.forceDynamic) {\n          throw new StaticGenBailoutError(\n            'Invariant: a Page with `dynamic = \"force-dynamic\"` did not trigger the dynamic pathway. This is a bug in Next.js'\n          )\n        }\n\n        let htmlStream = prelude\n        if (postponed != null) {\n          // We postponed but nothing dynamic was used. We resume the render now and immediately abort it\n          // so we can set all the postponed boundaries to client render mode before we store the HTML response\n          const resume = require('react-dom/server.edge')\n            .resume as (typeof import('react-dom/server.edge'))['resume']\n\n          // We don't actually want to render anything so we just pass a stream\n          // that never resolves. The resume call is going to abort immediately anyway\n          const foreverStream = new ReadableStream<Uint8Array>()\n\n          const resumeStream = await resume(\n            <App\n              reactServerStream={foreverStream}\n              preinitScripts={() => {}}\n              clientReferenceManifest={clientReferenceManifest}\n              ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n              nonce={ctx.nonce}\n            />,\n            JSON.parse(JSON.stringify(postponed)),\n            {\n              signal: createPostponedAbortSignal('static prerender resume'),\n              onError: htmlRendererErrorHandler,\n              nonce: ctx.nonce,\n            }\n          )\n\n          // First we write everything from the prerender, then we write everything from the aborted resume render\n          htmlStream = chainStreams(prelude, resumeStream)\n        }\n\n        return {\n          digestErrorsMap: reactServerErrorsByDigest,\n          ssrErrors: allCapturedErrors,\n          stream: await continueStaticPrerender(htmlStream, {\n            inlinedDataStream: createInlinedDataReadableStream(\n              reactServerResult.consumeAsStream(),\n              ctx.nonce,\n              formState\n            ),\n            getServerInsertedHTML,\n          }),\n          dynamicAccess: dynamicTracking.dynamicAccesses,\n          // TODO: Should this include the SSR pass?\n          collectedRevalidate: reactServerPrerenderStore.revalidate,\n          collectedExpire: reactServerPrerenderStore.expire,\n          collectedStale: reactServerPrerenderStore.stale,\n          collectedTags: reactServerPrerenderStore.tags,\n        }\n      }\n    } else {\n      const prerenderLegacyStore: PrerenderStore = (prerenderStore = {\n        type: 'prerender-legacy',\n        phase: 'render',\n        implicitTags: implicitTags,\n        revalidate: INFINITE_CACHE,\n        expire: INFINITE_CACHE,\n        stale: INFINITE_CACHE,\n        tags: [...implicitTags],\n      })\n      // This is a regular static generation. We don't do dynamic tracking because we rely on\n      // the old-school dynamic error handling to bail out of static generation\n      const RSCPayload = await workUnitAsyncStorage.run(\n        prerenderLegacyStore,\n        getRSCPayload,\n        tree,\n        ctx,\n        res.statusCode === 404\n      )\n      const reactServerResult = (reactServerPrerenderResult =\n        await createReactServerPrerenderResultFromRender(\n          workUnitAsyncStorage.run(\n            prerenderLegacyStore,\n            ComponentMod.renderToReadableStream,\n            RSCPayload,\n            clientReferenceManifest.clientModules,\n            {\n              onError: serverComponentsErrorHandler,\n            }\n          )\n        ))\n\n      const renderToReadableStream = require('react-dom/server.edge')\n        .renderToReadableStream as (typeof import('react-dom/server.edge'))['renderToReadableStream']\n\n      const htmlStream = await workUnitAsyncStorage.run(\n        prerenderLegacyStore,\n        renderToReadableStream,\n        <App\n          reactServerStream={reactServerResult.asUnclosingStream()}\n          preinitScripts={preinitScripts}\n          clientReferenceManifest={clientReferenceManifest}\n          ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n          nonce={ctx.nonce}\n        />,\n        {\n          onError: htmlRendererErrorHandler,\n          nonce: ctx.nonce,\n          // When debugging the static shell, client-side rendering should be\n          // disabled to prevent blanking out the page.\n          bootstrapScripts: renderOpts.isDebugStaticShell\n            ? []\n            : [bootstrapScript],\n        }\n      )\n\n      if (shouldGenerateStaticFlightData(workStore)) {\n        const flightData = await streamToBuffer(reactServerResult.asStream())\n        metadata.flightData = flightData\n        metadata.segmentData = await collectSegmentData(\n          flightData,\n          prerenderLegacyStore,\n          ComponentMod,\n          renderOpts\n        )\n      }\n\n      const getServerInsertedHTML = makeGetServerInsertedHTML({\n        polyfills,\n        renderServerInsertedHTML,\n        serverCapturedErrors: allCapturedErrors,\n        basePath: renderOpts.basePath,\n        tracingMetadata: tracingMetadata,\n      })\n      return {\n        digestErrorsMap: reactServerErrorsByDigest,\n        ssrErrors: allCapturedErrors,\n        stream: await continueFizzStream(htmlStream, {\n          inlinedDataStream: createInlinedDataReadableStream(\n            reactServerResult.consumeAsStream(),\n            ctx.nonce,\n            formState\n          ),\n          isStaticGeneration: true,\n          getServerInsertedHTML,\n          serverInsertedHTMLToHead: true,\n        }),\n        // TODO: Should this include the SSR pass?\n        collectedRevalidate: prerenderLegacyStore.revalidate,\n        collectedExpire: prerenderLegacyStore.expire,\n        collectedStale: prerenderLegacyStore.stale,\n        collectedTags: prerenderLegacyStore.tags,\n      }\n    }\n  } catch (err) {\n    if (\n      isStaticGenBailoutError(err) ||\n      (typeof err === 'object' &&\n        err !== null &&\n        'message' in err &&\n        typeof err.message === 'string' &&\n        err.message.includes(\n          'https://nextjs.org/docs/advanced-features/static-html-export'\n        ))\n    ) {\n      // Ensure that \"next dev\" prints the red error overlay\n      throw err\n    }\n\n    // If this is a static generation error, we need to throw it so that it\n    // can be handled by the caller if we're in static generation mode.\n    if (isDynamicServerError(err)) {\n      throw err\n    }\n\n    // If a bailout made it to this point, it means it wasn't wrapped inside\n    // a suspense boundary.\n    const shouldBailoutToCSR = isBailoutToCSRError(err)\n    if (shouldBailoutToCSR) {\n      const stack = getStackWithoutErrorMessage(err)\n      error(\n        `${err.reason} should be wrapped in a suspense boundary at page \"${ctx.pagePath}\". Read more: https://nextjs.org/docs/messages/missing-suspense-with-csr-bailout\\n${stack}`\n      )\n\n      throw err\n    }\n\n    // If we errored when we did not have an RSC stream to read from. This is\n    // not just a render error, we need to throw early.\n    if (reactServerPrerenderResult === null) {\n      throw err\n    }\n\n    let errorType: MetadataErrorType | 'redirect' | undefined\n\n    if (isHTTPAccessFallbackError(err)) {\n      res.statusCode = getAccessFallbackHTTPStatus(err)\n      errorType = getAccessFallbackErrorTypeByStatus(res.statusCode)\n    } else if (isRedirectError(err)) {\n      errorType = 'redirect'\n      res.statusCode = getRedirectStatusCodeFromError(err)\n\n      const redirectUrl = addPathPrefix(\n        getURLFromRedirectError(err),\n        renderOpts.basePath\n      )\n\n      setHeader('location', redirectUrl)\n    } else if (!shouldBailoutToCSR) {\n      res.statusCode = 500\n    }\n\n    const [errorPreinitScripts, errorBootstrapScript] = getRequiredScripts(\n      renderOpts.buildManifest,\n      ctx.assetPrefix,\n      renderOpts.crossOrigin,\n      renderOpts.subresourceIntegrityManifest,\n      getAssetQueryString(ctx, false),\n      ctx.nonce,\n      '/_not-found/page'\n    )\n\n    const prerenderLegacyStore: PrerenderStore = (prerenderStore = {\n      type: 'prerender-legacy',\n      phase: 'render',\n      implicitTags: implicitTags,\n      revalidate: INFINITE_CACHE,\n      expire: INFINITE_CACHE,\n      stale: INFINITE_CACHE,\n      tags: [...implicitTags],\n    })\n    const errorRSCPayload = await workUnitAsyncStorage.run(\n      prerenderLegacyStore,\n      getErrorRSCPayload,\n      tree,\n      ctx,\n      errorType\n    )\n\n    const errorServerStream = workUnitAsyncStorage.run(\n      prerenderLegacyStore,\n      ComponentMod.renderToReadableStream,\n      errorRSCPayload,\n      clientReferenceManifest.clientModules,\n      {\n        onError: serverComponentsErrorHandler,\n      }\n    )\n\n    try {\n      const fizzStream = await renderToInitialFizzStream({\n        ReactDOMServer: require('react-dom/server.edge'),\n        element: (\n          <AppWithoutContext\n            reactServerStream={errorServerStream}\n            preinitScripts={errorPreinitScripts}\n            clientReferenceManifest={clientReferenceManifest}\n            nonce={ctx.nonce}\n          />\n        ),\n        streamOptions: {\n          nonce: ctx.nonce,\n          // Include hydration scripts in the HTML\n          bootstrapScripts: [errorBootstrapScript],\n          formState,\n        },\n      })\n\n      if (shouldGenerateStaticFlightData(workStore)) {\n        const flightData = await streamToBuffer(\n          reactServerPrerenderResult.asStream()\n        )\n        metadata.flightData = flightData\n        metadata.segmentData = await collectSegmentData(\n          flightData,\n          prerenderLegacyStore,\n          ComponentMod,\n          renderOpts\n        )\n      }\n\n      const validateRootLayout = renderOpts.dev\n\n      // This is intentionally using the readable datastream from the main\n      // render rather than the flight data from the error page render\n      const flightStream =\n        reactServerPrerenderResult instanceof ServerPrerenderStreamResult\n          ? reactServerPrerenderResult.asStream()\n          : reactServerPrerenderResult.consumeAsStream()\n\n      return {\n        // Returning the error that was thrown so it can be used to handle\n        // the response in the caller.\n        digestErrorsMap: reactServerErrorsByDigest,\n        ssrErrors: allCapturedErrors,\n        stream: await continueFizzStream(fizzStream, {\n          inlinedDataStream: createInlinedDataReadableStream(\n            flightStream,\n            ctx.nonce,\n            formState\n          ),\n          isStaticGeneration: true,\n          getServerInsertedHTML: makeGetServerInsertedHTML({\n            polyfills,\n            renderServerInsertedHTML,\n            serverCapturedErrors: [],\n            basePath: renderOpts.basePath,\n            tracingMetadata: tracingMetadata,\n          }),\n          serverInsertedHTMLToHead: true,\n          validateRootLayout,\n        }),\n        dynamicAccess: null,\n        collectedRevalidate:\n          prerenderStore !== null ? prerenderStore.revalidate : INFINITE_CACHE,\n        collectedExpire:\n          prerenderStore !== null ? prerenderStore.expire : INFINITE_CACHE,\n        collectedStale:\n          prerenderStore !== null ? prerenderStore.stale : INFINITE_CACHE,\n        collectedTags: prerenderStore !== null ? prerenderStore.tags : null,\n      }\n    } catch (finalErr: any) {\n      if (\n        process.env.NODE_ENV === 'development' &&\n        isHTTPAccessFallbackError(finalErr)\n      ) {\n        const { bailOnRootNotFound } =\n          require('../../client/components/dev-root-http-access-fallback-boundary') as typeof import('../../client/components/dev-root-http-access-fallback-boundary')\n        bailOnRootNotFound()\n      }\n      throw finalErr\n    }\n  }\n}\n\nconst loadingChunks: Set<Promise<unknown>> = new Set()\nconst chunkListeners: Array<(x?: unknown) => void> = []\n\nfunction trackChunkLoading(load: Promise<unknown>) {\n  loadingChunks.add(load)\n  load.finally(() => {\n    if (loadingChunks.has(load)) {\n      loadingChunks.delete(load)\n      if (loadingChunks.size === 0) {\n        // We are not currently loading any chunks. We can notify all listeners\n        for (let i = 0; i < chunkListeners.length; i++) {\n          chunkListeners[i]()\n        }\n        chunkListeners.length = 0\n      }\n    }\n  })\n}\n\nexport async function warmFlightResponse(\n  flightStream: ReadableStream<Uint8Array>,\n  clientReferenceManifest: DeepReadonly<ClientReferenceManifest>\n) {\n  let createFromReadableStream\n  if (process.env.TURBOPACK) {\n    createFromReadableStream =\n      // eslint-disable-next-line import/no-extraneous-dependencies\n      require('react-server-dom-turbopack/client.edge').createFromReadableStream\n  } else {\n    createFromReadableStream =\n      // eslint-disable-next-line import/no-extraneous-dependencies\n      require('react-server-dom-webpack/client.edge').createFromReadableStream\n  }\n\n  try {\n    createFromReadableStream(flightStream, {\n      serverConsumerManifest: {\n        moduleLoading: clientReferenceManifest.moduleLoading,\n        moduleMap: clientReferenceManifest.ssrModuleMapping,\n        serverModuleMap: null,\n      },\n    })\n  } catch {\n    // We don't want to handle errors here but we don't want it to\n    // interrupt the outer flow. We simply ignore it here and expect\n    // it will bubble up during a render\n  }\n\n  // We'll wait at least one task and then if no chunks have started to load\n  // we'll we can infer that there are none to load from this flight response\n  trackChunkLoading(waitAtLeastOneReactRenderTask())\n  return new Promise((r) => {\n    chunkListeners.push(r)\n  })\n}\n\nconst getGlobalErrorStyles = async (\n  tree: LoaderTree,\n  ctx: AppRenderContext\n): Promise<React.ReactNode | undefined> => {\n  const {\n    modules: { 'global-error': globalErrorModule },\n  } = parseLoaderTree(tree)\n\n  let globalErrorStyles\n  if (globalErrorModule) {\n    const [, styles] = await createComponentStylesAndScripts({\n      ctx,\n      filePath: globalErrorModule[1],\n      getComponent: globalErrorModule[0],\n      injectedCSS: new Set(),\n      injectedJS: new Set(),\n    })\n    globalErrorStyles = styles\n  }\n\n  return globalErrorStyles\n}\n\nasync function collectSegmentData(\n  fullPageDataBuffer: Buffer,\n  prerenderStore: PrerenderStore,\n  ComponentMod: AppPageModule,\n  renderOpts: RenderOpts\n): Promise<Map<string, Buffer> | undefined> {\n  // Per-segment prefetch data\n  //\n  // All of the segments for a page are generated simultaneously, including\n  // during revalidations. This is to ensure consistency, because it's\n  // possible for a mismatch between a layout and page segment can cause the\n  // client to error during rendering. We want to preserve the ability of the\n  // client to recover from such a mismatch by re-requesting all the segments\n  // to get a consistent view of the page.\n  //\n  // For performance, we reuse the Flight output that was created when\n  // generating the initial page HTML. The Flight stream for the whole page is\n  // decomposed into a separate stream per segment.\n\n  const clientReferenceManifest = renderOpts.clientReferenceManifest\n  if (\n    !clientReferenceManifest ||\n    renderOpts.experimental.isRoutePPREnabled !== true\n  ) {\n    return\n  }\n\n  // Manifest passed to the Flight client for reading the full-page Flight\n  // stream. Based off similar code in use-cache-wrapper.ts.\n  const isEdgeRuntime = process.env.NEXT_RUNTIME === 'edge'\n  const serverConsumerManifest = {\n    // moduleLoading must be null because we don't want to trigger preloads of ClientReferences\n    // to be added to the consumer. Instead, we'll wait for any ClientReference to be emitted\n    // which themselves will handle the preloading.\n    moduleLoading: null,\n    moduleMap: isEdgeRuntime\n      ? clientReferenceManifest.edgeRscModuleMapping\n      : clientReferenceManifest.rscModuleMapping,\n    serverModuleMap: null,\n  }\n\n  const staleTime = prerenderStore.stale\n  return await ComponentMod.collectSegmentData(\n    fullPageDataBuffer,\n    staleTime,\n    clientReferenceManifest.clientModules as ManifestNode,\n    serverConsumerManifest\n  )\n}\n"],"names":["workAsyncStorage","React","RenderResult","chainStreams","renderToInitialFizzStream","createDocumentClosingStream","continueFizzStream","continueDynamicPrerender","continueStaticPrerender","continueDynamicHTMLResume","streamToBuffer","streamToString","stripInternalQueries","NEXT_HMR_REFRESH_HEADER","NEXT_ROUTER_PREFETCH_HEADER","NEXT_ROUTER_STATE_TREE_HEADER","NEXT_ROUTER_STALE_TIME_HEADER","NEXT_URL","RSC_HEADER","createTrackedMetadataContext","createMetadataContext","createRequestStoreForRender","createWorkStore","getAccessFallbackErrorTypeByStatus","getAccessFallbackHTTPStatus","isHTTPAccessFallbackError","getURLFromRedirectError","getRedirectStatusCodeFromError","isRedirectError","getImplicitTags","AppRenderSpan","NextNodeServerSpan","getTracer","FlightRenderResult","createFlightReactServerErrorHandler","createHTMLReactServerErrorHandler","createHTMLErrorHandler","isUserLandError","getDigestForWellKnownError","getShortDynamicParamType","dynamicParamTypes","getSegmentParam","getScriptNonceFromHeader","parseAndValidateFlightRouterState","createFlightRouterStateFromLoaderTree","handleAction","isBailoutToCSRError","warn","error","appendMutableCookies","createServerInsertedHTML","getRequiredScripts","addPathPrefix","makeGetServerInsertedHTML","walkTreeWithFlightRouterState","createComponentTree","getAssetQueryString","setReferenceManifestsSingleton","DynamicState","parsePostponedState","getDynamicDataPostponedState","getDynamicHTMLPostponedState","getPostponedFromState","isDynamicServerError","useFlightStream","createInlinedDataReadableStream","StaticGenBailoutError","isStaticGenBailoutError","getStackWithoutErrorMessage","accessedDynamicData","createPostponedAbortSignal","formatDynamicAPIAccesses","isPrerenderInterruptedError","createDynamicTrackingState","createDynamicValidationState","getFirstDynamicReason","trackAllowedDynamicAccess","throwIfDisallowedDynamic","consumeDynamicAccess","getClientComponentLoaderMetrics","wrapClientComponentLoader","createServerModuleMap","isNodeNextRequest","parseParameter","parseRelativeUrl","AppRouter","getServerActionRequestMetadata","createInitialRouterState","createMutableActionQueue","getRevalidateReason","PAGE_SEGMENT_KEY","DynamicServerError","ServerPrerenderStreamResult","ReactServerResult","createReactServerPrerenderResult","createReactServerPrerenderResultFromRender","prerenderAndAbortInSequentialTasks","prerenderServerWithPhases","prerenderClientWithPhases","printDebugThrownValueForProspectiveRender","scheduleInSequentialTasks","waitAtLeastOneReactRenderTask","workUnitAsyncStorage","CacheSignal","getTracedMetadata","InvariantError","INFINITE_CACHE","createComponentStylesAndScripts","parseLoaderTree","createPrerenderResumeDataCache","createRenderResumeDataCache","flightDataPathHeadKey","parseRequestHeaders","headers","options","isDevWarmupRequest","isDevWarmup","isPrefetchRequest","toLowerCase","undefined","isHmrRefresh","isRSCRequest","shouldProvideFlightRouterState","isRoutePPREnabled","flightRouterState","csp","nonce","createNotFoundLoaderTree","loaderTree","components","children","page","makeGetDynamicParamFromSegment","params","pagePath","fallbackRouteParams","getDynamicParamFromSegment","segment","segmentParam","key","param","value","has","get","Array","isArray","map","i","encodeURIComponent","isCatchall","type","isOptionalCatchall","dynamicParamType","treeSegment","split","slice","flatMap","pathSegment","join","NonIndex","ctx","is404Page","isInvalidStatusCode","res","statusCode","meta","name","content","generateDynamicRSCPayload","flightData","componentMod","tree","createServerSearchParamsForMetadata","createServerParamsForMetadata","createMetadataComponents","MetadataBoundary","ViewportBoundary","appUsingSizeAdjustment","query","requestId","workStore","url","skipFlight","preloadCallbacks","searchParams","MetadataTree","getMetadataReady","metadataContext","pathname","renderOpts","createSegmentPath","child","loaderTreeToFilter","parentParams","isFirst","rscPayloadHead","Fragment","injectedCSS","Set","injectedJS","injectedFontPreloadTags","rootLayoutIncluded","path","actionResult","a","f","b","buildId","S","isStaticGeneration","createErrorContext","renderSource","routerKind","routePath","routeType","isAction","revalidateReason","generateDynamicFlightRenderResult","req","requestStore","onFlightDataRenderError","err","onInstrumentationRequestError","onError","dev","RSCPayload","run","process","env","NODE_ENV","experimental","dynamicIO","resolveValidation","validationOutlet","createValidationOutlet","_validation","spawnDynamicValidationInDev","clientReferenceManifest","route","catch","flightReadableStream","renderToReadableStream","clientModules","temporaryReferences","fetchMetrics","warmupDevRender","prerenderResumeDataCache","renderController","AbortController","prerenderController","cacheSignal","prerenderStore","phase","implicitTags","renderSignal","signal","controller","dynamicTracking","revalidate","expire","stale","tags","rscPayload","cacheReady","abort","devRenderResumeDataCache","prepareInitialCanonicalUrl","search","getRSCPayload","is404","missingSlots","GlobalError","initialTree","errorType","seedData","firstItem","authInterrupts","varyHeader","getHeader","couldBeIntercepted","includes","initialHead","globalErrorStyles","getGlobalErrorStyles","isPossiblyPartialHead","P","Preloads","p","assetPrefix","c","m","G","s","postponed","forEach","preloadFn","getErrorRSCPayload","initialSeedData","html","id","head","body","App","reactServerStream","preinitScripts","ServerInsertedHTMLProvider","response","use","initialState","initialFlightData","initialCanonicalUrlParts","initialParallelRoutes","location","prerendered","actionQueue","HeadManagerContext","require","Provider","appDir","globalErrorComponentAndStyles","AppWithoutContext","renderToHTMLOrFlightImpl","parsedRequestHeaders","requestEndedState","postponedState","serverComponentsHmrCache","isNotFoundPath","requestTimestamp","Date","now","serverActionsManifest","ComponentMod","nextFontManifest","serverActions","enableTainting","__next_app__","instrumented","globalThis","__next_require__","__next_chunk_load__","args","loadingChunk","loadChunk","trackChunkLoading","URL","setAppIsrStatus","NEXT_RUNTIME","originalRequest","on","ended","metrics","reset","startSpan","clientComponentLoading","startTime","clientComponentLoadStart","attributes","clientComponentLoadCount","end","clientComponentLoadTimes","metadata","appUsingSizeAdjust","serverModuleMap","patchFetch","taintObjectReference","crypto","randomUUID","nanoid","isActionRequest","isServerAction","isPrefetch","setRootSpanAttribute","prerenderToStreamWithTracing","wrap","getBodyResult","spanName","prerenderToStream","dynamicAccess","isDebugDynamicAccesses","access","digestErrorsMap","size","buildFailingError","values","next","ssrErrors","length","find","pendingRevalidates","pendingRevalidateWrites","revalidatedTags","waitUntil","Promise","all","incrementalCache","revalidateTag","Object","collectedTags","fetchTags","staleHeader","String","collectedStale","setHeader","forceStatic","collectedRevalidate","staticBailoutInfo","description","dynamicUsageDescription","stack","dynamicUsageStack","stream","renderResumeDataCache","onUpdateCookies","previewProps","usedDynamic","forceDynamic","renderToStreamWithTracing","renderToStream","formState","actionRequestResult","generateFlight","notFoundLoaderTree","result","assignMetadata","renderToHTMLOrFlight","Error","routeModule","definition","renderServerInsertedHTML","tracingMetadata","getTracePropagationData","clientTraceMetadata","polyfills","buildManifest","polyfillFiles","filter","polyfill","endsWith","src","integrity","subresourceIntegrityManifest","crossOrigin","noModule","bootstrapScript","reactServerErrorsByDigest","Map","silenceLogger","onHTMLRenderRSCError","serverComponentsErrorHandler","nextExport","onHTMLRenderSSRError","allCapturedErrors","htmlRendererErrorHandler","reactServerResult","bind","prerenderPhase","environmentName","filterStackFrame","_functionName","startsWith","DATA","inlinedReactServerDataStream","tee","resume","htmlStream","getServerInsertedHTML","serverCapturedErrors","basePath","inlinedDataStream","consume","onHeaders","maxHeadersLength","reactMaxHeadersLength","bootstrapScripts","isDebugStaticShell","generateStaticHTML","supportsDynamicResponse","validateRootLayout","serverInsertedHTMLToHead","message","shouldBailoutToCSR","reason","redirectUrl","Headers","mutableCookies","from","errorPreinitScripts","errorBootstrapScript","errorRSCPayload","errorServerStream","fizzStream","ReactDOMServer","element","streamOptions","finalErr","bailOnRootNotFound","outlet","resolve","isNotFound","initialServerPrerenderController","initialServerRenderController","initialServerPrerenderStore","initialClientController","initialClientPrerenderStore","firstAttemptRSCPayload","initialServerStream","digest","aborted","NEXT_DEBUG_BUILD","__NEXT_VERBOSE_LOGGING","warmupStream","renderStream","warmFlightResponse","prerender","pendingInitialClientResult","finalServerController","serverDynamicTracking","finalServerPrerenderStore","finalClientController","clientDynamicTracking","dynamicValidation","finalClientPrerenderStore","finalServerPayload","serverPrerenderStreamResult","serverPhasedStream","asPhasedStream","errorInfo","componentStack","assertExhausted","LogDynamicValidation","shouldGenerateStaticFlightData","reactServerPrerenderResult","initialServerPayload","pendingInitialServerResult","onPostpone","initialServerResult","asStream","asUnclosingStream","serverIsDynamic","finalRenderPrerenderStore","finalAttemptRSCPayload","clientIsDynamic","prelude","segmentData","collectSegmentData","collectedExpire","foreverStream","ReadableStream","resumeStream","JSON","parse","stringify","consumeAsStream","cache","dynamicReason","reactServerPrerenderStore","ssrPrerenderStore","dynamicAccesses","prerenderLegacyStore","flightStream","loadingChunks","chunkListeners","load","add","finally","delete","createFromReadableStream","TURBOPACK","serverConsumerManifest","moduleLoading","moduleMap","ssrModuleMapping","r","push","modules","globalErrorModule","styles","filePath","getComponent","fullPageDataBuffer","isEdgeRuntime","edgeRscModuleMapping","rscModuleMapping","staleTime"],"mappings":"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"}