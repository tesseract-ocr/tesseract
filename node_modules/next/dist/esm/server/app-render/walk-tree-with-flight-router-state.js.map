{"version":3,"sources":["../../../src/server/app-render/walk-tree-with-flight-router-state.tsx"],"sourcesContent":["import type {\n  FlightDataPath,\n  FlightDataSegment,\n  FlightRouterState,\n  FlightSegmentPath,\n  PreloadCallbacks,\n  Segment,\n} from './types'\nimport {\n  canSegmentBeOverridden,\n  matchSegment,\n} from '../../client/components/match-segments'\nimport type { LoaderTree } from '../lib/app-dir-module'\nimport { getLinkAndScriptTags } from './get-css-inlined-link-tags'\nimport { getPreloadableFonts } from './get-preloadable-fonts'\nimport { createFlightRouterStateFromLoaderTree } from './create-flight-router-state-from-loader-tree'\nimport type { CreateSegmentPath, AppRenderContext } from './app-render'\nimport { hasLoadingComponentInTree } from './has-loading-component-in-tree'\nimport {\n  DEFAULT_SEGMENT_KEY,\n  addSearchParamsIfPageSegment,\n} from '../../shared/lib/segment'\nimport { createComponentTree } from './create-component-tree'\n\n/**\n * Use router state to decide at what common layout to render the page.\n * This can either be the common layout between two pages or a specific place to start rendering from using the \"refetch\" marker in the tree.\n */\nexport async function walkTreeWithFlightRouterState({\n  createSegmentPath,\n  loaderTreeToFilter,\n  parentParams,\n  isFirst,\n  flightRouterState,\n  parentRendered,\n  rscPayloadHead,\n  injectedCSS,\n  injectedJS,\n  injectedFontPreloadTags,\n  rootLayoutIncluded,\n  getMetadataReady,\n  ctx,\n  preloadCallbacks,\n}: {\n  createSegmentPath: CreateSegmentPath\n  loaderTreeToFilter: LoaderTree\n  parentParams: { [key: string]: string | string[] }\n  isFirst: boolean\n  flightRouterState?: FlightRouterState\n  parentRendered?: boolean\n  rscPayloadHead: React.ReactNode\n  injectedCSS: Set<string>\n  injectedJS: Set<string>\n  injectedFontPreloadTags: Set<string>\n  rootLayoutIncluded: boolean\n  getMetadataReady: () => Promise<void>\n  ctx: AppRenderContext\n  preloadCallbacks: PreloadCallbacks\n}): Promise<FlightDataPath[]> {\n  const {\n    renderOpts: { nextFontManifest, experimental },\n    query,\n    isPrefetch,\n    getDynamicParamFromSegment,\n  } = ctx\n\n  const [segment, parallelRoutes, modules] = loaderTreeToFilter\n\n  const parallelRoutesKeys = Object.keys(parallelRoutes)\n\n  const { layout } = modules\n  const isLayout = typeof layout !== 'undefined'\n\n  /**\n   * Checks if the current segment is a root layout.\n   */\n  const rootLayoutAtThisLevel = isLayout && !rootLayoutIncluded\n  /**\n   * Checks if the current segment or any level above it has a root layout.\n   */\n  const rootLayoutIncludedAtThisLevelOrAbove =\n    rootLayoutIncluded || rootLayoutAtThisLevel\n\n  // Because this function walks to a deeper point in the tree to start rendering we have to track the dynamic parameters up to the point where rendering starts\n  const segmentParam = getDynamicParamFromSegment(segment)\n  const currentParams =\n    // Handle null case where dynamic param is optional\n    segmentParam && segmentParam.value !== null\n      ? {\n          ...parentParams,\n          [segmentParam.param]: segmentParam.value,\n        }\n      : parentParams\n  const actualSegment: Segment = addSearchParamsIfPageSegment(\n    segmentParam ? segmentParam.treeSegment : segment,\n    query\n  )\n\n  /**\n   * Decide if the current segment is where rendering has to start.\n   */\n  const renderComponentsOnThisLevel =\n    // No further router state available\n    !flightRouterState ||\n    // Segment in router state does not match current segment\n    !matchSegment(actualSegment, flightRouterState[0]) ||\n    // Last item in the tree\n    parallelRoutesKeys.length === 0 ||\n    // Explicit refresh\n    flightRouterState[3] === 'refetch'\n\n  // Pre-PPR, the `loading` component signals to the router how deep to render the component tree\n  // to ensure prefetches are quick and inexpensive. If there's no `loading` component anywhere in the tree being rendered,\n  // the prefetch will be short-circuited to avoid requesting a potentially very expensive subtree. If there's a `loading`\n  // somewhere in the tree, we'll recursively render the component tree up until we encounter that loading component, and then stop.\n  const shouldSkipComponentTree =\n    !experimental.isRoutePPREnabled &&\n    isPrefetch &&\n    !Boolean(modules.loading) &&\n    !hasLoadingComponentInTree(loaderTreeToFilter)\n\n  if (!parentRendered && renderComponentsOnThisLevel) {\n    const overriddenSegment =\n      flightRouterState &&\n      canSegmentBeOverridden(actualSegment, flightRouterState[0])\n        ? flightRouterState[0]\n        : actualSegment\n\n    const routerState = createFlightRouterStateFromLoaderTree(\n      // Create router state using the slice of the loaderTree\n      loaderTreeToFilter,\n      getDynamicParamFromSegment,\n      query\n    )\n\n    if (shouldSkipComponentTree) {\n      // Send only the router state\n      return [\n        [\n          overriddenSegment,\n          routerState,\n          null,\n          // TODO: It's possible that all the segment data was prefetched during\n          // a navigation, but the head was not. Should we send it down\n          // here anyway?\n          null,\n          false,\n        ] satisfies FlightDataSegment,\n      ]\n    } else {\n      // Create component tree using the slice of the loaderTree\n      const seedData = await createComponentTree(\n        // This ensures flightRouterPath is valid and filters down the tree\n        {\n          ctx,\n          createSegmentPath,\n          loaderTree: loaderTreeToFilter,\n          parentParams: currentParams,\n          firstItem: isFirst,\n          injectedCSS,\n          injectedJS,\n          injectedFontPreloadTags,\n          // This is intentionally not \"rootLayoutIncludedAtThisLevelOrAbove\" as createComponentTree starts at the current level and does a check for \"rootLayoutAtThisLevel\" too.\n          rootLayoutIncluded,\n          getMetadataReady,\n          preloadCallbacks,\n          authInterrupts: experimental.authInterrupts,\n        }\n      )\n\n      return [\n        [\n          overriddenSegment,\n          routerState,\n          seedData,\n          rscPayloadHead,\n          false,\n        ] satisfies FlightDataSegment,\n      ]\n    }\n  }\n\n  // If we are not rendering on this level we need to check if the current\n  // segment has a layout. If so, we need to track all the used CSS to make\n  // the result consistent.\n  const layoutPath = layout?.[1]\n  const injectedCSSWithCurrentLayout = new Set(injectedCSS)\n  const injectedJSWithCurrentLayout = new Set(injectedJS)\n  const injectedFontPreloadTagsWithCurrentLayout = new Set(\n    injectedFontPreloadTags\n  )\n  if (layoutPath) {\n    getLinkAndScriptTags(\n      ctx.clientReferenceManifest,\n      layoutPath,\n      injectedCSSWithCurrentLayout,\n      injectedJSWithCurrentLayout,\n      true\n    )\n    getPreloadableFonts(\n      nextFontManifest,\n      layoutPath,\n      injectedFontPreloadTagsWithCurrentLayout\n    )\n  }\n\n  const paths: FlightDataPath[] = []\n\n  // Walk through all parallel routes.\n  for (const parallelRouteKey of parallelRoutesKeys) {\n    const parallelRoute = parallelRoutes[parallelRouteKey]\n\n    const currentSegmentPath: FlightSegmentPath = isFirst\n      ? [parallelRouteKey]\n      : [actualSegment, parallelRouteKey]\n\n    const subPaths = await walkTreeWithFlightRouterState({\n      ctx,\n      createSegmentPath: (child) => {\n        return createSegmentPath([...currentSegmentPath, ...child])\n      },\n      loaderTreeToFilter: parallelRoute,\n      parentParams: currentParams,\n      flightRouterState:\n        flightRouterState && flightRouterState[1][parallelRouteKey],\n      parentRendered: parentRendered || renderComponentsOnThisLevel,\n      isFirst: false,\n      rscPayloadHead,\n      injectedCSS: injectedCSSWithCurrentLayout,\n      injectedJS: injectedJSWithCurrentLayout,\n      injectedFontPreloadTags: injectedFontPreloadTagsWithCurrentLayout,\n      rootLayoutIncluded: rootLayoutIncludedAtThisLevelOrAbove,\n      getMetadataReady,\n      preloadCallbacks,\n    })\n\n    for (const subPath of subPaths) {\n      // we don't need to send over default routes in the flight data\n      // because they are always ignored by the client, unless it's a refetch\n      if (\n        subPath[0] === DEFAULT_SEGMENT_KEY &&\n        flightRouterState &&\n        !!flightRouterState[1][parallelRouteKey][0] &&\n        flightRouterState[1][parallelRouteKey][3] !== 'refetch'\n      ) {\n        continue\n      }\n\n      paths.push([actualSegment, parallelRouteKey, ...subPath])\n    }\n  }\n\n  return paths\n}\n"],"names":["canSegmentBeOverridden","matchSegment","getLinkAndScriptTags","getPreloadableFonts","createFlightRouterStateFromLoaderTree","hasLoadingComponentInTree","DEFAULT_SEGMENT_KEY","addSearchParamsIfPageSegment","createComponentTree","walkTreeWithFlightRouterState","createSegmentPath","loaderTreeToFilter","parentParams","isFirst","flightRouterState","parentRendered","rscPayloadHead","injectedCSS","injectedJS","injectedFontPreloadTags","rootLayoutIncluded","getMetadataReady","ctx","preloadCallbacks","renderOpts","nextFontManifest","experimental","query","isPrefetch","getDynamicParamFromSegment","segment","parallelRoutes","modules","parallelRoutesKeys","Object","keys","layout","isLayout","rootLayoutAtThisLevel","rootLayoutIncludedAtThisLevelOrAbove","segmentParam","currentParams","value","param","actualSegment","treeSegment","renderComponentsOnThisLevel","length","shouldSkipComponentTree","isRoutePPREnabled","Boolean","loading","overriddenSegment","routerState","seedData","loaderTree","firstItem","authInterrupts","layoutPath","injectedCSSWithCurrentLayout","Set","injectedJSWithCurrentLayout","injectedFontPreloadTagsWithCurrentLayout","clientReferenceManifest","paths","parallelRouteKey","parallelRoute","currentSegmentPath","subPaths","child","subPath","push"],"mappings":"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"}