{"version":3,"sources":["../../../../src/server/lib/router-utils/filesystem.ts"],"sourcesContent":["import type {\n  ManifestRoute,\n  PrerenderManifest,\n  RoutesManifest,\n} from '../../../build'\nimport type { NextConfigComplete } from '../../config-shared'\nimport type { MiddlewareManifest } from '../../../build/webpack/plugins/middleware-plugin'\nimport type { UnwrapPromise } from '../../../lib/coalesced-function'\nimport type { PatchMatcher } from '../../../shared/lib/router/utils/path-match'\nimport type { MiddlewareRouteMatch } from '../../../shared/lib/router/utils/middleware-route-matcher'\n\nimport path from 'path'\nimport fs from 'fs/promises'\nimport * as Log from '../../../build/output/log'\nimport setupDebug from 'next/dist/compiled/debug'\nimport { LRUCache } from '../lru-cache'\nimport loadCustomRoutes, { type Rewrite } from '../../../lib/load-custom-routes'\nimport { modifyRouteRegex } from '../../../lib/redirect-status'\nimport { FileType, fileExists } from '../../../lib/file-exists'\nimport { recursiveReadDir } from '../../../lib/recursive-readdir'\nimport { isDynamicRoute } from '../../../shared/lib/router/utils'\nimport { escapeStringRegexp } from '../../../shared/lib/escape-regexp'\nimport { getPathMatch } from '../../../shared/lib/router/utils/path-match'\nimport { getRouteRegex } from '../../../shared/lib/router/utils/route-regex'\nimport { getRouteMatcher } from '../../../shared/lib/router/utils/route-matcher'\nimport { pathHasPrefix } from '../../../shared/lib/router/utils/path-has-prefix'\nimport { normalizeLocalePath } from '../../../shared/lib/i18n/normalize-locale-path'\nimport { removePathPrefix } from '../../../shared/lib/router/utils/remove-path-prefix'\nimport { getMiddlewareRouteMatcher } from '../../../shared/lib/router/utils/middleware-route-matcher'\nimport {\n  APP_PATH_ROUTES_MANIFEST,\n  BUILD_ID_FILE,\n  MIDDLEWARE_MANIFEST,\n  PAGES_MANIFEST,\n  PRERENDER_MANIFEST,\n  ROUTES_MANIFEST,\n} from '../../../shared/lib/constants'\nimport { normalizePathSep } from '../../../shared/lib/page-path/normalize-path-sep'\nimport { normalizeMetadataRoute } from '../../../lib/metadata/get-metadata-route'\nimport { RSCPathnameNormalizer } from '../../normalizers/request/rsc'\nimport { PrefetchRSCPathnameNormalizer } from '../../normalizers/request/prefetch-rsc'\nimport { encodeURIPath } from '../../../shared/lib/encode-uri-path'\n\nexport type FsOutput = {\n  type:\n    | 'appFile'\n    | 'pageFile'\n    | 'nextImage'\n    | 'publicFolder'\n    | 'nextStaticFolder'\n    | 'legacyStaticFolder'\n    | 'devVirtualFsItem'\n\n  itemPath: string\n  fsPath?: string\n  itemsRoot?: string\n  locale?: string\n}\n\nconst debug = setupDebug('next:router-server:filesystem')\n\nexport type FilesystemDynamicRoute = ManifestRoute & {\n  /**\n   * The path matcher that can be used to match paths against this route.\n   */\n  match: PatchMatcher\n}\n\nexport const buildCustomRoute = <T>(\n  type: 'redirect' | 'header' | 'rewrite' | 'before_files_rewrite',\n  item: T & { source: string },\n  basePath?: string,\n  caseSensitive?: boolean\n): T & { match: PatchMatcher; check?: boolean } => {\n  const restrictedRedirectPaths = ['/_next'].map((p) =>\n    basePath ? `${basePath}${p}` : p\n  )\n  const match = getPathMatch(item.source, {\n    strict: true,\n    removeUnnamedParams: true,\n    regexModifier: !(item as any).internal\n      ? (regex: string) =>\n          modifyRouteRegex(\n            regex,\n            type === 'redirect' ? restrictedRedirectPaths : undefined\n          )\n      : undefined,\n    sensitive: caseSensitive,\n  })\n  return {\n    ...item,\n    ...(type === 'rewrite' ? { check: true } : {}),\n    match,\n  }\n}\n\nexport async function setupFsCheck(opts: {\n  dir: string\n  dev: boolean\n  minimalMode?: boolean\n  config: NextConfigComplete\n  addDevWatcherCallback?: (\n    arg: (files: Map<string, { timestamp: number }>) => void\n  ) => void\n}) {\n  const getItemsLru = !opts.dev\n    ? new LRUCache<FsOutput | null>(1024 * 1024, function length(value) {\n        if (!value) return 0\n        return (\n          (value.fsPath || '').length +\n          value.itemPath.length +\n          value.type.length\n        )\n      })\n    : undefined\n\n  // routes that have _next/data endpoints (SSG/SSP)\n  const nextDataRoutes = new Set<string>()\n  const publicFolderItems = new Set<string>()\n  const nextStaticFolderItems = new Set<string>()\n  const legacyStaticFolderItems = new Set<string>()\n\n  const appFiles = new Set<string>()\n  const pageFiles = new Set<string>()\n  let dynamicRoutes: FilesystemDynamicRoute[] = []\n\n  let middlewareMatcher:\n    | ReturnType<typeof getMiddlewareRouteMatcher>\n    | undefined = () => false\n\n  const distDir = path.join(opts.dir, opts.config.distDir)\n  const publicFolderPath = path.join(opts.dir, 'public')\n  const nextStaticFolderPath = path.join(distDir, 'static')\n  const legacyStaticFolderPath = path.join(opts.dir, 'static')\n  let customRoutes: UnwrapPromise<ReturnType<typeof loadCustomRoutes>> = {\n    redirects: [],\n    rewrites: {\n      beforeFiles: [],\n      afterFiles: [],\n      fallback: [],\n    },\n    headers: [],\n  }\n  let buildId = 'development'\n  let prerenderManifest: PrerenderManifest\n\n  if (!opts.dev) {\n    const buildIdPath = path.join(opts.dir, opts.config.distDir, BUILD_ID_FILE)\n    try {\n      buildId = await fs.readFile(buildIdPath, 'utf8')\n    } catch (err: any) {\n      if (err.code !== 'ENOENT') throw err\n      throw new Error(\n        `Could not find a production build in the '${opts.config.distDir}' directory. Try building your app with 'next build' before starting the production server. https://nextjs.org/docs/messages/production-start-no-build-id`\n      )\n    }\n\n    try {\n      for (const file of await recursiveReadDir(publicFolderPath)) {\n        // Ensure filename is encoded and normalized.\n        publicFolderItems.add(encodeURIPath(normalizePathSep(file)))\n      }\n    } catch (err: any) {\n      if (err.code !== 'ENOENT') {\n        throw err\n      }\n    }\n\n    try {\n      for (const file of await recursiveReadDir(legacyStaticFolderPath)) {\n        // Ensure filename is encoded and normalized.\n        legacyStaticFolderItems.add(encodeURIPath(normalizePathSep(file)))\n      }\n      Log.warn(\n        `The static directory has been deprecated in favor of the public directory. https://nextjs.org/docs/messages/static-dir-deprecated`\n      )\n    } catch (err: any) {\n      if (err.code !== 'ENOENT') {\n        throw err\n      }\n    }\n\n    try {\n      for (const file of await recursiveReadDir(nextStaticFolderPath)) {\n        // Ensure filename is encoded and normalized.\n        nextStaticFolderItems.add(\n          path.posix.join(\n            '/_next/static',\n            encodeURIPath(normalizePathSep(file))\n          )\n        )\n      }\n    } catch (err) {\n      if (opts.config.output !== 'standalone') throw err\n    }\n\n    const routesManifestPath = path.join(distDir, ROUTES_MANIFEST)\n    const prerenderManifestPath = path.join(distDir, PRERENDER_MANIFEST)\n    const middlewareManifestPath = path.join(\n      distDir,\n      'server',\n      MIDDLEWARE_MANIFEST\n    )\n    const pagesManifestPath = path.join(distDir, 'server', PAGES_MANIFEST)\n    const appRoutesManifestPath = path.join(distDir, APP_PATH_ROUTES_MANIFEST)\n\n    const routesManifest = JSON.parse(\n      await fs.readFile(routesManifestPath, 'utf8')\n    ) as RoutesManifest\n\n    prerenderManifest = JSON.parse(\n      await fs.readFile(prerenderManifestPath, 'utf8')\n    ) as PrerenderManifest\n\n    const middlewareManifest = JSON.parse(\n      await fs.readFile(middlewareManifestPath, 'utf8').catch(() => '{}')\n    ) as MiddlewareManifest\n\n    const pagesManifest = JSON.parse(\n      await fs.readFile(pagesManifestPath, 'utf8')\n    )\n    const appRoutesManifest = JSON.parse(\n      await fs.readFile(appRoutesManifestPath, 'utf8').catch(() => '{}')\n    )\n\n    for (const key of Object.keys(pagesManifest)) {\n      // ensure the non-locale version is in the set\n      if (opts.config.i18n) {\n        pageFiles.add(\n          normalizeLocalePath(key, opts.config.i18n.locales).pathname\n        )\n      } else {\n        pageFiles.add(key)\n      }\n    }\n    for (const key of Object.keys(appRoutesManifest)) {\n      appFiles.add(appRoutesManifest[key])\n    }\n\n    const escapedBuildId = escapeStringRegexp(buildId)\n\n    for (const route of routesManifest.dataRoutes) {\n      if (isDynamicRoute(route.page)) {\n        const routeRegex = getRouteRegex(route.page)\n        dynamicRoutes.push({\n          ...route,\n          regex: routeRegex.re.toString(),\n          match: getRouteMatcher({\n            // TODO: fix this in the manifest itself, must also be fixed in\n            // upstream builder that relies on this\n            re: opts.config.i18n\n              ? new RegExp(\n                  route.dataRouteRegex.replace(\n                    `/${escapedBuildId}/`,\n                    `/${escapedBuildId}/(?<nextLocale>[^/]+?)/`\n                  )\n                )\n              : new RegExp(route.dataRouteRegex),\n            groups: routeRegex.groups,\n          }),\n        })\n      }\n      nextDataRoutes.add(route.page)\n    }\n\n    for (const route of routesManifest.dynamicRoutes) {\n      dynamicRoutes.push({\n        ...route,\n        match: getRouteMatcher(getRouteRegex(route.page)),\n      })\n    }\n\n    if (middlewareManifest.middleware?.['/']?.matchers) {\n      middlewareMatcher = getMiddlewareRouteMatcher(\n        middlewareManifest.middleware?.['/']?.matchers\n      )\n    }\n\n    customRoutes = {\n      redirects: routesManifest.redirects,\n      rewrites: routesManifest.rewrites\n        ? Array.isArray(routesManifest.rewrites)\n          ? {\n              beforeFiles: [],\n              afterFiles: routesManifest.rewrites,\n              fallback: [],\n            }\n          : routesManifest.rewrites\n        : {\n            beforeFiles: [],\n            afterFiles: [],\n            fallback: [],\n          },\n      headers: routesManifest.headers,\n    }\n  } else {\n    // dev handling\n    customRoutes = await loadCustomRoutes(opts.config)\n\n    prerenderManifest = {\n      version: 4,\n      routes: {},\n      dynamicRoutes: {},\n      notFoundRoutes: [],\n      preview: {\n        previewModeId: require('crypto').randomBytes(16).toString('hex'),\n        previewModeSigningKey: require('crypto')\n          .randomBytes(32)\n          .toString('hex'),\n        previewModeEncryptionKey: require('crypto')\n          .randomBytes(32)\n          .toString('hex'),\n      },\n    }\n  }\n\n  const headers = customRoutes.headers.map((item) =>\n    buildCustomRoute(\n      'header',\n      item,\n      opts.config.basePath,\n      opts.config.experimental.caseSensitiveRoutes\n    )\n  )\n  const redirects = customRoutes.redirects.map((item) =>\n    buildCustomRoute(\n      'redirect',\n      item,\n      opts.config.basePath,\n      opts.config.experimental.caseSensitiveRoutes\n    )\n  )\n  const rewrites = {\n    beforeFiles: customRoutes.rewrites.beforeFiles.map((item) =>\n      buildCustomRoute('before_files_rewrite', item)\n    ),\n    afterFiles: customRoutes.rewrites.afterFiles.map((item) =>\n      buildCustomRoute(\n        'rewrite',\n        item,\n        opts.config.basePath,\n        opts.config.experimental.caseSensitiveRoutes\n      )\n    ),\n    fallback: customRoutes.rewrites.fallback.map((item) =>\n      buildCustomRoute(\n        'rewrite',\n        item,\n        opts.config.basePath,\n        opts.config.experimental.caseSensitiveRoutes\n      )\n    ),\n  }\n\n  const { i18n } = opts.config\n\n  const handleLocale = (pathname: string, locales?: string[]) => {\n    let locale: string | undefined\n\n    if (i18n) {\n      const i18nResult = normalizeLocalePath(pathname, locales || i18n.locales)\n\n      pathname = i18nResult.pathname\n      locale = i18nResult.detectedLocale\n    }\n    return { locale, pathname }\n  }\n\n  debug('nextDataRoutes', nextDataRoutes)\n  debug('dynamicRoutes', dynamicRoutes)\n  debug('pageFiles', pageFiles)\n  debug('appFiles', appFiles)\n\n  let ensureFn: (item: FsOutput) => Promise<void> | undefined\n\n  const normalizers = {\n    // Because we can't know if the app directory is enabled or not at this\n    // stage, we assume that it is.\n    rsc: new RSCPathnameNormalizer(),\n    prefetchRSC: opts.config.experimental.ppr\n      ? new PrefetchRSCPathnameNormalizer()\n      : undefined,\n  }\n\n  return {\n    headers,\n    rewrites,\n    redirects,\n\n    buildId,\n    handleLocale,\n\n    appFiles,\n    pageFiles,\n    dynamicRoutes,\n    nextDataRoutes,\n\n    exportPathMapRoutes: undefined as\n      | undefined\n      | ReturnType<typeof buildCustomRoute<Rewrite>>[],\n\n    devVirtualFsItems: new Set<string>(),\n\n    prerenderManifest,\n    middlewareMatcher: middlewareMatcher as MiddlewareRouteMatch | undefined,\n\n    ensureCallback(fn: typeof ensureFn) {\n      ensureFn = fn\n    },\n\n    async getItem(itemPath: string): Promise<FsOutput | null> {\n      const originalItemPath = itemPath\n      const itemKey = originalItemPath\n      const lruResult = getItemsLru?.get(itemKey)\n\n      if (lruResult) {\n        return lruResult\n      }\n\n      const { basePath } = opts.config\n\n      const hasBasePath = pathHasPrefix(itemPath, basePath)\n\n      // Return null if path doesn't start with basePath\n      if (basePath && !hasBasePath) {\n        return null\n      }\n\n      // Remove basePath if it exists.\n      if (basePath && hasBasePath) {\n        itemPath = removePathPrefix(itemPath, basePath) || '/'\n      }\n\n      // Simulate minimal mode requests by normalizing RSC and postponed\n      // requests.\n      if (opts.minimalMode) {\n        if (normalizers.prefetchRSC?.match(itemPath)) {\n          itemPath = normalizers.prefetchRSC.normalize(itemPath, true)\n        } else if (normalizers.rsc.match(itemPath)) {\n          itemPath = normalizers.rsc.normalize(itemPath, true)\n        }\n      }\n\n      if (itemPath !== '/' && itemPath.endsWith('/')) {\n        itemPath = itemPath.substring(0, itemPath.length - 1)\n      }\n\n      let decodedItemPath = itemPath\n\n      try {\n        decodedItemPath = decodeURIComponent(itemPath)\n      } catch {}\n\n      if (itemPath === '/_next/image') {\n        return {\n          itemPath,\n          type: 'nextImage',\n        }\n      }\n\n      const itemsToCheck: Array<[Set<string>, FsOutput['type']]> = [\n        [this.devVirtualFsItems, 'devVirtualFsItem'],\n        [nextStaticFolderItems, 'nextStaticFolder'],\n        [legacyStaticFolderItems, 'legacyStaticFolder'],\n        [publicFolderItems, 'publicFolder'],\n        [appFiles, 'appFile'],\n        [pageFiles, 'pageFile'],\n      ]\n\n      for (let [items, type] of itemsToCheck) {\n        let locale: string | undefined\n        let curItemPath = itemPath\n        let curDecodedItemPath = decodedItemPath\n\n        const isDynamicOutput = type === 'pageFile' || type === 'appFile'\n\n        if (i18n) {\n          const localeResult = handleLocale(\n            itemPath,\n            // legacy behavior allows visiting static assets under\n            // default locale but no other locale\n            isDynamicOutput\n              ? undefined\n              : [\n                  i18n?.defaultLocale,\n                  // default locales from domains need to be matched too\n                  ...(i18n.domains?.map((item) => item.defaultLocale) || []),\n                ]\n          )\n\n          if (localeResult.pathname !== curItemPath) {\n            curItemPath = localeResult.pathname\n            locale = localeResult.locale\n\n            try {\n              curDecodedItemPath = decodeURIComponent(curItemPath)\n            } catch {}\n          }\n        }\n\n        if (type === 'legacyStaticFolder') {\n          if (!pathHasPrefix(curItemPath, '/static')) {\n            continue\n          }\n          curItemPath = curItemPath.substring('/static'.length)\n\n          try {\n            curDecodedItemPath = decodeURIComponent(curItemPath)\n          } catch {}\n        }\n\n        if (\n          type === 'nextStaticFolder' &&\n          !pathHasPrefix(curItemPath, '/_next/static')\n        ) {\n          continue\n        }\n\n        const nextDataPrefix = `/_next/data/${buildId}/`\n\n        if (\n          type === 'pageFile' &&\n          curItemPath.startsWith(nextDataPrefix) &&\n          curItemPath.endsWith('.json')\n        ) {\n          items = nextDataRoutes\n          // remove _next/data/<build-id> prefix\n          curItemPath = curItemPath.substring(nextDataPrefix.length - 1)\n\n          // remove .json postfix\n          curItemPath = curItemPath.substring(\n            0,\n            curItemPath.length - '.json'.length\n          )\n          const curLocaleResult = handleLocale(curItemPath)\n          curItemPath =\n            curLocaleResult.pathname === '/index'\n              ? '/'\n              : curLocaleResult.pathname\n\n          locale = curLocaleResult.locale\n\n          try {\n            curDecodedItemPath = decodeURIComponent(curItemPath)\n          } catch {}\n        }\n\n        let matchedItem = items.has(curItemPath)\n\n        // check decoded variant as well\n        if (!matchedItem && !opts.dev) {\n          matchedItem = items.has(curDecodedItemPath)\n          if (matchedItem) curItemPath = curDecodedItemPath\n          else {\n            // x-ref: https://github.com/vercel/next.js/issues/54008\n            // There're cases that urls get decoded before requests, we should support both encoded and decoded ones.\n            // e.g. nginx could decode the proxy urls, the below ones should be treated as the same:\n            // decoded version: `/_next/static/chunks/pages/blog/[slug]-d4858831b91b69f6.js`\n            // encoded version: `/_next/static/chunks/pages/blog/%5Bslug%5D-d4858831b91b69f6.js`\n            try {\n              // encode the special characters in the path and retrieve again to determine if path exists.\n              const encodedCurItemPath = encodeURIPath(curItemPath)\n              matchedItem = items.has(encodedCurItemPath)\n            } catch {}\n          }\n        }\n\n        if (matchedItem || opts.dev) {\n          let fsPath: string | undefined\n          let itemsRoot: string | undefined\n\n          switch (type) {\n            case 'nextStaticFolder': {\n              itemsRoot = nextStaticFolderPath\n              curItemPath = curItemPath.substring('/_next/static'.length)\n              break\n            }\n            case 'legacyStaticFolder': {\n              itemsRoot = legacyStaticFolderPath\n              break\n            }\n            case 'publicFolder': {\n              itemsRoot = publicFolderPath\n              break\n            }\n            default: {\n              break\n            }\n          }\n\n          if (itemsRoot && curItemPath) {\n            fsPath = path.posix.join(itemsRoot, curItemPath)\n          }\n\n          // dynamically check fs in development so we don't\n          // have to wait on the watcher\n          if (!matchedItem && opts.dev) {\n            const isStaticAsset = (\n              [\n                'nextStaticFolder',\n                'publicFolder',\n                'legacyStaticFolder',\n              ] as (typeof type)[]\n            ).includes(type)\n\n            if (isStaticAsset && itemsRoot) {\n              let found = fsPath && (await fileExists(fsPath, FileType.File))\n\n              if (!found) {\n                try {\n                  // In dev, we ensure encoded paths match\n                  // decoded paths on the filesystem so check\n                  // that variation as well\n                  const tempItemPath = decodeURIComponent(curItemPath)\n                  fsPath = path.posix.join(itemsRoot, tempItemPath)\n                  found = await fileExists(fsPath, FileType.File)\n                } catch {}\n\n                if (!found) {\n                  continue\n                }\n              }\n            } else if (type === 'pageFile' || type === 'appFile') {\n              const isAppFile = type === 'appFile'\n              if (\n                ensureFn &&\n                (await ensureFn({\n                  type,\n                  itemPath: isAppFile\n                    ? normalizeMetadataRoute(curItemPath)\n                    : curItemPath,\n                })?.catch(() => 'ENSURE_FAILED')) === 'ENSURE_FAILED'\n              ) {\n                continue\n              }\n            } else {\n              continue\n            }\n          }\n\n          // i18n locales aren't matched for app dir\n          if (type === 'appFile' && locale && locale !== i18n?.defaultLocale) {\n            continue\n          }\n\n          const itemResult = {\n            type,\n            fsPath,\n            locale,\n            itemsRoot,\n            itemPath: curItemPath,\n          }\n\n          getItemsLru?.set(itemKey, itemResult)\n          return itemResult\n        }\n      }\n\n      getItemsLru?.set(itemKey, null)\n      return null\n    },\n    getDynamicRoutes() {\n      // this should include data routes\n      return this.dynamicRoutes\n    },\n    getMiddlewareMatchers() {\n      return this.middlewareMatcher\n    },\n  }\n}\n"],"names":["path","fs","Log","setupDebug","LRUCache","loadCustomRoutes","modifyRouteRegex","FileType","fileExists","recursiveReadDir","isDynamicRoute","escapeStringRegexp","getPathMatch","getRouteRegex","getRouteMatcher","pathHasPrefix","normalizeLocalePath","removePathPrefix","getMiddlewareRouteMatcher","APP_PATH_ROUTES_MANIFEST","BUILD_ID_FILE","MIDDLEWARE_MANIFEST","PAGES_MANIFEST","PRERENDER_MANIFEST","ROUTES_MANIFEST","normalizePathSep","normalizeMetadataRoute","RSCPathnameNormalizer","PrefetchRSCPathnameNormalizer","encodeURIPath","debug","buildCustomRoute","type","item","basePath","caseSensitive","restrictedRedirectPaths","map","p","match","source","strict","removeUnnamedParams","regexModifier","internal","regex","undefined","sensitive","check","setupFsCheck","opts","getItemsLru","dev","length","value","fsPath","itemPath","nextDataRoutes","Set","publicFolderItems","nextStaticFolderItems","legacyStaticFolderItems","appFiles","pageFiles","dynamicRoutes","middlewareMatcher","distDir","join","dir","config","publicFolderPath","nextStaticFolderPath","legacyStaticFolderPath","customRoutes","redirects","rewrites","beforeFiles","afterFiles","fallback","headers","buildId","prerenderManifest","middlewareManifest","buildIdPath","readFile","err","code","Error","file","add","warn","posix","output","routesManifestPath","prerenderManifestPath","middlewareManifestPath","pagesManifestPath","appRoutesManifestPath","routesManifest","JSON","parse","catch","pagesManifest","appRoutesManifest","key","Object","keys","i18n","locales","pathname","escapedBuildId","route","dataRoutes","page","routeRegex","push","re","toString","RegExp","dataRouteRegex","replace","groups","middleware","matchers","Array","isArray","version","routes","notFoundRoutes","preview","previewModeId","require","randomBytes","previewModeSigningKey","previewModeEncryptionKey","experimental","caseSensitiveRoutes","handleLocale","locale","i18nResult","detectedLocale","ensureFn","normalizers","rsc","prefetchRSC","ppr","exportPathMapRoutes","devVirtualFsItems","ensureCallback","fn","getItem","originalItemPath","itemKey","lruResult","get","hasBasePath","minimalMode","normalize","endsWith","substring","decodedItemPath","decodeURIComponent","itemsToCheck","items","curItemPath","curDecodedItemPath","isDynamicOutput","localeResult","defaultLocale","domains","nextDataPrefix","startsWith","curLocaleResult","matchedItem","has","encodedCurItemPath","itemsRoot","isStaticAsset","includes","found","File","tempItemPath","isAppFile","itemResult","set","getDynamicRoutes","getMiddlewareMatchers"],"mappings":"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"}