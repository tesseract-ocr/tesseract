{"version":3,"sources":["../../../../../../src/client/components/react-dev-overlay/internal/helpers/hydration-error-info.ts"],"sourcesContent":["import { getHydrationErrorStackInfo } from '../../../is-hydration-error'\n\nexport type HydrationErrorState = {\n  // Hydration warning template format: <message> <serverContent> <clientContent>\n  warning?: [string, string, string]\n  componentStack?: string\n  serverContent?: string\n  clientContent?: string\n  // React 19 hydration diff format: <notes> <link> <component diff?>\n  notes?: string\n  reactOutputComponentDiff?: string\n}\n\ntype NullableText = string | null | undefined\n\nexport const hydrationErrorState: HydrationErrorState = {}\n\n// https://github.com/facebook/react/blob/main/packages/react-dom/src/__tests__/ReactDOMHydrationDiff-test.js used as a reference\nconst htmlTagsWarnings = new Set([\n  'Warning: In HTML, %s cannot be a child of <%s>.%s\\nThis will cause a hydration error.%s',\n  'Warning: In HTML, %s cannot be a descendant of <%s>.\\nThis will cause a hydration error.%s',\n  'Warning: In HTML, text nodes cannot be a child of <%s>.\\nThis will cause a hydration error.',\n  \"Warning: In HTML, whitespace text nodes cannot be a child of <%s>. Make sure you don't have any extra whitespace between tags on each line of your source code.\\nThis will cause a hydration error.\",\n  'Warning: Expected server HTML to contain a matching <%s> in <%s>.%s',\n  'Warning: Did not expect server HTML to contain a <%s> in <%s>.%s',\n])\nconst textAndTagsMismatchWarnings = new Set([\n  'Warning: Expected server HTML to contain a matching text node for \"%s\" in <%s>.%s',\n  'Warning: Did not expect server HTML to contain the text node \"%s\" in <%s>.%s',\n])\nconst textMismatchWarning =\n  'Warning: Text content did not match. Server: \"%s\" Client: \"%s\"%s'\n\nexport const getHydrationWarningType = (\n  message: NullableText\n): 'tag' | 'text' | 'text-in-tag' => {\n  if (typeof message !== 'string') {\n    // TODO: Doesn't make sense to treat no message as a hydration error message.\n    // We should bail out somewhere earlier.\n    return 'text'\n  }\n\n  const normalizedMessage = message.startsWith('Warning: ')\n    ? message\n    : `Warning: ${message}`\n\n  if (isHtmlTagsWarning(normalizedMessage)) return 'tag'\n  if (isTextInTagsMismatchWarning(normalizedMessage)) return 'text-in-tag'\n\n  return 'text'\n}\n\nconst isHtmlTagsWarning = (message: string) => htmlTagsWarnings.has(message)\n\nconst isTextMismatchWarning = (message: string) =>\n  textMismatchWarning === message\nconst isTextInTagsMismatchWarning = (msg: string) =>\n  textAndTagsMismatchWarnings.has(msg)\n\nconst isKnownHydrationWarning = (message: NullableText) => {\n  if (typeof message !== 'string') {\n    return false\n  }\n  // React 18 has the `Warning: ` prefix.\n  // React 19 does not.\n  const normalizedMessage = message.startsWith('Warning: ')\n    ? message\n    : `Warning: ${message}`\n\n  return (\n    isHtmlTagsWarning(normalizedMessage) ||\n    isTextInTagsMismatchWarning(normalizedMessage) ||\n    isTextMismatchWarning(normalizedMessage)\n  )\n}\n\nexport const getReactHydrationDiffSegments = (msg: NullableText) => {\n  if (msg) {\n    const { message, diff } = getHydrationErrorStackInfo(msg)\n    if (message) return [message, diff]\n  }\n  return undefined\n}\n\n/**\n * Patch console.error to capture hydration errors.\n * If any of the knownHydrationWarnings are logged, store the message and component stack.\n * When the hydration runtime error is thrown, the message and component stack are added to the error.\n * This results in a more helpful error message in the error overlay.\n */\n\nexport function storeHydrationErrorStateFromConsoleArgs(...args: any[]) {\n  const [msg, serverContent, clientContent, componentStack] = args\n  if (isKnownHydrationWarning(msg)) {\n    hydrationErrorState.warning = [\n      // remove the last %s from the message\n      msg,\n      serverContent,\n      clientContent,\n    ]\n    hydrationErrorState.componentStack = componentStack\n    hydrationErrorState.serverContent = serverContent\n    hydrationErrorState.clientContent = clientContent\n  }\n}\n"],"names":["getHydrationErrorStackInfo","hydrationErrorState","htmlTagsWarnings","Set","textAndTagsMismatchWarnings","textMismatchWarning","getHydrationWarningType","message","normalizedMessage","startsWith","isHtmlTagsWarning","isTextInTagsMismatchWarning","has","isTextMismatchWarning","msg","isKnownHydrationWarning","getReactHydrationDiffSegments","diff","undefined","storeHydrationErrorStateFromConsoleArgs","args","serverContent","clientContent","componentStack","warning"],"mappings":"AAAA,SAASA,0BAA0B,QAAQ,8BAA6B;AAexE,OAAO,MAAMC,sBAA2C,CAAC,EAAC;AAE1D,iIAAiI;AACjI,MAAMC,mBAAmB,IAAIC,IAAI;IAC/B;IACA;IACA;IACA;IACA;IACA;CACD;AACD,MAAMC,8BAA8B,IAAID,IAAI;IAC1C;IACA;CACD;AACD,MAAME,sBACJ;AAEF,OAAO,MAAMC,0BAA0B,CACrCC;IAEA,IAAI,OAAOA,YAAY,UAAU;QAC/B,6EAA6E;QAC7E,wCAAwC;QACxC,OAAO;IACT;IAEA,MAAMC,oBAAoBD,QAAQE,UAAU,CAAC,eACzCF,UACA,AAAC,cAAWA;IAEhB,IAAIG,kBAAkBF,oBAAoB,OAAO;IACjD,IAAIG,4BAA4BH,oBAAoB,OAAO;IAE3D,OAAO;AACT,EAAC;AAED,MAAME,oBAAoB,CAACH,UAAoBL,iBAAiBU,GAAG,CAACL;AAEpE,MAAMM,wBAAwB,CAACN,UAC7BF,wBAAwBE;AAC1B,MAAMI,8BAA8B,CAACG,MACnCV,4BAA4BQ,GAAG,CAACE;AAElC,MAAMC,0BAA0B,CAACR;IAC/B,IAAI,OAAOA,YAAY,UAAU;QAC/B,OAAO;IACT;IACA,uCAAuC;IACvC,qBAAqB;IACrB,MAAMC,oBAAoBD,QAAQE,UAAU,CAAC,eACzCF,UACA,AAAC,cAAWA;IAEhB,OACEG,kBAAkBF,sBAClBG,4BAA4BH,sBAC5BK,sBAAsBL;AAE1B;AAEA,OAAO,MAAMQ,gCAAgC,CAACF;IAC5C,IAAIA,KAAK;QACP,MAAM,EAAEP,OAAO,EAAEU,IAAI,EAAE,GAAGjB,2BAA2Bc;QACrD,IAAIP,SAAS,OAAO;YAACA;YAASU;SAAK;IACrC;IACA,OAAOC;AACT,EAAC;AAED;;;;;CAKC,GAED,OAAO,SAASC;IAAwC,IAAA,IAAA,OAAA,UAAA,QAAA,AAAGC,OAAH,UAAA,OAAA,OAAA,GAAA,OAAA,MAAA;QAAGA,KAAH,QAAA,SAAA,CAAA,KAAc;;IACpE,MAAM,CAACN,KAAKO,eAAeC,eAAeC,eAAe,GAAGH;IAC5D,IAAIL,wBAAwBD,MAAM;QAChCb,oBAAoBuB,OAAO,GAAG;YAC5B,sCAAsC;YACtCV;YACAO;YACAC;SACD;QACDrB,oBAAoBsB,cAAc,GAAGA;QACrCtB,oBAAoBoB,aAAa,GAAGA;QACpCpB,oBAAoBqB,aAAa,GAAGA;IACtC;AACF"}