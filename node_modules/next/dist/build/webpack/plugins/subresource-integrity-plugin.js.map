{"version":3,"sources":["../../../../src/build/webpack/plugins/subresource-integrity-plugin.ts"],"sourcesContent":["import { webpack, sources } from 'next/dist/compiled/webpack/webpack'\nimport crypto from 'crypto'\nimport { SUBRESOURCE_INTEGRITY_MANIFEST } from '../../../shared/lib/constants'\n\nconst PLUGIN_NAME = 'SubresourceIntegrityPlugin'\n\nexport type SubresourceIntegrityAlgorithm = 'sha256' | 'sha384' | 'sha512'\n\nexport class SubresourceIntegrityPlugin {\n  constructor(private readonly algorithm: SubresourceIntegrityAlgorithm) {}\n\n  public apply(compiler: webpack.Compiler) {\n    compiler.hooks.make.tap(PLUGIN_NAME, (compilation) => {\n      compilation.hooks.afterOptimizeAssets.tap(\n        {\n          name: PLUGIN_NAME,\n          stage: webpack.Compilation.PROCESS_ASSETS_STAGE_ADDITIONS,\n        },\n        (assets) => {\n          // Collect all the assets.\n          let files = new Set<string>()\n          for (const asset of compilation.getAssets()) {\n            files.add(asset.name)\n          }\n\n          // For each file, deduped, calculate the file hash.\n          const hashes: Record<string, string> = {}\n          for (const file of files.values()) {\n            // Get the buffer for the asset.\n            const asset = assets[file]\n            if (!asset) {\n              throw new Error(`could not get asset: ${file}`)\n            }\n\n            // Get the buffer for the asset.\n            const buffer = asset.buffer()\n\n            // Create the hash for the content.\n            const hash = crypto\n              .createHash(this.algorithm)\n              .update(buffer)\n              .digest()\n              .toString('base64')\n\n            hashes[file] = `${this.algorithm}-${hash}`\n          }\n\n          const json = JSON.stringify(hashes, null, 2)\n          const file = 'server/' + SUBRESOURCE_INTEGRITY_MANIFEST\n          assets[file + '.js'] = new sources.RawSource(\n            `self.__SUBRESOURCE_INTEGRITY_MANIFEST=${JSON.stringify(json)}`\n            // Work around webpack 4 type of RawSource being used\n            // TODO: use webpack 5 type by default\n          ) as unknown as webpack.sources.RawSource\n          assets[file + '.json'] = new sources.RawSource(\n            json\n            // Work around webpack 4 type of RawSource being used\n            // TODO: use webpack 5 type by default\n          ) as unknown as webpack.sources.RawSource\n        }\n      )\n    })\n  }\n}\n"],"names":["SubresourceIntegrityPlugin","PLUGIN_NAME","constructor","algorithm","apply","compiler","hooks","make","tap","compilation","afterOptimizeAssets","name","stage","webpack","Compilation","PROCESS_ASSETS_STAGE_ADDITIONS","assets","files","Set","asset","getAssets","add","hashes","file","values","Error","buffer","hash","crypto","createHash","update","digest","toString","json","JSON","stringify","SUBRESOURCE_INTEGRITY_MANIFEST","sources","RawSource"],"mappings":";;;;+BAQaA;;;eAAAA;;;yBARoB;+DACd;2BAC4B;;;;;;AAE/C,MAAMC,cAAc;AAIb,MAAMD;IACXE,YAAY,AAAiBC,SAAwC,CAAE;aAA1CA,YAAAA;IAA2C;IAEjEC,MAAMC,QAA0B,EAAE;QACvCA,SAASC,KAAK,CAACC,IAAI,CAACC,GAAG,CAACP,aAAa,CAACQ;YACpCA,YAAYH,KAAK,CAACI,mBAAmB,CAACF,GAAG,CACvC;gBACEG,MAAMV;gBACNW,OAAOC,gBAAO,CAACC,WAAW,CAACC,8BAA8B;YAC3D,GACA,CAACC;gBACC,0BAA0B;gBAC1B,IAAIC,QAAQ,IAAIC;gBAChB,KAAK,MAAMC,SAASV,YAAYW,SAAS,GAAI;oBAC3CH,MAAMI,GAAG,CAACF,MAAMR,IAAI;gBACtB;gBAEA,mDAAmD;gBACnD,MAAMW,SAAiC,CAAC;gBACxC,KAAK,MAAMC,QAAQN,MAAMO,MAAM,GAAI;oBACjC,gCAAgC;oBAChC,MAAML,QAAQH,MAAM,CAACO,KAAK;oBAC1B,IAAI,CAACJ,OAAO;wBACV,MAAM,IAAIM,MAAM,CAAC,qBAAqB,EAAEF,MAAM;oBAChD;oBAEA,gCAAgC;oBAChC,MAAMG,SAASP,MAAMO,MAAM;oBAE3B,mCAAmC;oBACnC,MAAMC,OAAOC,eAAM,CAChBC,UAAU,CAAC,IAAI,CAAC1B,SAAS,EACzB2B,MAAM,CAACJ,QACPK,MAAM,GACNC,QAAQ,CAAC;oBAEZV,MAAM,CAACC,KAAK,GAAG,GAAG,IAAI,CAACpB,SAAS,CAAC,CAAC,EAAEwB,MAAM;gBAC5C;gBAEA,MAAMM,OAAOC,KAAKC,SAAS,CAACb,QAAQ,MAAM;gBAC1C,MAAMC,OAAO,YAAYa,yCAA8B;gBACvDpB,MAAM,CAACO,OAAO,MAAM,GAAG,IAAIc,gBAAO,CAACC,SAAS,CAC1C,CAAC,sCAAsC,EAAEJ,KAAKC,SAAS,CAACF,OAAO;gBAIjEjB,MAAM,CAACO,OAAO,QAAQ,GAAG,IAAIc,gBAAO,CAACC,SAAS,CAC5CL;YAIJ;QAEJ;IACF;AACF"}