{"version":3,"sources":["../../../../src/server/lib/router-utils/resolve-routes.ts"],"sourcesContent":["import type { FsOutput } from './filesystem'\nimport type { IncomingMessage, ServerResponse } from 'http'\nimport type { NextConfigComplete } from '../../config-shared'\nimport type { RenderServer, initialize } from '../router-server'\nimport type { PatchMatcher } from '../../../shared/lib/router/utils/path-match'\nimport type { Redirect } from '../../../types'\nimport type { Header, Rewrite } from '../../../lib/load-custom-routes'\nimport type { UnwrapPromise } from '../../../lib/coalesced-function'\nimport type { NextUrlWithParsedQuery } from '../../request-meta'\n\nimport url from 'url'\nimport path from 'node:path'\nimport setupDebug from 'next/dist/compiled/debug'\nimport { getCloneableBody } from '../../body-streams'\nimport { filterReqHeaders, ipcForbiddenHeaders } from '../server-ipc/utils'\nimport { stringifyQuery } from '../../server-route-utils'\nimport { formatHostname } from '../format-hostname'\nimport { toNodeOutgoingHttpHeaders } from '../../web/utils'\nimport { isAbortError } from '../../pipe-readable'\nimport { getHostname } from '../../../shared/lib/get-hostname'\nimport { getRedirectStatus } from '../../../lib/redirect-status'\nimport { normalizeRepeatedSlashes } from '../../../shared/lib/utils'\nimport { relativizeURL } from '../../../shared/lib/router/utils/relativize-url'\nimport { addPathPrefix } from '../../../shared/lib/router/utils/add-path-prefix'\nimport { pathHasPrefix } from '../../../shared/lib/router/utils/path-has-prefix'\nimport { detectDomainLocale } from '../../../shared/lib/i18n/detect-domain-locale'\nimport { normalizeLocalePath } from '../../../shared/lib/i18n/normalize-locale-path'\nimport { removePathPrefix } from '../../../shared/lib/router/utils/remove-path-prefix'\nimport { NextDataPathnameNormalizer } from '../../normalizers/request/next-data'\nimport { BasePathPathnameNormalizer } from '../../normalizers/request/base-path'\n\nimport { addRequestMeta } from '../../request-meta'\nimport {\n  compileNonPath,\n  matchHas,\n  prepareDestination,\n} from '../../../shared/lib/router/utils/prepare-destination'\nimport type { TLSSocket } from 'tls'\nimport { NEXT_ROUTER_STATE_TREE_HEADER } from '../../../client/components/app-router-headers'\nimport { getSelectedParams } from '../../../client/components/router-reducer/compute-changed-path'\nimport { isInterceptionRouteRewrite } from '../../../lib/generate-interception-routes-rewrites'\nimport { parseAndValidateFlightRouterState } from '../../app-render/parse-and-validate-flight-router-state'\n\nconst debug = setupDebug('next:router-server:resolve-routes')\n\nexport function getResolveRoutes(\n  fsChecker: UnwrapPromise<\n    ReturnType<typeof import('./filesystem').setupFsCheck>\n  >,\n  config: NextConfigComplete,\n  opts: Parameters<typeof initialize>[0],\n  renderServer: RenderServer,\n  renderServerOpts: Parameters<RenderServer['initialize']>[0],\n  ensureMiddleware?: (url?: string) => Promise<void>\n) {\n  type Route = {\n    /**\n     * The path matcher to check if this route applies to this request.\n     */\n    match: PatchMatcher\n    check?: boolean\n    name?: string\n  } & Partial<Header> &\n    Partial<Redirect>\n\n  const routes: Route[] = [\n    // _next/data with middleware handling\n    { match: () => ({}), name: 'middleware_next_data' },\n\n    ...(opts.minimalMode ? [] : fsChecker.headers),\n    ...(opts.minimalMode ? [] : fsChecker.redirects),\n\n    // check middleware (using matchers)\n    { match: () => ({}), name: 'middleware' },\n\n    ...(opts.minimalMode ? [] : fsChecker.rewrites.beforeFiles),\n\n    // check middleware (using matchers)\n    { match: () => ({}), name: 'before_files_end' },\n\n    // we check exact matches on fs before continuing to\n    // after files rewrites\n    { match: () => ({}), name: 'check_fs' },\n\n    ...(opts.minimalMode ? [] : fsChecker.rewrites.afterFiles),\n\n    // we always do the check: true handling before continuing to\n    // fallback rewrites\n    {\n      check: true,\n      match: () => ({}),\n      name: 'after files check: true',\n    },\n\n    ...(opts.minimalMode ? [] : fsChecker.rewrites.fallback),\n  ]\n\n  async function resolveRoutes({\n    req,\n    res,\n    isUpgradeReq,\n    invokedOutputs,\n  }: {\n    req: IncomingMessage\n    res: ServerResponse\n    isUpgradeReq: boolean\n    signal: AbortSignal\n    invokedOutputs?: Set<string>\n  }): Promise<{\n    finished: boolean\n    statusCode?: number\n    bodyStream?: ReadableStream | null\n    resHeaders: Record<string, string | string[]>\n    parsedUrl: NextUrlWithParsedQuery\n    matchedOutput?: FsOutput | null\n  }> {\n    let finished = false\n    let resHeaders: Record<string, string | string[]> = {}\n    let matchedOutput: FsOutput | null = null\n    let parsedUrl = url.parse(req.url || '', true) as NextUrlWithParsedQuery\n    let didRewrite = false\n\n    const urlParts = (req.url || '').split('?', 1)\n    const urlNoQuery = urlParts[0]\n\n    // this normalizes repeated slashes in the path e.g. hello//world ->\n    // hello/world or backslashes to forward slashes, this does not\n    // handle trailing slash as that is handled the same as a next.config.js\n    // redirect\n    if (urlNoQuery?.match(/(\\\\|\\/\\/)/)) {\n      parsedUrl = url.parse(normalizeRepeatedSlashes(req.url!), true)\n      return {\n        parsedUrl,\n        resHeaders,\n        finished: true,\n        statusCode: 308,\n      }\n    }\n    // TODO: inherit this from higher up\n    const protocol =\n      (req?.socket as TLSSocket)?.encrypted ||\n      req.headers['x-forwarded-proto']?.includes('https')\n        ? 'https'\n        : 'http'\n\n    // When there are hostname and port we build an absolute URL\n    const initUrl = (config.experimental as any).trustHostHeader\n      ? `https://${req.headers.host || 'localhost'}${req.url}`\n      : opts.port\n        ? `${protocol}://${formatHostname(opts.hostname || 'localhost')}:${\n            opts.port\n          }${req.url}`\n        : req.url || ''\n\n    addRequestMeta(req, 'initURL', initUrl)\n    addRequestMeta(req, 'initQuery', { ...parsedUrl.query })\n    addRequestMeta(req, 'initProtocol', protocol)\n\n    if (!isUpgradeReq) {\n      addRequestMeta(req, 'clonableBody', getCloneableBody(req))\n    }\n\n    const maybeAddTrailingSlash = (pathname: string) => {\n      if (\n        config.trailingSlash &&\n        !config.skipMiddlewareUrlNormalize &&\n        !pathname.endsWith('/')\n      ) {\n        return `${pathname}/`\n      }\n      return pathname\n    }\n\n    let domainLocale: ReturnType<typeof detectDomainLocale> | undefined\n    let defaultLocale: string | undefined\n    let initialLocaleResult:\n      | ReturnType<typeof normalizeLocalePath>\n      | undefined = undefined\n\n    if (config.i18n) {\n      const hadTrailingSlash = parsedUrl.pathname?.endsWith('/')\n      const hadBasePath = pathHasPrefix(\n        parsedUrl.pathname || '',\n        config.basePath\n      )\n      initialLocaleResult = normalizeLocalePath(\n        removePathPrefix(parsedUrl.pathname || '/', config.basePath),\n        config.i18n.locales\n      )\n\n      domainLocale = detectDomainLocale(\n        config.i18n.domains,\n        getHostname(parsedUrl, req.headers)\n      )\n      defaultLocale = domainLocale?.defaultLocale || config.i18n.defaultLocale\n\n      parsedUrl.query.__nextDefaultLocale = defaultLocale\n      parsedUrl.query.__nextLocale =\n        initialLocaleResult.detectedLocale || defaultLocale\n\n      // ensure locale is present for resolving routes\n      if (\n        !initialLocaleResult.detectedLocale &&\n        !initialLocaleResult.pathname.startsWith('/_next/')\n      ) {\n        parsedUrl.pathname = addPathPrefix(\n          initialLocaleResult.pathname === '/'\n            ? `/${defaultLocale}`\n            : addPathPrefix(\n                initialLocaleResult.pathname || '',\n                `/${defaultLocale}`\n              ),\n          hadBasePath ? config.basePath : ''\n        )\n\n        if (hadTrailingSlash) {\n          parsedUrl.pathname = maybeAddTrailingSlash(parsedUrl.pathname)\n        }\n      }\n    } else {\n      // As i18n isn't configured we remove the locale related query params.\n      delete parsedUrl.query.__nextLocale\n      delete parsedUrl.query.__nextDefaultLocale\n      delete parsedUrl.query.__nextInferredLocaleFromDefault\n    }\n\n    const checkLocaleApi = (pathname: string) => {\n      if (\n        config.i18n &&\n        pathname === urlNoQuery &&\n        initialLocaleResult?.detectedLocale &&\n        pathHasPrefix(initialLocaleResult.pathname, '/api')\n      ) {\n        return true\n      }\n    }\n\n    async function checkTrue() {\n      const pathname = parsedUrl.pathname || ''\n\n      if (checkLocaleApi(pathname)) {\n        return\n      }\n      if (!invokedOutputs?.has(pathname)) {\n        const output = await fsChecker.getItem(pathname)\n\n        if (output) {\n          if (\n            config.useFileSystemPublicRoutes ||\n            didRewrite ||\n            (output.type !== 'appFile' && output.type !== 'pageFile')\n          ) {\n            return output\n          }\n        }\n      }\n      const dynamicRoutes = fsChecker.getDynamicRoutes()\n      let curPathname = parsedUrl.pathname\n\n      if (config.basePath) {\n        if (!pathHasPrefix(curPathname || '', config.basePath)) {\n          return\n        }\n        curPathname = curPathname?.substring(config.basePath.length) || '/'\n      }\n      const localeResult = fsChecker.handleLocale(curPathname || '')\n\n      for (const route of dynamicRoutes) {\n        // when resolving fallback: false the\n        // render worker may return a no-fallback response\n        // which signals we need to continue resolving.\n        // TODO: optimize this to collect static paths\n        // to use at the routing layer\n        if (invokedOutputs?.has(route.page)) {\n          continue\n        }\n        const params = route.match(localeResult.pathname)\n\n        if (params) {\n          const pageOutput = await fsChecker.getItem(\n            addPathPrefix(route.page, config.basePath || '')\n          )\n\n          // i18n locales aren't matched for app dir\n          if (\n            pageOutput?.type === 'appFile' &&\n            initialLocaleResult?.detectedLocale\n          ) {\n            continue\n          }\n\n          if (pageOutput && curPathname?.startsWith('/_next/data')) {\n            parsedUrl.query.__nextDataReq = '1'\n          }\n\n          if (config.useFileSystemPublicRoutes || didRewrite) {\n            return pageOutput\n          }\n        }\n      }\n    }\n\n    const normalizers = {\n      basePath:\n        config.basePath && config.basePath !== '/'\n          ? new BasePathPathnameNormalizer(config.basePath)\n          : undefined,\n      data: new NextDataPathnameNormalizer(fsChecker.buildId),\n    }\n\n    async function handleRoute(\n      route: (typeof routes)[0]\n    ): Promise<UnwrapPromise<ReturnType<typeof resolveRoutes>> | void> {\n      let curPathname = parsedUrl.pathname || '/'\n\n      if (config.i18n && route.internal) {\n        const hadTrailingSlash = curPathname.endsWith('/')\n\n        if (config.basePath) {\n          curPathname = removePathPrefix(curPathname, config.basePath)\n        }\n        const hadBasePath = curPathname !== parsedUrl.pathname\n\n        const localeResult = normalizeLocalePath(\n          curPathname,\n          config.i18n.locales\n        )\n        const isDefaultLocale = localeResult.detectedLocale === defaultLocale\n\n        if (isDefaultLocale) {\n          curPathname =\n            localeResult.pathname === '/' && hadBasePath\n              ? config.basePath\n              : addPathPrefix(\n                  localeResult.pathname,\n                  hadBasePath ? config.basePath : ''\n                )\n        } else if (hadBasePath) {\n          curPathname =\n            curPathname === '/'\n              ? config.basePath\n              : addPathPrefix(curPathname, config.basePath)\n        }\n\n        if ((isDefaultLocale || hadBasePath) && hadTrailingSlash) {\n          curPathname = maybeAddTrailingSlash(curPathname)\n        }\n      }\n      let params = route.match(curPathname)\n\n      if ((route.has || route.missing) && params) {\n        const hasParams = matchHas(\n          req,\n          parsedUrl.query,\n          route.has,\n          route.missing\n        )\n        if (hasParams) {\n          Object.assign(params, hasParams)\n        } else {\n          params = false\n        }\n      }\n\n      if (params) {\n        if (\n          fsChecker.exportPathMapRoutes &&\n          route.name === 'before_files_end'\n        ) {\n          for (const exportPathMapRoute of fsChecker.exportPathMapRoutes) {\n            const result = await handleRoute(exportPathMapRoute)\n\n            if (result) {\n              return result\n            }\n          }\n        }\n\n        if (route.name === 'middleware_next_data' && parsedUrl.pathname) {\n          if (fsChecker.getMiddlewareMatchers()?.length) {\n            let normalized = parsedUrl.pathname\n\n            // Remove the base path if it exists.\n            const hadBasePath = normalizers.basePath?.match(parsedUrl.pathname)\n            if (hadBasePath && normalizers.basePath) {\n              normalized = normalizers.basePath.normalize(normalized, true)\n            }\n\n            let updated = false\n            if (normalizers.data.match(normalized)) {\n              updated = true\n              parsedUrl.query.__nextDataReq = '1'\n              normalized = normalizers.data.normalize(normalized, true)\n            }\n\n            if (config.i18n) {\n              const curLocaleResult = normalizeLocalePath(\n                normalized,\n                config.i18n.locales\n              )\n\n              if (curLocaleResult.detectedLocale) {\n                parsedUrl.query.__nextLocale = curLocaleResult.detectedLocale\n              }\n            }\n\n            // If we updated the pathname, and it had a base path, re-add the\n            // base path.\n            if (updated) {\n              if (hadBasePath) {\n                normalized = path.posix.join(config.basePath, normalized)\n              }\n\n              // Re-add the trailing slash (if required).\n              normalized = maybeAddTrailingSlash(normalized)\n\n              parsedUrl.pathname = normalized\n            }\n          }\n        }\n\n        if (route.name === 'check_fs') {\n          const pathname = parsedUrl.pathname || ''\n\n          if (invokedOutputs?.has(pathname) || checkLocaleApi(pathname)) {\n            return\n          }\n          const output = await fsChecker.getItem(pathname)\n\n          if (\n            output &&\n            !(\n              config.i18n &&\n              initialLocaleResult?.detectedLocale &&\n              pathHasPrefix(pathname, '/api')\n            )\n          ) {\n            if (\n              config.useFileSystemPublicRoutes ||\n              didRewrite ||\n              (output.type !== 'appFile' && output.type !== 'pageFile')\n            ) {\n              matchedOutput = output\n\n              if (output.locale) {\n                parsedUrl.query.__nextLocale = output.locale\n              }\n              return {\n                parsedUrl,\n                resHeaders,\n                finished: true,\n                matchedOutput,\n              }\n            }\n          }\n        }\n\n        if (!opts.minimalMode && route.name === 'middleware') {\n          const match = fsChecker.getMiddlewareMatchers()\n          if (\n            // @ts-expect-error BaseNextRequest stuff\n            match?.(parsedUrl.pathname, req, parsedUrl.query)\n          ) {\n            if (ensureMiddleware) {\n              await ensureMiddleware(req.url)\n            }\n\n            const serverResult =\n              await renderServer?.initialize(renderServerOpts)\n\n            if (!serverResult) {\n              throw new Error(`Failed to initialize render server \"middleware\"`)\n            }\n\n            addRequestMeta(req, 'invokePath', '')\n            addRequestMeta(req, 'invokeOutput', '')\n            addRequestMeta(req, 'invokeQuery', {})\n            addRequestMeta(req, 'middlewareInvoke', true)\n            debug('invoking middleware', req.url, req.headers)\n\n            let middlewareRes: Response | undefined = undefined\n            let bodyStream: ReadableStream | undefined = undefined\n            try {\n              try {\n                await serverResult.requestHandler(req, res, parsedUrl)\n              } catch (err: any) {\n                if (!('result' in err) || !('response' in err.result)) {\n                  throw err\n                }\n                middlewareRes = err.result.response as Response\n                res.statusCode = middlewareRes.status\n\n                if (middlewareRes.body) {\n                  bodyStream = middlewareRes.body\n                } else if (middlewareRes.status) {\n                  bodyStream = new ReadableStream({\n                    start(controller) {\n                      controller.enqueue('')\n                      controller.close()\n                    },\n                  })\n                }\n              }\n            } catch (e) {\n              // If the client aborts before we can receive a response object\n              // (when the headers are flushed), then we can early exit without\n              // further processing.\n              if (isAbortError(e)) {\n                return {\n                  parsedUrl,\n                  resHeaders,\n                  finished: true,\n                }\n              }\n              throw e\n            }\n\n            if (res.closed || res.finished || !middlewareRes) {\n              return {\n                parsedUrl,\n                resHeaders,\n                finished: true,\n              }\n            }\n\n            const middlewareHeaders = toNodeOutgoingHttpHeaders(\n              middlewareRes.headers\n            ) as Record<string, string | string[] | undefined>\n\n            debug('middleware res', middlewareRes.status, middlewareHeaders)\n\n            if (middlewareHeaders['x-middleware-override-headers']) {\n              const overriddenHeaders: Set<string> = new Set()\n              let overrideHeaders: string | string[] =\n                middlewareHeaders['x-middleware-override-headers']\n\n              if (typeof overrideHeaders === 'string') {\n                overrideHeaders = overrideHeaders.split(',')\n              }\n\n              for (const key of overrideHeaders) {\n                overriddenHeaders.add(key.trim())\n              }\n              delete middlewareHeaders['x-middleware-override-headers']\n\n              // Delete headers.\n              for (const key of Object.keys(req.headers)) {\n                if (!overriddenHeaders.has(key)) {\n                  delete req.headers[key]\n                }\n              }\n\n              // Update or add headers.\n              for (const key of overriddenHeaders.keys()) {\n                const valueKey = 'x-middleware-request-' + key\n                const newValue = middlewareHeaders[valueKey]\n                const oldValue = req.headers[key]\n\n                if (oldValue !== newValue) {\n                  req.headers[key] = newValue === null ? undefined : newValue\n                }\n                delete middlewareHeaders[valueKey]\n              }\n            }\n\n            if (\n              !middlewareHeaders['x-middleware-rewrite'] &&\n              !middlewareHeaders['x-middleware-next'] &&\n              !middlewareHeaders['location']\n            ) {\n              middlewareHeaders['x-middleware-refresh'] = '1'\n            }\n            delete middlewareHeaders['x-middleware-next']\n\n            for (const [key, value] of Object.entries({\n              ...filterReqHeaders(middlewareHeaders, ipcForbiddenHeaders),\n            })) {\n              if (\n                [\n                  'content-length',\n                  'x-middleware-rewrite',\n                  'x-middleware-redirect',\n                  'x-middleware-refresh',\n                ].includes(key)\n              ) {\n                continue\n              }\n\n              // for set-cookie, the header shouldn't be added to the response\n              // as it's only needed for the request to the middleware function.\n              if (key === 'x-middleware-set-cookie') {\n                req.headers[key] = value\n                continue\n              }\n\n              if (value) {\n                resHeaders[key] = value\n                req.headers[key] = value\n              }\n            }\n\n            if (middlewareHeaders['x-middleware-rewrite']) {\n              const value = middlewareHeaders['x-middleware-rewrite'] as string\n              const rel = relativizeURL(value, initUrl)\n              resHeaders['x-middleware-rewrite'] = rel\n\n              const query = parsedUrl.query\n              parsedUrl = url.parse(rel, true)\n\n              if (parsedUrl.protocol) {\n                return {\n                  parsedUrl,\n                  resHeaders,\n                  finished: true,\n                }\n              }\n\n              // keep internal query state\n              for (const key of Object.keys(query)) {\n                if (key.startsWith('_next') || key.startsWith('__next')) {\n                  parsedUrl.query[key] = query[key]\n                }\n              }\n\n              if (config.i18n) {\n                const curLocaleResult = normalizeLocalePath(\n                  parsedUrl.pathname || '',\n                  config.i18n.locales\n                )\n\n                if (curLocaleResult.detectedLocale) {\n                  parsedUrl.query.__nextLocale = curLocaleResult.detectedLocale\n                }\n              }\n            }\n\n            if (middlewareHeaders['location']) {\n              const value = middlewareHeaders['location'] as string\n              const rel = relativizeURL(value, initUrl)\n              resHeaders['location'] = rel\n              parsedUrl = url.parse(rel, true)\n\n              return {\n                parsedUrl,\n                resHeaders,\n                finished: true,\n                statusCode: middlewareRes.status,\n              }\n            }\n\n            if (middlewareHeaders['x-middleware-refresh']) {\n              return {\n                parsedUrl,\n                resHeaders,\n                finished: true,\n                bodyStream,\n                statusCode: middlewareRes.status,\n              }\n            }\n          }\n        }\n\n        // handle redirect\n        if (\n          ('statusCode' in route || 'permanent' in route) &&\n          route.destination\n        ) {\n          const { parsedDestination } = prepareDestination({\n            appendParamsToQuery: false,\n            destination: route.destination,\n            params: params,\n            query: parsedUrl.query,\n          })\n\n          const { query } = parsedDestination\n          delete (parsedDestination as any).query\n\n          parsedDestination.search = stringifyQuery(req as any, query)\n\n          parsedDestination.pathname = normalizeRepeatedSlashes(\n            parsedDestination.pathname\n          )\n\n          return {\n            finished: true,\n            // @ts-expect-error custom ParsedUrl\n            parsedUrl: parsedDestination,\n            statusCode: getRedirectStatus(route),\n          }\n        }\n\n        // handle headers\n        if (route.headers) {\n          const hasParams = Object.keys(params).length > 0\n          for (const header of route.headers) {\n            let { key, value } = header\n            if (hasParams) {\n              key = compileNonPath(key, params)\n              value = compileNonPath(value, params)\n            }\n\n            if (key.toLowerCase() === 'set-cookie') {\n              if (!Array.isArray(resHeaders[key])) {\n                const val = resHeaders[key]\n                resHeaders[key] = typeof val === 'string' ? [val] : []\n              }\n              ;(resHeaders[key] as string[]).push(value)\n            } else {\n              resHeaders[key] = value\n            }\n          }\n        }\n\n        // handle rewrite\n        if (route.destination) {\n          let rewriteParams = params\n\n          try {\n            // An interception rewrite might reference a dynamic param for a route the user\n            // is currently on, which wouldn't be extractable from the matched route params.\n            // This attempts to extract the dynamic params from the provided router state.\n            if (isInterceptionRouteRewrite(route as Rewrite)) {\n              const stateHeader =\n                req.headers[NEXT_ROUTER_STATE_TREE_HEADER.toLowerCase()]\n\n              if (stateHeader) {\n                rewriteParams = {\n                  ...getSelectedParams(\n                    parseAndValidateFlightRouterState(stateHeader)\n                  ),\n                  ...params,\n                }\n              }\n            }\n          } catch (err) {\n            // this is a no-op -- we couldn't extract dynamic params from the provided router state,\n            // so we'll just use the params from the route matcher\n          }\n\n          const { parsedDestination } = prepareDestination({\n            appendParamsToQuery: true,\n            destination: route.destination,\n            params: rewriteParams,\n            query: parsedUrl.query,\n          })\n\n          if (parsedDestination.protocol) {\n            return {\n              // @ts-expect-error custom ParsedUrl\n              parsedUrl: parsedDestination,\n              finished: true,\n            }\n          }\n\n          if (config.i18n) {\n            const curLocaleResult = normalizeLocalePath(\n              removePathPrefix(parsedDestination.pathname, config.basePath),\n              config.i18n.locales\n            )\n\n            if (curLocaleResult.detectedLocale) {\n              parsedUrl.query.__nextLocale = curLocaleResult.detectedLocale\n            }\n          }\n          didRewrite = true\n          parsedUrl.pathname = parsedDestination.pathname\n          Object.assign(parsedUrl.query, parsedDestination.query)\n        }\n\n        // handle check: true\n        if (route.check) {\n          const output = await checkTrue()\n\n          if (output) {\n            return {\n              parsedUrl,\n              resHeaders,\n              finished: true,\n              matchedOutput: output,\n            }\n          }\n        }\n      }\n    }\n\n    for (const route of routes) {\n      const result = await handleRoute(route)\n      if (result) {\n        return result\n      }\n    }\n\n    return {\n      finished,\n      parsedUrl,\n      resHeaders,\n      matchedOutput,\n    }\n  }\n\n  return resolveRoutes\n}\n"],"names":["getResolveRoutes","debug","setupDebug","fsChecker","config","opts","renderServer","renderServerOpts","ensureMiddleware","routes","match","name","minimalMode","headers","redirects","rewrites","beforeFiles","afterFiles","check","fallback","resolveRoutes","req","res","isUpgradeReq","invokedOutputs","finished","resHeaders","matchedOutput","parsedUrl","url","parse","didRewrite","urlParts","split","urlNoQuery","normalizeRepeatedSlashes","statusCode","protocol","socket","encrypted","includes","initUrl","experimental","trustHostHeader","host","port","formatHostname","hostname","addRequestMeta","query","getCloneableBody","maybeAddTrailingSlash","pathname","trailingSlash","skipMiddlewareUrlNormalize","endsWith","domainLocale","defaultLocale","initialLocaleResult","undefined","i18n","hadTrailingSlash","hadBasePath","pathHasPrefix","basePath","normalizeLocalePath","removePathPrefix","locales","detectDomainLocale","domains","getHostname","__nextDefaultLocale","__nextLocale","detectedLocale","startsWith","addPathPrefix","__nextInferredLocaleFromDefault","checkLocaleApi","checkTrue","has","output","getItem","useFileSystemPublicRoutes","type","dynamicRoutes","getDynamicRoutes","curPathname","substring","length","localeResult","handleLocale","route","page","params","pageOutput","__nextDataReq","normalizers","BasePathPathnameNormalizer","data","NextDataPathnameNormalizer","buildId","handleRoute","internal","isDefaultLocale","missing","hasParams","matchHas","Object","assign","exportPathMapRoutes","exportPathMapRoute","result","getMiddlewareMatchers","normalized","normalize","updated","curLocaleResult","path","posix","join","locale","serverResult","initialize","Error","middlewareRes","bodyStream","requestHandler","err","response","status","body","ReadableStream","start","controller","enqueue","close","e","isAbortError","closed","middlewareHeaders","toNodeOutgoingHttpHeaders","overriddenHeaders","Set","overrideHeaders","key","add","trim","keys","valueKey","newValue","oldValue","value","entries","filterReqHeaders","ipcForbiddenHeaders","rel","relativizeURL","destination","parsedDestination","prepareDestination","appendParamsToQuery","search","stringifyQuery","getRedirectStatus","header","compileNonPath","toLowerCase","Array","isArray","val","push","rewriteParams","isInterceptionRouteRewrite","stateHeader","NEXT_ROUTER_STATE_TREE_HEADER","getSelectedParams","parseAndValidateFlightRouterState"],"mappings":";;;;+BA6CgBA;;;eAAAA;;;4DAnCA;iEACC;8DACM;6BACU;uBACqB;kCACvB;gCACA;wBACW;8BACb;6BACD;gCACM;wBACO;+BACX;+BACA;+BACA;oCACK;qCACC;kCACH;0BACU;0BACA;6BAEZ;oCAKxB;kCAEuC;oCACZ;oDACS;mDACO;;;;;;AAElD,MAAMC,QAAQC,IAAAA,cAAU,EAAC;AAElB,SAASF,iBACdG,SAEC,EACDC,MAA0B,EAC1BC,IAAsC,EACtCC,YAA0B,EAC1BC,gBAA2D,EAC3DC,gBAAkD;IAYlD,MAAMC,SAAkB;QACtB,sCAAsC;QACtC;YAAEC,OAAO,IAAO,CAAA,CAAC,CAAA;YAAIC,MAAM;QAAuB;WAE9CN,KAAKO,WAAW,GAAG,EAAE,GAAGT,UAAUU,OAAO;WACzCR,KAAKO,WAAW,GAAG,EAAE,GAAGT,UAAUW,SAAS;QAE/C,oCAAoC;QACpC;YAAEJ,OAAO,IAAO,CAAA,CAAC,CAAA;YAAIC,MAAM;QAAa;WAEpCN,KAAKO,WAAW,GAAG,EAAE,GAAGT,UAAUY,QAAQ,CAACC,WAAW;QAE1D,oCAAoC;QACpC;YAAEN,OAAO,IAAO,CAAA,CAAC,CAAA;YAAIC,MAAM;QAAmB;QAE9C,oDAAoD;QACpD,uBAAuB;QACvB;YAAED,OAAO,IAAO,CAAA,CAAC,CAAA;YAAIC,MAAM;QAAW;WAElCN,KAAKO,WAAW,GAAG,EAAE,GAAGT,UAAUY,QAAQ,CAACE,UAAU;QAEzD,6DAA6D;QAC7D,oBAAoB;QACpB;YACEC,OAAO;YACPR,OAAO,IAAO,CAAA,CAAC,CAAA;YACfC,MAAM;QACR;WAEIN,KAAKO,WAAW,GAAG,EAAE,GAAGT,UAAUY,QAAQ,CAACI,QAAQ;KACxD;IAED,eAAeC,cAAc,EAC3BC,GAAG,EACHC,GAAG,EACHC,YAAY,EACZC,cAAc,EAOf;YAgCIH,aACDA;QAzBF,IAAII,WAAW;QACf,IAAIC,aAAgD,CAAC;QACrD,IAAIC,gBAAiC;QACrC,IAAIC,YAAYC,YAAG,CAACC,KAAK,CAACT,IAAIQ,GAAG,IAAI,IAAI;QACzC,IAAIE,aAAa;QAEjB,MAAMC,WAAW,AAACX,CAAAA,IAAIQ,GAAG,IAAI,EAAC,EAAGI,KAAK,CAAC,KAAK;QAC5C,MAAMC,aAAaF,QAAQ,CAAC,EAAE;QAE9B,oEAAoE;QACpE,+DAA+D;QAC/D,wEAAwE;QACxE,WAAW;QACX,IAAIE,8BAAAA,WAAYxB,KAAK,CAAC,cAAc;YAClCkB,YAAYC,YAAG,CAACC,KAAK,CAACK,IAAAA,gCAAwB,EAACd,IAAIQ,GAAG,GAAI;YAC1D,OAAO;gBACLD;gBACAF;gBACAD,UAAU;gBACVW,YAAY;YACd;QACF;QACA,oCAAoC;QACpC,MAAMC,WACJ,CAAChB,wBAAAA,cAAAA,IAAKiB,MAAM,qBAAZ,AAACjB,YAA2BkB,SAAS,OACrClB,+BAAAA,IAAIR,OAAO,CAAC,oBAAoB,qBAAhCQ,6BAAkCmB,QAAQ,CAAC,YACvC,UACA;QAEN,4DAA4D;QAC5D,MAAMC,UAAU,AAACrC,OAAOsC,YAAY,CAASC,eAAe,GACxD,CAAC,QAAQ,EAAEtB,IAAIR,OAAO,CAAC+B,IAAI,IAAI,cAAcvB,IAAIQ,GAAG,EAAE,GACtDxB,KAAKwC,IAAI,GACP,GAAGR,SAAS,GAAG,EAAES,IAAAA,8BAAc,EAACzC,KAAK0C,QAAQ,IAAI,aAAa,CAAC,EAC7D1C,KAAKwC,IAAI,GACRxB,IAAIQ,GAAG,EAAE,GACZR,IAAIQ,GAAG,IAAI;QAEjBmB,IAAAA,2BAAc,EAAC3B,KAAK,WAAWoB;QAC/BO,IAAAA,2BAAc,EAAC3B,KAAK,aAAa;YAAE,GAAGO,UAAUqB,KAAK;QAAC;QACtDD,IAAAA,2BAAc,EAAC3B,KAAK,gBAAgBgB;QAEpC,IAAI,CAACd,cAAc;YACjByB,IAAAA,2BAAc,EAAC3B,KAAK,gBAAgB6B,IAAAA,6BAAgB,EAAC7B;QACvD;QAEA,MAAM8B,wBAAwB,CAACC;YAC7B,IACEhD,OAAOiD,aAAa,IACpB,CAACjD,OAAOkD,0BAA0B,IAClC,CAACF,SAASG,QAAQ,CAAC,MACnB;gBACA,OAAO,GAAGH,SAAS,CAAC,CAAC;YACvB;YACA,OAAOA;QACT;QAEA,IAAII;QACJ,IAAIC;QACJ,IAAIC,sBAEYC;QAEhB,IAAIvD,OAAOwD,IAAI,EAAE;gBACUhC;YAAzB,MAAMiC,oBAAmBjC,sBAAAA,UAAUwB,QAAQ,qBAAlBxB,oBAAoB2B,QAAQ,CAAC;YACtD,MAAMO,cAAcC,IAAAA,4BAAa,EAC/BnC,UAAUwB,QAAQ,IAAI,IACtBhD,OAAO4D,QAAQ;YAEjBN,sBAAsBO,IAAAA,wCAAmB,EACvCC,IAAAA,kCAAgB,EAACtC,UAAUwB,QAAQ,IAAI,KAAKhD,OAAO4D,QAAQ,GAC3D5D,OAAOwD,IAAI,CAACO,OAAO;YAGrBX,eAAeY,IAAAA,sCAAkB,EAC/BhE,OAAOwD,IAAI,CAACS,OAAO,EACnBC,IAAAA,wBAAW,EAAC1C,WAAWP,IAAIR,OAAO;YAEpC4C,gBAAgBD,CAAAA,gCAAAA,aAAcC,aAAa,KAAIrD,OAAOwD,IAAI,CAACH,aAAa;YAExE7B,UAAUqB,KAAK,CAACsB,mBAAmB,GAAGd;YACtC7B,UAAUqB,KAAK,CAACuB,YAAY,GAC1Bd,oBAAoBe,cAAc,IAAIhB;YAExC,gDAAgD;YAChD,IACE,CAACC,oBAAoBe,cAAc,IACnC,CAACf,oBAAoBN,QAAQ,CAACsB,UAAU,CAAC,YACzC;gBACA9C,UAAUwB,QAAQ,GAAGuB,IAAAA,4BAAa,EAChCjB,oBAAoBN,QAAQ,KAAK,MAC7B,CAAC,CAAC,EAAEK,eAAe,GACnBkB,IAAAA,4BAAa,EACXjB,oBAAoBN,QAAQ,IAAI,IAChC,CAAC,CAAC,EAAEK,eAAe,GAEzBK,cAAc1D,OAAO4D,QAAQ,GAAG;gBAGlC,IAAIH,kBAAkB;oBACpBjC,UAAUwB,QAAQ,GAAGD,sBAAsBvB,UAAUwB,QAAQ;gBAC/D;YACF;QACF,OAAO;YACL,sEAAsE;YACtE,OAAOxB,UAAUqB,KAAK,CAACuB,YAAY;YACnC,OAAO5C,UAAUqB,KAAK,CAACsB,mBAAmB;YAC1C,OAAO3C,UAAUqB,KAAK,CAAC2B,+BAA+B;QACxD;QAEA,MAAMC,iBAAiB,CAACzB;YACtB,IACEhD,OAAOwD,IAAI,IACXR,aAAalB,eACbwB,uCAAAA,oBAAqBe,cAAc,KACnCV,IAAAA,4BAAa,EAACL,oBAAoBN,QAAQ,EAAE,SAC5C;gBACA,OAAO;YACT;QACF;QAEA,eAAe0B;YACb,MAAM1B,WAAWxB,UAAUwB,QAAQ,IAAI;YAEvC,IAAIyB,eAAezB,WAAW;gBAC5B;YACF;YACA,IAAI,EAAC5B,kCAAAA,eAAgBuD,GAAG,CAAC3B,YAAW;gBAClC,MAAM4B,SAAS,MAAM7E,UAAU8E,OAAO,CAAC7B;gBAEvC,IAAI4B,QAAQ;oBACV,IACE5E,OAAO8E,yBAAyB,IAChCnD,cACCiD,OAAOG,IAAI,KAAK,aAAaH,OAAOG,IAAI,KAAK,YAC9C;wBACA,OAAOH;oBACT;gBACF;YACF;YACA,MAAMI,gBAAgBjF,UAAUkF,gBAAgB;YAChD,IAAIC,cAAc1D,UAAUwB,QAAQ;YAEpC,IAAIhD,OAAO4D,QAAQ,EAAE;gBACnB,IAAI,CAACD,IAAAA,4BAAa,EAACuB,eAAe,IAAIlF,OAAO4D,QAAQ,GAAG;oBACtD;gBACF;gBACAsB,cAAcA,CAAAA,+BAAAA,YAAaC,SAAS,CAACnF,OAAO4D,QAAQ,CAACwB,MAAM,MAAK;YAClE;YACA,MAAMC,eAAetF,UAAUuF,YAAY,CAACJ,eAAe;YAE3D,KAAK,MAAMK,SAASP,cAAe;gBACjC,qCAAqC;gBACrC,kDAAkD;gBAClD,+CAA+C;gBAC/C,8CAA8C;gBAC9C,8BAA8B;gBAC9B,IAAI5D,kCAAAA,eAAgBuD,GAAG,CAACY,MAAMC,IAAI,GAAG;oBACnC;gBACF;gBACA,MAAMC,SAASF,MAAMjF,KAAK,CAAC+E,aAAarC,QAAQ;gBAEhD,IAAIyC,QAAQ;oBACV,MAAMC,aAAa,MAAM3F,UAAU8E,OAAO,CACxCN,IAAAA,4BAAa,EAACgB,MAAMC,IAAI,EAAExF,OAAO4D,QAAQ,IAAI;oBAG/C,0CAA0C;oBAC1C,IACE8B,CAAAA,8BAAAA,WAAYX,IAAI,MAAK,cACrBzB,uCAAAA,oBAAqBe,cAAc,GACnC;wBACA;oBACF;oBAEA,IAAIqB,eAAcR,+BAAAA,YAAaZ,UAAU,CAAC,iBAAgB;wBACxD9C,UAAUqB,KAAK,CAAC8C,aAAa,GAAG;oBAClC;oBAEA,IAAI3F,OAAO8E,yBAAyB,IAAInD,YAAY;wBAClD,OAAO+D;oBACT;gBACF;YACF;QACF;QAEA,MAAME,cAAc;YAClBhC,UACE5D,OAAO4D,QAAQ,IAAI5D,OAAO4D,QAAQ,KAAK,MACnC,IAAIiC,oCAA0B,CAAC7F,OAAO4D,QAAQ,IAC9CL;YACNuC,MAAM,IAAIC,oCAA0B,CAAChG,UAAUiG,OAAO;QACxD;QAEA,eAAeC,YACbV,KAAyB;YAEzB,IAAIL,cAAc1D,UAAUwB,QAAQ,IAAI;YAExC,IAAIhD,OAAOwD,IAAI,IAAI+B,MAAMW,QAAQ,EAAE;gBACjC,MAAMzC,mBAAmByB,YAAY/B,QAAQ,CAAC;gBAE9C,IAAInD,OAAO4D,QAAQ,EAAE;oBACnBsB,cAAcpB,IAAAA,kCAAgB,EAACoB,aAAalF,OAAO4D,QAAQ;gBAC7D;gBACA,MAAMF,cAAcwB,gBAAgB1D,UAAUwB,QAAQ;gBAEtD,MAAMqC,eAAexB,IAAAA,wCAAmB,EACtCqB,aACAlF,OAAOwD,IAAI,CAACO,OAAO;gBAErB,MAAMoC,kBAAkBd,aAAahB,cAAc,KAAKhB;gBAExD,IAAI8C,iBAAiB;oBACnBjB,cACEG,aAAarC,QAAQ,KAAK,OAAOU,cAC7B1D,OAAO4D,QAAQ,GACfW,IAAAA,4BAAa,EACXc,aAAarC,QAAQ,EACrBU,cAAc1D,OAAO4D,QAAQ,GAAG;gBAE1C,OAAO,IAAIF,aAAa;oBACtBwB,cACEA,gBAAgB,MACZlF,OAAO4D,QAAQ,GACfW,IAAAA,4BAAa,EAACW,aAAalF,OAAO4D,QAAQ;gBAClD;gBAEA,IAAI,AAACuC,CAAAA,mBAAmBzC,WAAU,KAAMD,kBAAkB;oBACxDyB,cAAcnC,sBAAsBmC;gBACtC;YACF;YACA,IAAIO,SAASF,MAAMjF,KAAK,CAAC4E;YAEzB,IAAI,AAACK,CAAAA,MAAMZ,GAAG,IAAIY,MAAMa,OAAO,AAAD,KAAMX,QAAQ;gBAC1C,MAAMY,YAAYC,IAAAA,4BAAQ,EACxBrF,KACAO,UAAUqB,KAAK,EACf0C,MAAMZ,GAAG,EACTY,MAAMa,OAAO;gBAEf,IAAIC,WAAW;oBACbE,OAAOC,MAAM,CAACf,QAAQY;gBACxB,OAAO;oBACLZ,SAAS;gBACX;YACF;YAEA,IAAIA,QAAQ;gBACV,IACE1F,UAAU0G,mBAAmB,IAC7BlB,MAAMhF,IAAI,KAAK,oBACf;oBACA,KAAK,MAAMmG,sBAAsB3G,UAAU0G,mBAAmB,CAAE;wBAC9D,MAAME,SAAS,MAAMV,YAAYS;wBAEjC,IAAIC,QAAQ;4BACV,OAAOA;wBACT;oBACF;gBACF;gBAEA,IAAIpB,MAAMhF,IAAI,KAAK,0BAA0BiB,UAAUwB,QAAQ,EAAE;wBAC3DjD;oBAAJ,KAAIA,mCAAAA,UAAU6G,qBAAqB,uBAA/B7G,iCAAmCqF,MAAM,EAAE;4BAIzBQ;wBAHpB,IAAIiB,aAAarF,UAAUwB,QAAQ;wBAEnC,qCAAqC;wBACrC,MAAMU,eAAckC,wBAAAA,YAAYhC,QAAQ,qBAApBgC,sBAAsBtF,KAAK,CAACkB,UAAUwB,QAAQ;wBAClE,IAAIU,eAAekC,YAAYhC,QAAQ,EAAE;4BACvCiD,aAAajB,YAAYhC,QAAQ,CAACkD,SAAS,CAACD,YAAY;wBAC1D;wBAEA,IAAIE,UAAU;wBACd,IAAInB,YAAYE,IAAI,CAACxF,KAAK,CAACuG,aAAa;4BACtCE,UAAU;4BACVvF,UAAUqB,KAAK,CAAC8C,aAAa,GAAG;4BAChCkB,aAAajB,YAAYE,IAAI,CAACgB,SAAS,CAACD,YAAY;wBACtD;wBAEA,IAAI7G,OAAOwD,IAAI,EAAE;4BACf,MAAMwD,kBAAkBnD,IAAAA,wCAAmB,EACzCgD,YACA7G,OAAOwD,IAAI,CAACO,OAAO;4BAGrB,IAAIiD,gBAAgB3C,cAAc,EAAE;gCAClC7C,UAAUqB,KAAK,CAACuB,YAAY,GAAG4C,gBAAgB3C,cAAc;4BAC/D;wBACF;wBAEA,iEAAiE;wBACjE,aAAa;wBACb,IAAI0C,SAAS;4BACX,IAAIrD,aAAa;gCACfmD,aAAaI,iBAAI,CAACC,KAAK,CAACC,IAAI,CAACnH,OAAO4D,QAAQ,EAAEiD;4BAChD;4BAEA,2CAA2C;4BAC3CA,aAAa9D,sBAAsB8D;4BAEnCrF,UAAUwB,QAAQ,GAAG6D;wBACvB;oBACF;gBACF;gBAEA,IAAItB,MAAMhF,IAAI,KAAK,YAAY;oBAC7B,MAAMyC,WAAWxB,UAAUwB,QAAQ,IAAI;oBAEvC,IAAI5B,CAAAA,kCAAAA,eAAgBuD,GAAG,CAAC3B,cAAayB,eAAezB,WAAW;wBAC7D;oBACF;oBACA,MAAM4B,SAAS,MAAM7E,UAAU8E,OAAO,CAAC7B;oBAEvC,IACE4B,UACA,CACE5E,CAAAA,OAAOwD,IAAI,KACXF,uCAAAA,oBAAqBe,cAAc,KACnCV,IAAAA,4BAAa,EAACX,UAAU,OAAM,GAEhC;wBACA,IACEhD,OAAO8E,yBAAyB,IAChCnD,cACCiD,OAAOG,IAAI,KAAK,aAAaH,OAAOG,IAAI,KAAK,YAC9C;4BACAxD,gBAAgBqD;4BAEhB,IAAIA,OAAOwC,MAAM,EAAE;gCACjB5F,UAAUqB,KAAK,CAACuB,YAAY,GAAGQ,OAAOwC,MAAM;4BAC9C;4BACA,OAAO;gCACL5F;gCACAF;gCACAD,UAAU;gCACVE;4BACF;wBACF;oBACF;gBACF;gBAEA,IAAI,CAACtB,KAAKO,WAAW,IAAI+E,MAAMhF,IAAI,KAAK,cAAc;oBACpD,MAAMD,QAAQP,UAAU6G,qBAAqB;oBAC7C,IACE,yCAAyC;oBACzCtG,yBAAAA,MAAQkB,UAAUwB,QAAQ,EAAE/B,KAAKO,UAAUqB,KAAK,GAChD;wBACA,IAAIzC,kBAAkB;4BACpB,MAAMA,iBAAiBa,IAAIQ,GAAG;wBAChC;wBAEA,MAAM4F,eACJ,OAAMnH,gCAAAA,aAAcoH,UAAU,CAACnH;wBAEjC,IAAI,CAACkH,cAAc;4BACjB,MAAM,IAAIE,MAAM,CAAC,+CAA+C,CAAC;wBACnE;wBAEA3E,IAAAA,2BAAc,EAAC3B,KAAK,cAAc;wBAClC2B,IAAAA,2BAAc,EAAC3B,KAAK,gBAAgB;wBACpC2B,IAAAA,2BAAc,EAAC3B,KAAK,eAAe,CAAC;wBACpC2B,IAAAA,2BAAc,EAAC3B,KAAK,oBAAoB;wBACxCpB,MAAM,uBAAuBoB,IAAIQ,GAAG,EAAER,IAAIR,OAAO;wBAEjD,IAAI+G,gBAAsCjE;wBAC1C,IAAIkE,aAAyClE;wBAC7C,IAAI;4BACF,IAAI;gCACF,MAAM8D,aAAaK,cAAc,CAACzG,KAAKC,KAAKM;4BAC9C,EAAE,OAAOmG,KAAU;gCACjB,IAAI,CAAE,CAAA,YAAYA,GAAE,KAAM,CAAE,CAAA,cAAcA,IAAIhB,MAAM,AAAD,GAAI;oCACrD,MAAMgB;gCACR;gCACAH,gBAAgBG,IAAIhB,MAAM,CAACiB,QAAQ;gCACnC1G,IAAIc,UAAU,GAAGwF,cAAcK,MAAM;gCAErC,IAAIL,cAAcM,IAAI,EAAE;oCACtBL,aAAaD,cAAcM,IAAI;gCACjC,OAAO,IAAIN,cAAcK,MAAM,EAAE;oCAC/BJ,aAAa,IAAIM,eAAe;wCAC9BC,OAAMC,UAAU;4CACdA,WAAWC,OAAO,CAAC;4CACnBD,WAAWE,KAAK;wCAClB;oCACF;gCACF;4BACF;wBACF,EAAE,OAAOC,GAAG;4BACV,+DAA+D;4BAC/D,iEAAiE;4BACjE,sBAAsB;4BACtB,IAAIC,IAAAA,0BAAY,EAACD,IAAI;gCACnB,OAAO;oCACL5G;oCACAF;oCACAD,UAAU;gCACZ;4BACF;4BACA,MAAM+G;wBACR;wBAEA,IAAIlH,IAAIoH,MAAM,IAAIpH,IAAIG,QAAQ,IAAI,CAACmG,eAAe;4BAChD,OAAO;gCACLhG;gCACAF;gCACAD,UAAU;4BACZ;wBACF;wBAEA,MAAMkH,oBAAoBC,IAAAA,iCAAyB,EACjDhB,cAAc/G,OAAO;wBAGvBZ,MAAM,kBAAkB2H,cAAcK,MAAM,EAAEU;wBAE9C,IAAIA,iBAAiB,CAAC,gCAAgC,EAAE;4BACtD,MAAME,oBAAiC,IAAIC;4BAC3C,IAAIC,kBACFJ,iBAAiB,CAAC,gCAAgC;4BAEpD,IAAI,OAAOI,oBAAoB,UAAU;gCACvCA,kBAAkBA,gBAAgB9G,KAAK,CAAC;4BAC1C;4BAEA,KAAK,MAAM+G,OAAOD,gBAAiB;gCACjCF,kBAAkBI,GAAG,CAACD,IAAIE,IAAI;4BAChC;4BACA,OAAOP,iBAAiB,CAAC,gCAAgC;4BAEzD,kBAAkB;4BAClB,KAAK,MAAMK,OAAOrC,OAAOwC,IAAI,CAAC9H,IAAIR,OAAO,EAAG;gCAC1C,IAAI,CAACgI,kBAAkB9D,GAAG,CAACiE,MAAM;oCAC/B,OAAO3H,IAAIR,OAAO,CAACmI,IAAI;gCACzB;4BACF;4BAEA,yBAAyB;4BACzB,KAAK,MAAMA,OAAOH,kBAAkBM,IAAI,GAAI;gCAC1C,MAAMC,WAAW,0BAA0BJ;gCAC3C,MAAMK,WAAWV,iBAAiB,CAACS,SAAS;gCAC5C,MAAME,WAAWjI,IAAIR,OAAO,CAACmI,IAAI;gCAEjC,IAAIM,aAAaD,UAAU;oCACzBhI,IAAIR,OAAO,CAACmI,IAAI,GAAGK,aAAa,OAAO1F,YAAY0F;gCACrD;gCACA,OAAOV,iBAAiB,CAACS,SAAS;4BACpC;wBACF;wBAEA,IACE,CAACT,iBAAiB,CAAC,uBAAuB,IAC1C,CAACA,iBAAiB,CAAC,oBAAoB,IACvC,CAACA,iBAAiB,CAAC,WAAW,EAC9B;4BACAA,iBAAiB,CAAC,uBAAuB,GAAG;wBAC9C;wBACA,OAAOA,iBAAiB,CAAC,oBAAoB;wBAE7C,KAAK,MAAM,CAACK,KAAKO,MAAM,IAAI5C,OAAO6C,OAAO,CAAC;4BACxC,GAAGC,IAAAA,uBAAgB,EAACd,mBAAmBe,0BAAmB,CAAC;wBAC7D,GAAI;4BACF,IACE;gCACE;gCACA;gCACA;gCACA;6BACD,CAAClH,QAAQ,CAACwG,MACX;gCACA;4BACF;4BAEA,gEAAgE;4BAChE,kEAAkE;4BAClE,IAAIA,QAAQ,2BAA2B;gCACrC3H,IAAIR,OAAO,CAACmI,IAAI,GAAGO;gCACnB;4BACF;4BAEA,IAAIA,OAAO;gCACT7H,UAAU,CAACsH,IAAI,GAAGO;gCAClBlI,IAAIR,OAAO,CAACmI,IAAI,GAAGO;4BACrB;wBACF;wBAEA,IAAIZ,iBAAiB,CAAC,uBAAuB,EAAE;4BAC7C,MAAMY,QAAQZ,iBAAiB,CAAC,uBAAuB;4BACvD,MAAMgB,MAAMC,IAAAA,4BAAa,EAACL,OAAO9G;4BACjCf,UAAU,CAAC,uBAAuB,GAAGiI;4BAErC,MAAM1G,QAAQrB,UAAUqB,KAAK;4BAC7BrB,YAAYC,YAAG,CAACC,KAAK,CAAC6H,KAAK;4BAE3B,IAAI/H,UAAUS,QAAQ,EAAE;gCACtB,OAAO;oCACLT;oCACAF;oCACAD,UAAU;gCACZ;4BACF;4BAEA,4BAA4B;4BAC5B,KAAK,MAAMuH,OAAOrC,OAAOwC,IAAI,CAAClG,OAAQ;gCACpC,IAAI+F,IAAItE,UAAU,CAAC,YAAYsE,IAAItE,UAAU,CAAC,WAAW;oCACvD9C,UAAUqB,KAAK,CAAC+F,IAAI,GAAG/F,KAAK,CAAC+F,IAAI;gCACnC;4BACF;4BAEA,IAAI5I,OAAOwD,IAAI,EAAE;gCACf,MAAMwD,kBAAkBnD,IAAAA,wCAAmB,EACzCrC,UAAUwB,QAAQ,IAAI,IACtBhD,OAAOwD,IAAI,CAACO,OAAO;gCAGrB,IAAIiD,gBAAgB3C,cAAc,EAAE;oCAClC7C,UAAUqB,KAAK,CAACuB,YAAY,GAAG4C,gBAAgB3C,cAAc;gCAC/D;4BACF;wBACF;wBAEA,IAAIkE,iBAAiB,CAAC,WAAW,EAAE;4BACjC,MAAMY,QAAQZ,iBAAiB,CAAC,WAAW;4BAC3C,MAAMgB,MAAMC,IAAAA,4BAAa,EAACL,OAAO9G;4BACjCf,UAAU,CAAC,WAAW,GAAGiI;4BACzB/H,YAAYC,YAAG,CAACC,KAAK,CAAC6H,KAAK;4BAE3B,OAAO;gCACL/H;gCACAF;gCACAD,UAAU;gCACVW,YAAYwF,cAAcK,MAAM;4BAClC;wBACF;wBAEA,IAAIU,iBAAiB,CAAC,uBAAuB,EAAE;4BAC7C,OAAO;gCACL/G;gCACAF;gCACAD,UAAU;gCACVoG;gCACAzF,YAAYwF,cAAcK,MAAM;4BAClC;wBACF;oBACF;gBACF;gBAEA,kBAAkB;gBAClB,IACE,AAAC,CAAA,gBAAgBtC,SAAS,eAAeA,KAAI,KAC7CA,MAAMkE,WAAW,EACjB;oBACA,MAAM,EAAEC,iBAAiB,EAAE,GAAGC,IAAAA,sCAAkB,EAAC;wBAC/CC,qBAAqB;wBACrBH,aAAalE,MAAMkE,WAAW;wBAC9BhE,QAAQA;wBACR5C,OAAOrB,UAAUqB,KAAK;oBACxB;oBAEA,MAAM,EAAEA,KAAK,EAAE,GAAG6G;oBAClB,OAAO,AAACA,kBAA0B7G,KAAK;oBAEvC6G,kBAAkBG,MAAM,GAAGC,IAAAA,gCAAc,EAAC7I,KAAY4B;oBAEtD6G,kBAAkB1G,QAAQ,GAAGjB,IAAAA,gCAAwB,EACnD2H,kBAAkB1G,QAAQ;oBAG5B,OAAO;wBACL3B,UAAU;wBACV,oCAAoC;wBACpCG,WAAWkI;wBACX1H,YAAY+H,IAAAA,iCAAiB,EAACxE;oBAChC;gBACF;gBAEA,iBAAiB;gBACjB,IAAIA,MAAM9E,OAAO,EAAE;oBACjB,MAAM4F,YAAYE,OAAOwC,IAAI,CAACtD,QAAQL,MAAM,GAAG;oBAC/C,KAAK,MAAM4E,UAAUzE,MAAM9E,OAAO,CAAE;wBAClC,IAAI,EAAEmI,GAAG,EAAEO,KAAK,EAAE,GAAGa;wBACrB,IAAI3D,WAAW;4BACbuC,MAAMqB,IAAAA,kCAAc,EAACrB,KAAKnD;4BAC1B0D,QAAQc,IAAAA,kCAAc,EAACd,OAAO1D;wBAChC;wBAEA,IAAImD,IAAIsB,WAAW,OAAO,cAAc;4BACtC,IAAI,CAACC,MAAMC,OAAO,CAAC9I,UAAU,CAACsH,IAAI,GAAG;gCACnC,MAAMyB,MAAM/I,UAAU,CAACsH,IAAI;gCAC3BtH,UAAU,CAACsH,IAAI,GAAG,OAAOyB,QAAQ,WAAW;oCAACA;iCAAI,GAAG,EAAE;4BACxD;;4BACE/I,UAAU,CAACsH,IAAI,CAAc0B,IAAI,CAACnB;wBACtC,OAAO;4BACL7H,UAAU,CAACsH,IAAI,GAAGO;wBACpB;oBACF;gBACF;gBAEA,iBAAiB;gBACjB,IAAI5D,MAAMkE,WAAW,EAAE;oBACrB,IAAIc,gBAAgB9E;oBAEpB,IAAI;wBACF,+EAA+E;wBAC/E,gFAAgF;wBAChF,8EAA8E;wBAC9E,IAAI+E,IAAAA,8DAA0B,EAACjF,QAAmB;4BAChD,MAAMkF,cACJxJ,IAAIR,OAAO,CAACiK,+CAA6B,CAACR,WAAW,GAAG;4BAE1D,IAAIO,aAAa;gCACfF,gBAAgB;oCACd,GAAGI,IAAAA,qCAAiB,EAClBC,IAAAA,oEAAiC,EAACH,aACnC;oCACD,GAAGhF,MAAM;gCACX;4BACF;wBACF;oBACF,EAAE,OAAOkC,KAAK;oBACZ,wFAAwF;oBACxF,sDAAsD;oBACxD;oBAEA,MAAM,EAAE+B,iBAAiB,EAAE,GAAGC,IAAAA,sCAAkB,EAAC;wBAC/CC,qBAAqB;wBACrBH,aAAalE,MAAMkE,WAAW;wBAC9BhE,QAAQ8E;wBACR1H,OAAOrB,UAAUqB,KAAK;oBACxB;oBAEA,IAAI6G,kBAAkBzH,QAAQ,EAAE;wBAC9B,OAAO;4BACL,oCAAoC;4BACpCT,WAAWkI;4BACXrI,UAAU;wBACZ;oBACF;oBAEA,IAAIrB,OAAOwD,IAAI,EAAE;wBACf,MAAMwD,kBAAkBnD,IAAAA,wCAAmB,EACzCC,IAAAA,kCAAgB,EAAC4F,kBAAkB1G,QAAQ,EAAEhD,OAAO4D,QAAQ,GAC5D5D,OAAOwD,IAAI,CAACO,OAAO;wBAGrB,IAAIiD,gBAAgB3C,cAAc,EAAE;4BAClC7C,UAAUqB,KAAK,CAACuB,YAAY,GAAG4C,gBAAgB3C,cAAc;wBAC/D;oBACF;oBACA1C,aAAa;oBACbH,UAAUwB,QAAQ,GAAG0G,kBAAkB1G,QAAQ;oBAC/CuD,OAAOC,MAAM,CAAChF,UAAUqB,KAAK,EAAE6G,kBAAkB7G,KAAK;gBACxD;gBAEA,qBAAqB;gBACrB,IAAI0C,MAAMzE,KAAK,EAAE;oBACf,MAAM8D,SAAS,MAAMF;oBAErB,IAAIE,QAAQ;wBACV,OAAO;4BACLpD;4BACAF;4BACAD,UAAU;4BACVE,eAAeqD;wBACjB;oBACF;gBACF;YACF;QACF;QAEA,KAAK,MAAMW,SAASlF,OAAQ;YAC1B,MAAMsG,SAAS,MAAMV,YAAYV;YACjC,IAAIoB,QAAQ;gBACV,OAAOA;YACT;QACF;QAEA,OAAO;YACLtF;YACAG;YACAF;YACAC;QACF;IACF;IAEA,OAAOP;AACT"}