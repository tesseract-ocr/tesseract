{"version":3,"sources":["../../../../src/server/lib/incremental-cache/index.ts"],"sourcesContent":["import type { CacheFs } from '../../../shared/lib/utils'\nimport type { PrerenderManifest } from '../../../build'\nimport {\n  type IncrementalCacheValue,\n  type IncrementalCacheEntry,\n  type IncrementalCache as IncrementalCacheType,\n  IncrementalCacheKind,\n  CachedRouteKind,\n} from '../../response-cache'\nimport type { Revalidate } from '../revalidate'\nimport type { DeepReadonly } from '../../../shared/lib/deep-readonly'\n\nimport FetchCache from './fetch-cache'\nimport FileSystemCache from './file-system-cache'\nimport { normalizePagePath } from '../../../shared/lib/page-path/normalize-page-path'\n\nimport {\n  CACHE_ONE_YEAR,\n  NEXT_CACHE_REVALIDATED_TAGS_HEADER,\n  NEXT_CACHE_REVALIDATE_TAG_TOKEN_HEADER,\n  PRERENDER_REVALIDATE_HEADER,\n} from '../../../lib/constants'\nimport { toRoute } from '../to-route'\nimport { SharedRevalidateTimings } from './shared-revalidate-timings'\nimport { workUnitAsyncStorageInstance } from '../../app-render/work-unit-async-storage-instance'\nimport {\n  getPrerenderResumeDataCache,\n  getRenderResumeDataCache,\n} from '../../app-render/work-unit-async-storage.external'\n\nexport interface CacheHandlerContext {\n  fs?: CacheFs\n  dev?: boolean\n  flushToDisk?: boolean\n  serverDistDir?: string\n  maxMemoryCacheSize?: number\n  fetchCacheKeyPrefix?: string\n  prerenderManifest?: PrerenderManifest\n  revalidatedTags: string[]\n  _requestHeaders: IncrementalCache['requestHeaders']\n}\n\nexport interface CacheHandlerValue {\n  lastModified?: number\n  age?: number\n  cacheState?: string\n  value: IncrementalCacheValue | null\n}\n\nexport class CacheHandler {\n  // eslint-disable-next-line\n  constructor(_ctx: CacheHandlerContext) {}\n\n  public async get(\n    ..._args: Parameters<IncrementalCache['get']>\n  ): Promise<CacheHandlerValue | null> {\n    return {} as any\n  }\n\n  public async set(\n    ..._args: Parameters<IncrementalCache['set']>\n  ): Promise<void> {}\n\n  public async revalidateTag(\n    ..._args: Parameters<IncrementalCache['revalidateTag']>\n  ): Promise<void> {}\n\n  public resetRequestCache(): void {}\n}\n\nexport class IncrementalCache implements IncrementalCacheType {\n  readonly dev?: boolean\n  readonly disableForTestmode?: boolean\n  readonly cacheHandler?: CacheHandler\n  readonly hasCustomCacheHandler: boolean\n  readonly prerenderManifest: DeepReadonly<PrerenderManifest>\n  readonly requestHeaders: Record<string, undefined | string | string[]>\n  readonly requestProtocol?: 'http' | 'https'\n  readonly allowedRevalidateHeaderKeys?: string[]\n  readonly minimalMode?: boolean\n  readonly fetchCacheKeyPrefix?: string\n  readonly revalidatedTags?: string[]\n  readonly isOnDemandRevalidate?: boolean\n  readonly hasDynamicIO?: boolean\n\n  private readonly locks = new Map<string, Promise<void>>()\n\n  /**\n   * The revalidate timings for routes. This will source the timings from the\n   * prerender manifest until the in-memory cache is updated with new timings.\n   */\n  private readonly revalidateTimings: SharedRevalidateTimings\n\n  constructor({\n    fs,\n    dev,\n    dynamicIO,\n    flushToDisk,\n    fetchCache,\n    minimalMode,\n    serverDistDir,\n    requestHeaders,\n    requestProtocol,\n    maxMemoryCacheSize,\n    getPrerenderManifest,\n    fetchCacheKeyPrefix,\n    CurCacheHandler,\n    allowedRevalidateHeaderKeys,\n  }: {\n    fs?: CacheFs\n    dev: boolean\n    dynamicIO: boolean\n    fetchCache?: boolean\n    minimalMode?: boolean\n    serverDistDir?: string\n    flushToDisk?: boolean\n    requestProtocol?: 'http' | 'https'\n    allowedRevalidateHeaderKeys?: string[]\n    requestHeaders: IncrementalCache['requestHeaders']\n    maxMemoryCacheSize?: number\n    getPrerenderManifest: () => DeepReadonly<PrerenderManifest>\n    fetchCacheKeyPrefix?: string\n    CurCacheHandler?: typeof CacheHandler\n  }) {\n    const debug = !!process.env.NEXT_PRIVATE_DEBUG_CACHE\n    this.hasCustomCacheHandler = Boolean(CurCacheHandler)\n\n    const cacheHandlersSymbol = Symbol.for('@next/cache-handlers')\n    const _globalThis: typeof globalThis & {\n      [cacheHandlersSymbol]?: {\n        FetchCache?: typeof CacheHandler\n      }\n    } = globalThis\n\n    if (!CurCacheHandler) {\n      // if we have a global cache handler available leverage it\n      const globalCacheHandler = _globalThis[cacheHandlersSymbol]\n\n      if (globalCacheHandler?.FetchCache) {\n        CurCacheHandler = globalCacheHandler.FetchCache\n      } else {\n        if (fs && serverDistDir) {\n          if (debug) {\n            console.log('using filesystem cache handler')\n          }\n          CurCacheHandler = FileSystemCache\n        }\n        if (\n          FetchCache.isAvailable({ _requestHeaders: requestHeaders }) &&\n          minimalMode &&\n          fetchCache\n        ) {\n          if (debug) {\n            console.log('using fetch cache handler')\n          }\n          CurCacheHandler = FetchCache\n        }\n      }\n    } else if (debug) {\n      console.log('using custom cache handler', CurCacheHandler.name)\n    }\n\n    if (process.env.__NEXT_TEST_MAX_ISR_CACHE) {\n      // Allow cache size to be overridden for testing purposes\n      maxMemoryCacheSize = parseInt(process.env.__NEXT_TEST_MAX_ISR_CACHE, 10)\n    }\n    this.dev = dev\n    this.hasDynamicIO = dynamicIO\n    this.disableForTestmode = process.env.NEXT_PRIVATE_TEST_PROXY === 'true'\n    // this is a hack to avoid Webpack knowing this is equal to this.minimalMode\n    // because we replace this.minimalMode to true in production bundles.\n    const minimalModeKey = 'minimalMode'\n    this[minimalModeKey] = minimalMode\n    this.requestHeaders = requestHeaders\n    this.requestProtocol = requestProtocol\n    this.allowedRevalidateHeaderKeys = allowedRevalidateHeaderKeys\n    this.prerenderManifest = getPrerenderManifest()\n    this.revalidateTimings = new SharedRevalidateTimings(this.prerenderManifest)\n    this.fetchCacheKeyPrefix = fetchCacheKeyPrefix\n    let revalidatedTags: string[] = []\n\n    if (\n      requestHeaders[PRERENDER_REVALIDATE_HEADER] ===\n      this.prerenderManifest?.preview?.previewModeId\n    ) {\n      this.isOnDemandRevalidate = true\n    }\n\n    if (\n      minimalMode &&\n      typeof requestHeaders[NEXT_CACHE_REVALIDATED_TAGS_HEADER] === 'string' &&\n      requestHeaders[NEXT_CACHE_REVALIDATE_TAG_TOKEN_HEADER] ===\n        this.prerenderManifest?.preview?.previewModeId\n    ) {\n      revalidatedTags =\n        requestHeaders[NEXT_CACHE_REVALIDATED_TAGS_HEADER].split(',')\n    }\n\n    if (CurCacheHandler) {\n      this.cacheHandler = new CurCacheHandler({\n        dev,\n        fs,\n        flushToDisk,\n        serverDistDir,\n        revalidatedTags,\n        maxMemoryCacheSize,\n        _requestHeaders: requestHeaders,\n        fetchCacheKeyPrefix,\n      })\n    }\n  }\n\n  private calculateRevalidate(\n    pathname: string,\n    fromTime: number,\n    dev: boolean,\n    isFallback: boolean | undefined\n  ): Revalidate {\n    // in development we don't have a prerender-manifest\n    // and default to always revalidating to allow easier debugging\n    if (dev)\n      return Math.floor(performance.timeOrigin + performance.now() - 1000)\n\n    // if an entry isn't present in routes we fallback to a default\n    // of revalidating after 1 second unless it's a fallback request.\n    const initialRevalidateSeconds =\n      this.revalidateTimings.get(toRoute(pathname)) ?? (isFallback ? false : 1)\n\n    const revalidateAfter =\n      typeof initialRevalidateSeconds === 'number'\n        ? initialRevalidateSeconds * 1000 + fromTime\n        : initialRevalidateSeconds\n\n    return revalidateAfter\n  }\n\n  _getPathname(pathname: string, fetchCache?: boolean) {\n    return fetchCache ? pathname : normalizePagePath(pathname)\n  }\n\n  resetRequestCache() {\n    this.cacheHandler?.resetRequestCache?.()\n  }\n\n  async lock(cacheKey: string) {\n    let unlockNext: () => Promise<void> = () => Promise.resolve()\n    const existingLock = this.locks.get(cacheKey)\n\n    if (existingLock) {\n      await existingLock\n    }\n\n    const newLock = new Promise<void>((resolve) => {\n      unlockNext = async () => {\n        resolve()\n        this.locks.delete(cacheKey) // Remove the lock upon release\n      }\n    })\n\n    this.locks.set(cacheKey, newLock)\n    return unlockNext\n  }\n\n  async revalidateTag(tags: string | string[]): Promise<void> {\n    return this.cacheHandler?.revalidateTag?.(tags)\n  }\n\n  // x-ref: https://github.com/facebook/react/blob/2655c9354d8e1c54ba888444220f63e836925caa/packages/react/src/ReactFetch.js#L23\n  async generateCacheKey(\n    url: string,\n    init: RequestInit | Request = {}\n  ): Promise<string> {\n    // this should be bumped anytime a fix is made to cache entries\n    // that should bust the cache\n    const MAIN_KEY_PREFIX = 'v3'\n\n    const bodyChunks: string[] = []\n\n    const encoder = new TextEncoder()\n    const decoder = new TextDecoder()\n\n    if (init.body) {\n      // handle ReadableStream body\n      if (typeof (init.body as any).getReader === 'function') {\n        const readableBody = init.body as ReadableStream<Uint8Array | string>\n\n        const chunks: Uint8Array[] = []\n\n        try {\n          await readableBody.pipeTo(\n            new WritableStream({\n              write(chunk) {\n                if (typeof chunk === 'string') {\n                  chunks.push(encoder.encode(chunk))\n                  bodyChunks.push(chunk)\n                } else {\n                  chunks.push(chunk)\n                  bodyChunks.push(decoder.decode(chunk, { stream: true }))\n                }\n              },\n            })\n          )\n\n          // Flush the decoder.\n          bodyChunks.push(decoder.decode())\n\n          // Create a new buffer with all the chunks.\n          const length = chunks.reduce((total, arr) => total + arr.length, 0)\n          const arrayBuffer = new Uint8Array(length)\n\n          // Push each of the chunks into the new array buffer.\n          let offset = 0\n          for (const chunk of chunks) {\n            arrayBuffer.set(chunk, offset)\n            offset += chunk.length\n          }\n\n          ;(init as any)._ogBody = arrayBuffer\n        } catch (err) {\n          console.error('Problem reading body', err)\n        }\n      } // handle FormData or URLSearchParams bodies\n      else if (typeof (init.body as any).keys === 'function') {\n        const formData = init.body as FormData\n        ;(init as any)._ogBody = init.body\n        for (const key of new Set([...formData.keys()])) {\n          const values = formData.getAll(key)\n          bodyChunks.push(\n            `${key}=${(\n              await Promise.all(\n                values.map(async (val) => {\n                  if (typeof val === 'string') {\n                    return val\n                  } else {\n                    return await val.text()\n                  }\n                })\n              )\n            ).join(',')}`\n          )\n        }\n        // handle blob body\n      } else if (typeof (init.body as any).arrayBuffer === 'function') {\n        const blob = init.body as Blob\n        const arrayBuffer = await blob.arrayBuffer()\n        bodyChunks.push(await blob.text())\n        ;(init as any)._ogBody = new Blob([arrayBuffer], { type: blob.type })\n      } else if (typeof init.body === 'string') {\n        bodyChunks.push(init.body)\n        ;(init as any)._ogBody = init.body\n      }\n    }\n\n    const headers =\n      typeof (init.headers || {}).keys === 'function'\n        ? Object.fromEntries(init.headers as Headers)\n        : Object.assign({}, init.headers)\n\n    if ('traceparent' in headers) delete headers['traceparent']\n\n    const cacheString = JSON.stringify([\n      MAIN_KEY_PREFIX,\n      this.fetchCacheKeyPrefix || '',\n      url,\n      init.method,\n      headers,\n      init.mode,\n      init.redirect,\n      init.credentials,\n      init.referrer,\n      init.referrerPolicy,\n      init.integrity,\n      init.cache,\n      bodyChunks,\n    ])\n\n    if (process.env.NEXT_RUNTIME === 'edge') {\n      function bufferToHex(buffer: ArrayBuffer): string {\n        return Array.prototype.map\n          .call(new Uint8Array(buffer), (b) => b.toString(16).padStart(2, '0'))\n          .join('')\n      }\n      const buffer = encoder.encode(cacheString)\n      return bufferToHex(await crypto.subtle.digest('SHA-256', buffer))\n    } else {\n      const crypto = require('crypto') as typeof import('crypto')\n      return crypto.createHash('sha256').update(cacheString).digest('hex')\n    }\n  }\n\n  // get data from cache if available\n  async get(\n    cacheKey: string,\n    ctx: {\n      kind: IncrementalCacheKind\n      revalidate?: Revalidate\n      fetchUrl?: string\n      fetchIdx?: number\n      tags?: string[]\n      softTags?: string[]\n      isRoutePPREnabled?: boolean\n      isFallback: boolean | undefined\n    }\n  ): Promise<IncrementalCacheEntry | null> {\n    // unlike other caches if we have a cacheScope we use it even if\n    // testmode would normally disable it or if requestHeaders say 'no-cache'.\n    if (this.hasDynamicIO && ctx.kind === IncrementalCacheKind.FETCH) {\n      const workUnitStore = workUnitAsyncStorageInstance.getStore()\n      const resumeDataCache = workUnitStore\n        ? getRenderResumeDataCache(workUnitStore)\n        : null\n      if (resumeDataCache) {\n        const memoryCacheData = resumeDataCache.fetch.get(cacheKey)\n        if (memoryCacheData?.kind === CachedRouteKind.FETCH) {\n          return {\n            isStale: false,\n            value: memoryCacheData,\n            revalidateAfter: false,\n            isFallback: false,\n          }\n        }\n      }\n    }\n\n    // we don't leverage the prerender cache in dev mode\n    // so that getStaticProps is always called for easier debugging\n    if (\n      this.disableForTestmode ||\n      (this.dev &&\n        (ctx.kind !== IncrementalCacheKind.FETCH ||\n          this.requestHeaders['cache-control'] === 'no-cache'))\n    ) {\n      return null\n    }\n\n    const { isFallback } = ctx\n\n    cacheKey = this._getPathname(\n      cacheKey,\n      ctx.kind === IncrementalCacheKind.FETCH\n    )\n    let entry: IncrementalCacheEntry | null = null\n    let revalidate = ctx.revalidate\n\n    const cacheData = await this.cacheHandler?.get(cacheKey, ctx)\n\n    if (cacheData?.value?.kind === CachedRouteKind.FETCH) {\n      const combinedTags = [...(ctx.tags || []), ...(ctx.softTags || [])]\n      // if a tag was revalidated we don't return stale data\n      if (\n        combinedTags.some((tag) => {\n          return this.revalidatedTags?.includes(tag)\n        })\n      ) {\n        return null\n      }\n\n      revalidate = revalidate || cacheData.value.revalidate\n      const age =\n        (performance.timeOrigin +\n          performance.now() -\n          (cacheData.lastModified || 0)) /\n        1000\n\n      const isStale = age > revalidate\n      const data = cacheData.value.data\n\n      return {\n        isStale: isStale,\n        value: {\n          kind: CachedRouteKind.FETCH,\n          data,\n          revalidate: revalidate,\n        },\n        revalidateAfter:\n          performance.timeOrigin + performance.now() + revalidate * 1000,\n        isFallback,\n      } satisfies IncrementalCacheEntry\n    }\n\n    const curRevalidate = this.revalidateTimings.get(toRoute(cacheKey))\n\n    let isStale: boolean | -1 | undefined\n    let revalidateAfter: Revalidate\n\n    if (cacheData?.lastModified === -1) {\n      isStale = -1\n      revalidateAfter = -1 * CACHE_ONE_YEAR\n    } else {\n      revalidateAfter = this.calculateRevalidate(\n        cacheKey,\n        cacheData?.lastModified || performance.timeOrigin + performance.now(),\n        this.dev ? ctx.kind !== IncrementalCacheKind.FETCH : false,\n        ctx.isFallback\n      )\n      isStale =\n        revalidateAfter !== false &&\n        revalidateAfter < performance.timeOrigin + performance.now()\n          ? true\n          : undefined\n    }\n\n    if (cacheData) {\n      entry = {\n        isStale,\n        curRevalidate,\n        revalidateAfter,\n        value: cacheData.value,\n        isFallback,\n      }\n    }\n\n    if (\n      !cacheData &&\n      this.prerenderManifest.notFoundRoutes.includes(cacheKey)\n    ) {\n      // for the first hit after starting the server the cache\n      // may not have a way to save notFound: true so if\n      // the prerender-manifest marks this as notFound then we\n      // return that entry and trigger a cache set to give it a\n      // chance to update in-memory entries\n      entry = {\n        isStale,\n        value: null,\n        curRevalidate,\n        revalidateAfter,\n        isFallback,\n      }\n      this.set(cacheKey, entry.value, ctx)\n    }\n    return entry\n  }\n\n  // populate the incremental cache with new data\n  async set(\n    pathname: string,\n    data: IncrementalCacheValue | null,\n    ctx: {\n      revalidate?: Revalidate\n      fetchCache?: boolean\n      fetchUrl?: string\n      fetchIdx?: number\n      tags?: string[]\n      isRoutePPREnabled?: boolean\n      isFallback?: boolean\n    }\n  ) {\n    // Even if we otherwise disable caching for testMode or if no fetchCache is configured\n    // we still always stash results in the cacheScope if one exists. This is because this\n    // is a transient in memory cache that populates caches ahead of a dynamic render in dev mode\n    // to allow the RSC debug info to have the right environment associated to it.\n    if (this.hasDynamicIO && data?.kind === CachedRouteKind.FETCH) {\n      const workUnitStore = workUnitAsyncStorageInstance.getStore()\n      const prerenderResumeDataCache = workUnitStore\n        ? getPrerenderResumeDataCache(workUnitStore)\n        : null\n      if (prerenderResumeDataCache) {\n        prerenderResumeDataCache.fetch.set(pathname, data)\n      }\n    }\n\n    if (this.disableForTestmode || (this.dev && !ctx.fetchCache)) return\n\n    pathname = this._getPathname(pathname, ctx.fetchCache)\n\n    // FetchCache has upper limit of 2MB per-entry currently\n    const itemSize = JSON.stringify(data).length\n    if (\n      ctx.fetchCache &&\n      // we don't show this error/warning when a custom cache handler is being used\n      // as it might not have this limit\n      !this.hasCustomCacheHandler &&\n      itemSize > 2 * 1024 * 1024\n    ) {\n      if (this.dev) {\n        throw new Error(\n          `Failed to set Next.js data cache, items over 2MB can not be cached (${itemSize} bytes)`\n        )\n      }\n      return\n    }\n\n    try {\n      // Set the value for the revalidate seconds so if it changes we can\n      // update the cache with the new value.\n      if (typeof ctx.revalidate !== 'undefined' && !ctx.fetchCache) {\n        this.revalidateTimings.set(toRoute(pathname), ctx.revalidate)\n      }\n\n      await this.cacheHandler?.set(pathname, data, ctx)\n    } catch (error) {\n      console.warn('Failed to update prerender cache for', pathname, error)\n    }\n  }\n}\n"],"names":["CacheHandler","IncrementalCache","constructor","_ctx","get","_args","set","revalidateTag","resetRequestCache","fs","dev","dynamicIO","flushToDisk","fetchCache","minimalMode","serverDistDir","requestHeaders","requestProtocol","maxMemoryCacheSize","getPrerenderManifest","fetchCacheKeyPrefix","CurCacheHandler","allowedRevalidateHeaderKeys","locks","Map","debug","process","env","NEXT_PRIVATE_DEBUG_CACHE","hasCustomCacheHandler","Boolean","cacheHandlersSymbol","Symbol","for","_globalThis","globalThis","globalCacheHandler","FetchCache","console","log","FileSystemCache","isAvailable","_requestHeaders","name","__NEXT_TEST_MAX_ISR_CACHE","parseInt","hasDynamicIO","disableForTestmode","NEXT_PRIVATE_TEST_PROXY","minimalModeKey","prerenderManifest","revalidateTimings","SharedRevalidateTimings","revalidatedTags","PRERENDER_REVALIDATE_HEADER","preview","previewModeId","isOnDemandRevalidate","NEXT_CACHE_REVALIDATED_TAGS_HEADER","NEXT_CACHE_REVALIDATE_TAG_TOKEN_HEADER","split","cacheHandler","calculateRevalidate","pathname","fromTime","isFallback","Math","floor","performance","timeOrigin","now","initialRevalidateSeconds","toRoute","revalidateAfter","_getPathname","normalizePagePath","lock","cacheKey","unlockNext","Promise","resolve","existingLock","newLock","delete","tags","generateCacheKey","url","init","MAIN_KEY_PREFIX","bodyChunks","encoder","TextEncoder","decoder","TextDecoder","body","getReader","readableBody","chunks","pipeTo","WritableStream","write","chunk","push","encode","decode","stream","length","reduce","total","arr","arrayBuffer","Uint8Array","offset","_ogBody","err","error","keys","formData","key","Set","values","getAll","all","map","val","text","join","blob","Blob","type","headers","Object","fromEntries","assign","cacheString","JSON","stringify","method","mode","redirect","credentials","referrer","referrerPolicy","integrity","cache","NEXT_RUNTIME","bufferToHex","buffer","Array","prototype","call","b","toString","padStart","crypto","subtle","digest","require","createHash","update","ctx","cacheData","kind","IncrementalCacheKind","FETCH","workUnitStore","workUnitAsyncStorageInstance","getStore","resumeDataCache","getRenderResumeDataCache","memoryCacheData","fetch","CachedRouteKind","isStale","value","entry","revalidate","combinedTags","softTags","some","tag","includes","age","lastModified","data","curRevalidate","CACHE_ONE_YEAR","undefined","notFoundRoutes","prerenderResumeDataCache","getPrerenderResumeDataCache","itemSize","Error","warn"],"mappings":"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"}