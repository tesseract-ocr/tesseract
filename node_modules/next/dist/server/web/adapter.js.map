{"version":3,"sources":["../../../src/server/web/adapter.ts"],"sourcesContent":["import type { RequestData, FetchEventResult } from './types'\nimport type { RequestInit } from './spec-extension/request'\nimport { PageSignatureError } from './error'\nimport { fromNodeOutgoingHttpHeaders, normalizeNextQueryParam } from './utils'\nimport {\n  NextFetchEvent,\n  getWaitUntilPromiseFromEvent,\n} from './spec-extension/fetch-event'\nimport { NextRequest } from './spec-extension/request'\nimport { NextResponse } from './spec-extension/response'\nimport { relativizeURL } from '../../shared/lib/router/utils/relativize-url'\nimport { NextURL } from './next-url'\nimport { stripInternalSearchParams } from '../internal-utils'\nimport { normalizeRscURL } from '../../shared/lib/router/utils/app-paths'\nimport { FLIGHT_HEADERS } from '../../client/components/app-router-headers'\nimport { ensureInstrumentationRegistered } from './globals'\nimport { createRequestStoreForAPI } from '../async-storage/request-store'\nimport { workUnitAsyncStorage } from '../app-render/work-unit-async-storage.external'\nimport { createWorkStore } from '../async-storage/work-store'\nimport { workAsyncStorage } from '../app-render/work-async-storage.external'\nimport { NEXT_ROUTER_PREFETCH_HEADER } from '../../client/components/app-router-headers'\nimport { getTracer } from '../lib/trace/tracer'\nimport type { TextMapGetter } from 'next/dist/compiled/@opentelemetry/api'\nimport { MiddlewareSpan } from '../lib/trace/constants'\nimport { CloseController } from './web-on-close'\nimport { getEdgePreviewProps } from './get-edge-preview-props'\nimport { getBuiltinRequestContext } from '../after/builtin-request-context'\n\nexport class NextRequestHint extends NextRequest {\n  sourcePage: string\n  fetchMetrics: FetchEventResult['fetchMetrics'] | undefined\n\n  constructor(params: {\n    init: RequestInit\n    input: Request | string\n    page: string\n  }) {\n    super(params.input, params.init)\n    this.sourcePage = params.page\n  }\n\n  get request() {\n    throw new PageSignatureError({ page: this.sourcePage })\n  }\n\n  respondWith() {\n    throw new PageSignatureError({ page: this.sourcePage })\n  }\n\n  waitUntil() {\n    throw new PageSignatureError({ page: this.sourcePage })\n  }\n}\n\nconst headersGetter: TextMapGetter<Headers> = {\n  keys: (headers) => Array.from(headers.keys()),\n  get: (headers, key) => headers.get(key) ?? undefined,\n}\n\nexport type AdapterOptions = {\n  handler: (req: NextRequestHint, event: NextFetchEvent) => Promise<Response>\n  page: string\n  request: RequestData\n  IncrementalCache?: typeof import('../lib/incremental-cache').IncrementalCache\n}\n\nlet propagator: <T>(request: NextRequestHint, fn: () => T) => T = (\n  request,\n  fn\n) => {\n  const tracer = getTracer()\n  return tracer.withPropagatedContext(request.headers, fn, headersGetter)\n}\n\nlet testApisIntercepted = false\n\nfunction ensureTestApisIntercepted() {\n  if (!testApisIntercepted) {\n    testApisIntercepted = true\n    if (process.env.NEXT_PRIVATE_TEST_PROXY === 'true') {\n      const {\n        interceptTestApis,\n        wrapRequestHandler,\n      } = require('next/dist/experimental/testmode/server-edge')\n      interceptTestApis()\n      propagator = wrapRequestHandler(propagator)\n    }\n  }\n}\n\nexport async function adapter(\n  params: AdapterOptions\n): Promise<FetchEventResult> {\n  ensureTestApisIntercepted()\n  await ensureInstrumentationRegistered()\n\n  // TODO-APP: use explicit marker for this\n  const isEdgeRendering = typeof self.__BUILD_MANIFEST !== 'undefined'\n\n  params.request.url = normalizeRscURL(params.request.url)\n\n  const requestUrl = new NextURL(params.request.url, {\n    headers: params.request.headers,\n    nextConfig: params.request.nextConfig,\n  })\n\n  // Iterator uses an index to keep track of the current iteration. Because of deleting and appending below we can't just use the iterator.\n  // Instead we use the keys before iteration.\n  const keys = [...requestUrl.searchParams.keys()]\n  for (const key of keys) {\n    const value = requestUrl.searchParams.getAll(key)\n\n    normalizeNextQueryParam(key, (normalizedKey) => {\n      requestUrl.searchParams.delete(normalizedKey)\n\n      for (const val of value) {\n        requestUrl.searchParams.append(normalizedKey, val)\n      }\n      requestUrl.searchParams.delete(key)\n    })\n  }\n\n  // Ensure users only see page requests, never data requests.\n  const buildId = requestUrl.buildId\n  requestUrl.buildId = ''\n\n  const isNextDataRequest = params.request.headers['x-nextjs-data']\n\n  if (isNextDataRequest && requestUrl.pathname === '/index') {\n    requestUrl.pathname = '/'\n  }\n\n  const requestHeaders = fromNodeOutgoingHttpHeaders(params.request.headers)\n  const flightHeaders = new Map()\n  // Headers should only be stripped for middleware\n  if (!isEdgeRendering) {\n    for (const header of FLIGHT_HEADERS) {\n      const key = header.toLowerCase()\n      const value = requestHeaders.get(key)\n      if (value) {\n        flightHeaders.set(key, value)\n        requestHeaders.delete(key)\n      }\n    }\n  }\n\n  const normalizeUrl = process.env.__NEXT_NO_MIDDLEWARE_URL_NORMALIZE\n    ? new URL(params.request.url)\n    : requestUrl\n\n  const request = new NextRequestHint({\n    page: params.page,\n    // Strip internal query parameters off the request.\n    input: stripInternalSearchParams(normalizeUrl, true).toString(),\n    init: {\n      body: params.request.body,\n      headers: requestHeaders,\n      method: params.request.method,\n      nextConfig: params.request.nextConfig,\n      signal: params.request.signal,\n    },\n  })\n\n  /**\n   * This allows to identify the request as a data request. The user doesn't\n   * need to know about this property neither use it. We add it for testing\n   * purposes.\n   */\n  if (isNextDataRequest) {\n    Object.defineProperty(request, '__isData', {\n      enumerable: false,\n      value: true,\n    })\n  }\n\n  if (\n    !(globalThis as any).__incrementalCache &&\n    (params as any).IncrementalCache\n  ) {\n    ;(globalThis as any).__incrementalCache = new (\n      params as any\n    ).IncrementalCache({\n      appDir: true,\n      fetchCache: true,\n      minimalMode: process.env.NODE_ENV !== 'development',\n      fetchCacheKeyPrefix: process.env.__NEXT_FETCH_CACHE_KEY_PREFIX,\n      dev: process.env.NODE_ENV === 'development',\n      requestHeaders: params.request.headers as any,\n      requestProtocol: 'https',\n      getPrerenderManifest: () => {\n        return {\n          version: -1 as any, // letting us know this doesn't conform to spec\n          routes: {},\n          dynamicRoutes: {},\n          notFoundRoutes: [],\n          preview: getEdgePreviewProps(),\n        }\n      },\n    })\n  }\n\n  // if we're in an edge runtime sandbox, we should use the waitUntil\n  // that we receive from the enclosing NextServer\n  const outerWaitUntil =\n    params.request.waitUntil ?? getBuiltinRequestContext()?.waitUntil\n\n  const event = new NextFetchEvent({\n    request,\n    page: params.page,\n    context: outerWaitUntil ? { waitUntil: outerWaitUntil } : undefined,\n  })\n  let response\n  let cookiesFromResponse\n\n  response = await propagator(request, () => {\n    // we only care to make async storage available for middleware\n    const isMiddleware =\n      params.page === '/middleware' || params.page === '/src/middleware'\n\n    if (isMiddleware) {\n      // if we're in an edge function, we only get a subset of `nextConfig` (no `experimental`),\n      // so we have to inject it via DefinePlugin.\n      // in `next start` this will be passed normally (see `NextNodeServer.runMiddleware`).\n\n      const waitUntil = event.waitUntil.bind(event)\n      const closeController = new CloseController()\n\n      return getTracer().trace(\n        MiddlewareSpan.execute,\n        {\n          spanName: `middleware ${request.method} ${request.nextUrl.pathname}`,\n          attributes: {\n            'http.target': request.nextUrl.pathname,\n            'http.method': request.method,\n          },\n        },\n        async () => {\n          try {\n            const onUpdateCookies = (cookies: Array<string>) => {\n              cookiesFromResponse = cookies\n            }\n            const previewProps = getEdgePreviewProps()\n\n            const requestStore = createRequestStoreForAPI(\n              request,\n              request.nextUrl,\n              undefined,\n              onUpdateCookies,\n              previewProps\n            )\n\n            const workStore = createWorkStore({\n              page: '/', // Fake Work\n              fallbackRouteParams: null,\n              renderOpts: {\n                cacheLifeProfiles:\n                  params.request.nextConfig?.experimental?.cacheLife,\n                experimental: {\n                  isRoutePPREnabled: false,\n                  dynamicIO: false,\n                  authInterrupts:\n                    !!params.request.nextConfig?.experimental?.authInterrupts,\n                },\n                buildId: buildId ?? '',\n                supportsDynamicResponse: true,\n                waitUntil,\n                onClose: closeController.onClose.bind(closeController),\n                onAfterTaskError: undefined,\n              },\n              requestEndedState: { ended: false },\n              isPrefetchRequest: request.headers.has(\n                NEXT_ROUTER_PREFETCH_HEADER\n              ),\n            })\n\n            return await workAsyncStorage.run(workStore, () =>\n              workUnitAsyncStorage.run(\n                requestStore,\n                params.handler,\n                request,\n                event\n              )\n            )\n          } finally {\n            // middleware cannot stream, so we can consider the response closed\n            // as soon as the handler returns.\n            // we can delay running it until a bit later --\n            // if it's needed, we'll have a `waitUntil` lock anyway.\n            setTimeout(() => {\n              closeController.dispatchClose()\n            }, 0)\n          }\n        }\n      )\n    }\n    return params.handler(request, event)\n  })\n\n  // check if response is a Response object\n  if (response && !(response instanceof Response)) {\n    throw new TypeError('Expected an instance of Response to be returned')\n  }\n\n  if (response && cookiesFromResponse) {\n    response.headers.set('set-cookie', cookiesFromResponse)\n  }\n\n  /**\n   * For rewrites we must always include the locale in the final pathname\n   * so we re-create the NextURL forcing it to include it when the it is\n   * an internal rewrite. Also we make sure the outgoing rewrite URL is\n   * a data URL if the request was a data request.\n   */\n  const rewrite = response?.headers.get('x-middleware-rewrite')\n  if (response && rewrite && !isEdgeRendering) {\n    const rewriteUrl = new NextURL(rewrite, {\n      forceLocale: true,\n      headers: params.request.headers,\n      nextConfig: params.request.nextConfig,\n    })\n\n    if (!process.env.__NEXT_NO_MIDDLEWARE_URL_NORMALIZE) {\n      if (rewriteUrl.host === request.nextUrl.host) {\n        rewriteUrl.buildId = buildId || rewriteUrl.buildId\n        response.headers.set('x-middleware-rewrite', String(rewriteUrl))\n      }\n    }\n\n    /**\n     * When the request is a data request we must show if there was a rewrite\n     * with an internal header so the client knows which component to load\n     * from the data request.\n     */\n    const relativizedRewrite = relativizeURL(\n      String(rewriteUrl),\n      String(requestUrl)\n    )\n\n    if (\n      isNextDataRequest &&\n      // if the rewrite is external and external rewrite\n      // resolving config is enabled don't add this header\n      // so the upstream app can set it instead\n      !(\n        process.env.__NEXT_EXTERNAL_MIDDLEWARE_REWRITE_RESOLVE &&\n        relativizedRewrite.match(/http(s)?:\\/\\//)\n      )\n    ) {\n      response.headers.set('x-nextjs-rewrite', relativizedRewrite)\n    }\n  }\n\n  /**\n   * For redirects we will not include the locale in case when it is the\n   * default and we must also make sure the outgoing URL is a data one if\n   * the incoming request was a data request.\n   */\n  const redirect = response?.headers.get('Location')\n  if (response && redirect && !isEdgeRendering) {\n    const redirectURL = new NextURL(redirect, {\n      forceLocale: false,\n      headers: params.request.headers,\n      nextConfig: params.request.nextConfig,\n    })\n\n    /**\n     * Responses created from redirects have immutable headers so we have\n     * to clone the response to be able to modify it.\n     */\n    response = new Response(response.body, response)\n\n    if (!process.env.__NEXT_NO_MIDDLEWARE_URL_NORMALIZE) {\n      if (redirectURL.host === request.nextUrl.host) {\n        redirectURL.buildId = buildId || redirectURL.buildId\n        response.headers.set('Location', String(redirectURL))\n      }\n    }\n\n    /**\n     * When the request is a data request we can't use the location header as\n     * it may end up with CORS error. Instead we map to an internal header so\n     * the client knows the destination.\n     */\n    if (isNextDataRequest) {\n      response.headers.delete('Location')\n      response.headers.set(\n        'x-nextjs-redirect',\n        relativizeURL(String(redirectURL), String(requestUrl))\n      )\n    }\n  }\n\n  const finalResponse = response ? response : NextResponse.next()\n\n  // Flight headers are not overridable / removable so they are applied at the end.\n  const middlewareOverrideHeaders = finalResponse.headers.get(\n    'x-middleware-override-headers'\n  )\n  const overwrittenHeaders: string[] = []\n  if (middlewareOverrideHeaders) {\n    for (const [key, value] of flightHeaders) {\n      finalResponse.headers.set(`x-middleware-request-${key}`, value)\n      overwrittenHeaders.push(key)\n    }\n\n    if (overwrittenHeaders.length > 0) {\n      finalResponse.headers.set(\n        'x-middleware-override-headers',\n        middlewareOverrideHeaders + ',' + overwrittenHeaders.join(',')\n      )\n    }\n  }\n\n  return {\n    response: finalResponse,\n    waitUntil: getWaitUntilPromiseFromEvent(event) ?? Promise.resolve(),\n    fetchMetrics: request.fetchMetrics,\n  }\n}\n"],"names":["NextRequestHint","adapter","NextRequest","constructor","params","input","init","sourcePage","page","request","PageSignatureError","respondWith","waitUntil","headersGetter","keys","headers","Array","from","get","key","undefined","propagator","fn","tracer","getTracer","withPropagatedContext","testApisIntercepted","ensureTestApisIntercepted","process","env","NEXT_PRIVATE_TEST_PROXY","interceptTestApis","wrapRequestHandler","require","getBuiltinRequestContext","ensureInstrumentationRegistered","isEdgeRendering","self","__BUILD_MANIFEST","url","normalizeRscURL","requestUrl","NextURL","nextConfig","searchParams","value","getAll","normalizeNextQueryParam","normalizedKey","delete","val","append","buildId","isNextDataRequest","pathname","requestHeaders","fromNodeOutgoingHttpHeaders","flightHeaders","Map","header","FLIGHT_HEADERS","toLowerCase","set","normalizeUrl","__NEXT_NO_MIDDLEWARE_URL_NORMALIZE","URL","stripInternalSearchParams","toString","body","method","signal","Object","defineProperty","enumerable","globalThis","__incrementalCache","IncrementalCache","appDir","fetchCache","minimalMode","NODE_ENV","fetchCacheKeyPrefix","__NEXT_FETCH_CACHE_KEY_PREFIX","dev","requestProtocol","getPrerenderManifest","version","routes","dynamicRoutes","notFoundRoutes","preview","getEdgePreviewProps","outerWaitUntil","event","NextFetchEvent","context","response","cookiesFromResponse","isMiddleware","bind","closeController","CloseController","trace","MiddlewareSpan","execute","spanName","nextUrl","attributes","onUpdateCookies","cookies","previewProps","requestStore","createRequestStoreForAPI","workStore","createWorkStore","fallbackRouteParams","renderOpts","cacheLifeProfiles","experimental","cacheLife","isRoutePPREnabled","dynamicIO","authInterrupts","supportsDynamicResponse","onClose","onAfterTaskError","requestEndedState","ended","isPrefetchRequest","has","NEXT_ROUTER_PREFETCH_HEADER","workAsyncStorage","run","workUnitAsyncStorage","handler","setTimeout","dispatchClose","Response","TypeError","rewrite","rewriteUrl","forceLocale","host","String","relativizedRewrite","relativizeURL","__NEXT_EXTERNAL_MIDDLEWARE_REWRITE_RESOLVE","match","redirect","redirectURL","finalResponse","NextResponse","next","middlewareOverrideHeaders","overwrittenHeaders","push","length","join","getWaitUntilPromiseFromEvent","Promise","resolve","fetchMetrics"],"mappings":"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"}