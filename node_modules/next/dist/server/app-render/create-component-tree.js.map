{"version":3,"sources":["../../../src/server/app-render/create-component-tree.tsx"],"sourcesContent":["import type {\n  FlightSegmentPath,\n  CacheNodeSeedData,\n  PreloadCallbacks,\n} from './types'\nimport React from 'react'\nimport { isClientReference } from '../../lib/client-reference'\nimport { getLayoutOrPageModule } from '../lib/app-dir-module'\nimport type { LoaderTree } from '../lib/app-dir-module'\nimport { interopDefault } from './interop-default'\nimport { parseLoaderTree } from './parse-loader-tree'\nimport type { CreateSegmentPath, AppRenderContext } from './app-render'\nimport { createComponentStylesAndScripts } from './create-component-styles-and-scripts'\nimport { getLayerAssets } from './get-layer-assets'\nimport { hasLoadingComponentInTree } from './has-loading-component-in-tree'\nimport { validateRevalidate } from '../lib/patch-fetch'\nimport { PARALLEL_ROUTE_DEFAULT_PATH } from '../../client/components/parallel-route-default'\nimport { getTracer } from '../lib/trace/tracer'\nimport { NextNodeServerSpan } from '../lib/trace/constants'\nimport { StaticGenBailoutError } from '../../client/components/static-generation-bailout'\nimport type { LoadingModuleData } from '../../shared/lib/app-router-context.shared-runtime'\nimport type { Params } from '../request/params'\nimport { workUnitAsyncStorage } from './work-unit-async-storage.external'\nimport { OUTLET_BOUNDARY_NAME } from '../../lib/metadata/metadata-constants'\n\n/**\n * Use the provided loader tree to create the React Component tree.\n */\nexport function createComponentTree(props: {\n  createSegmentPath: CreateSegmentPath\n  loaderTree: LoaderTree\n  parentParams: Params\n  rootLayoutIncluded: boolean\n  firstItem?: boolean\n  injectedCSS: Set<string>\n  injectedJS: Set<string>\n  injectedFontPreloadTags: Set<string>\n  getMetadataReady: () => Promise<void>\n  ctx: AppRenderContext\n  missingSlots?: Set<string>\n  preloadCallbacks: PreloadCallbacks\n  authInterrupts: boolean\n}): Promise<CacheNodeSeedData> {\n  return getTracer().trace(\n    NextNodeServerSpan.createComponentTree,\n    {\n      spanName: 'build component tree',\n    },\n    () => createComponentTreeInternal(props)\n  )\n}\n\nfunction errorMissingDefaultExport(\n  pagePath: string,\n  convention: string\n): never {\n  const normalizedPagePath = pagePath === '/' ? '' : pagePath\n  throw new Error(\n    `The default export is not a React Component in \"${normalizedPagePath}/${convention}\"`\n  )\n}\n\nconst cacheNodeKey = 'c'\n\nasync function createComponentTreeInternal({\n  createSegmentPath,\n  loaderTree: tree,\n  parentParams,\n  firstItem,\n  rootLayoutIncluded,\n  injectedCSS,\n  injectedJS,\n  injectedFontPreloadTags,\n  getMetadataReady,\n  ctx,\n  missingSlots,\n  preloadCallbacks,\n  authInterrupts,\n}: {\n  createSegmentPath: CreateSegmentPath\n  loaderTree: LoaderTree\n  parentParams: Params\n  rootLayoutIncluded: boolean\n  firstItem?: boolean\n  injectedCSS: Set<string>\n  injectedJS: Set<string>\n  injectedFontPreloadTags: Set<string>\n  getMetadataReady: () => Promise<void>\n  ctx: AppRenderContext\n  missingSlots?: Set<string>\n  preloadCallbacks: PreloadCallbacks\n  authInterrupts: boolean\n}): Promise<CacheNodeSeedData> {\n  const {\n    renderOpts: { nextConfigOutput, experimental },\n    workStore,\n    componentMod: {\n      HTTPAccessFallbackBoundary,\n      LayoutRouter,\n      RenderFromTemplateContext,\n      OutletBoundary,\n      ClientPageRoot,\n      ClientSegmentRoot,\n      createServerSearchParamsForServerPage,\n      createPrerenderSearchParamsForClientPage,\n      createServerParamsForServerSegment,\n      createPrerenderParamsForClientSegment,\n      serverHooks: { DynamicServerError },\n      Postpone,\n    },\n    pagePath,\n    getDynamicParamFromSegment,\n    isPrefetch,\n    query,\n  } = ctx\n\n  const { page, layoutOrPagePath, segment, modules, parallelRoutes } =\n    parseLoaderTree(tree)\n\n  const {\n    layout,\n    template,\n    error,\n    loading,\n    'not-found': notFound,\n    forbidden,\n    unauthorized,\n  } = modules\n\n  const injectedCSSWithCurrentLayout = new Set(injectedCSS)\n  const injectedJSWithCurrentLayout = new Set(injectedJS)\n  const injectedFontPreloadTagsWithCurrentLayout = new Set(\n    injectedFontPreloadTags\n  )\n\n  const layerAssets = getLayerAssets({\n    preloadCallbacks,\n    ctx,\n    layoutOrPagePath,\n    injectedCSS: injectedCSSWithCurrentLayout,\n    injectedJS: injectedJSWithCurrentLayout,\n    injectedFontPreloadTags: injectedFontPreloadTagsWithCurrentLayout,\n  })\n\n  const [Template, templateStyles, templateScripts] = template\n    ? await createComponentStylesAndScripts({\n        ctx,\n        filePath: template[1],\n        getComponent: template[0],\n        injectedCSS: injectedCSSWithCurrentLayout,\n        injectedJS: injectedJSWithCurrentLayout,\n      })\n    : [React.Fragment]\n\n  const [ErrorComponent, errorStyles, errorScripts] = error\n    ? await createComponentStylesAndScripts({\n        ctx,\n        filePath: error[1],\n        getComponent: error[0],\n        injectedCSS: injectedCSSWithCurrentLayout,\n        injectedJS: injectedJSWithCurrentLayout,\n      })\n    : []\n\n  const [Loading, loadingStyles, loadingScripts] = loading\n    ? await createComponentStylesAndScripts({\n        ctx,\n        filePath: loading[1],\n        getComponent: loading[0],\n        injectedCSS: injectedCSSWithCurrentLayout,\n        injectedJS: injectedJSWithCurrentLayout,\n      })\n    : []\n\n  const isLayout = typeof layout !== 'undefined'\n  const isPage = typeof page !== 'undefined'\n  const { mod: layoutOrPageMod } = await getTracer().trace(\n    NextNodeServerSpan.getLayoutOrPageModule,\n    {\n      hideSpan: !(isLayout || isPage),\n      spanName: 'resolve segment modules',\n      attributes: {\n        'next.segment': segment,\n      },\n    },\n    () => getLayoutOrPageModule(tree)\n  )\n\n  /**\n   * Checks if the current segment is a root layout.\n   */\n  const rootLayoutAtThisLevel = isLayout && !rootLayoutIncluded\n  /**\n   * Checks if the current segment or any level above it has a root layout.\n   */\n  const rootLayoutIncludedAtThisLevelOrAbove =\n    rootLayoutIncluded || rootLayoutAtThisLevel\n\n  const [NotFound, notFoundStyles] = notFound\n    ? await createComponentStylesAndScripts({\n        ctx,\n        filePath: notFound[1],\n        getComponent: notFound[0],\n        injectedCSS: injectedCSSWithCurrentLayout,\n        injectedJS: injectedJSWithCurrentLayout,\n      })\n    : []\n\n  const [Forbidden, forbiddenStyles] =\n    authInterrupts && forbidden\n      ? await createComponentStylesAndScripts({\n          ctx,\n          filePath: forbidden[1],\n          getComponent: forbidden[0],\n          injectedCSS: injectedCSSWithCurrentLayout,\n          injectedJS: injectedJSWithCurrentLayout,\n        })\n      : []\n  const forbiddenElement = Forbidden ? (\n    <>\n      {forbiddenStyles}\n      <Forbidden />\n    </>\n  ) : undefined\n\n  const [Unauthorized, unauthorizedStyles] =\n    authInterrupts && unauthorized\n      ? await createComponentStylesAndScripts({\n          ctx,\n          filePath: unauthorized[1],\n          getComponent: unauthorized[0],\n          injectedCSS: injectedCSSWithCurrentLayout,\n          injectedJS: injectedJSWithCurrentLayout,\n        })\n      : []\n  const unauthorizedElement = Unauthorized ? (\n    <>\n      {unauthorizedStyles}\n      <Unauthorized />\n    </>\n  ) : undefined\n\n  let dynamic = layoutOrPageMod?.dynamic\n\n  if (nextConfigOutput === 'export') {\n    if (!dynamic || dynamic === 'auto') {\n      dynamic = 'error'\n    } else if (dynamic === 'force-dynamic') {\n      // force-dynamic is always incompatible with 'export'. We must interrupt the build\n      throw new StaticGenBailoutError(\n        `Page with \\`dynamic = \"force-dynamic\"\\` couldn't be exported. \\`output: \"export\"\\` requires all pages be renderable statically because there is not runtime server to dynamic render routes in this output format. Learn more: https://nextjs.org/docs/app/building-your-application/deploying/static-exports`\n      )\n    }\n  }\n\n  if (typeof dynamic === 'string') {\n    // the nested most config wins so we only force-static\n    // if it's configured above any parent that configured\n    // otherwise\n    if (dynamic === 'error') {\n      workStore.dynamicShouldError = true\n    } else if (dynamic === 'force-dynamic') {\n      workStore.forceDynamic = true\n\n      // TODO: (PPR) remove this bailout once PPR is the default\n      if (workStore.isStaticGeneration && !experimental.isRoutePPREnabled) {\n        // If the postpone API isn't available, we can't postpone the render and\n        // therefore we can't use the dynamic API.\n        const err = new DynamicServerError(\n          `Page with \\`dynamic = \"force-dynamic\"\\` won't be rendered statically.`\n        )\n        workStore.dynamicUsageDescription = err.message\n        workStore.dynamicUsageStack = err.stack\n        throw err\n      }\n    } else {\n      workStore.dynamicShouldError = false\n      workStore.forceStatic = dynamic === 'force-static'\n    }\n  }\n\n  if (typeof layoutOrPageMod?.fetchCache === 'string') {\n    workStore.fetchCache = layoutOrPageMod?.fetchCache\n  }\n\n  if (typeof layoutOrPageMod?.revalidate !== 'undefined') {\n    validateRevalidate(layoutOrPageMod?.revalidate, workStore.route)\n  }\n\n  if (typeof layoutOrPageMod?.revalidate === 'number') {\n    const defaultRevalidate = layoutOrPageMod.revalidate as number\n\n    const workUnitStore = workUnitAsyncStorage.getStore()\n\n    if (workUnitStore) {\n      if (\n        workUnitStore.type === 'prerender' ||\n        workUnitStore.type === 'prerender-legacy' ||\n        workUnitStore.type === 'prerender-ppr' ||\n        workUnitStore.type === 'cache'\n      ) {\n        if (workUnitStore.revalidate > defaultRevalidate) {\n          workUnitStore.revalidate = defaultRevalidate\n        }\n      }\n    }\n\n    if (\n      !workStore.forceStatic &&\n      workStore.isStaticGeneration &&\n      defaultRevalidate === 0 &&\n      // If the postpone API isn't available, we can't postpone the render and\n      // therefore we can't use the dynamic API.\n      !experimental.isRoutePPREnabled\n    ) {\n      const dynamicUsageDescription = `revalidate: 0 configured ${segment}`\n      workStore.dynamicUsageDescription = dynamicUsageDescription\n\n      throw new DynamicServerError(dynamicUsageDescription)\n    }\n  }\n\n  const isStaticGeneration = workStore.isStaticGeneration\n\n  // Assume the segment we're rendering contains only partial data if PPR is\n  // enabled and this is a statically generated response. This is used by the\n  // client Segment Cache after a prefetch to determine if it can skip the\n  // second request to fill in the dynamic data.\n  //\n  // It's OK for this to be `true` when the data is actually fully static, but\n  // it's not OK for this to be `false` when the data possibly contains holes.\n  // Although the value here is overly pessimistic, for prefetches, it will be\n  // replaced by a more specific value when the data is later processed into\n  // per-segment responses (see collect-segment-data.tsx)\n  //\n  // For dynamic requests, this must always be `false` because dynamic responses\n  // are never partial.\n  const isPossiblyPartialResponse =\n    isStaticGeneration && experimental.isRoutePPREnabled === true\n\n  // If there's a dynamic usage error attached to the store, throw it.\n  if (workStore.dynamicUsageErr) {\n    throw workStore.dynamicUsageErr\n  }\n\n  const LayoutOrPage: React.ComponentType<any> | undefined = layoutOrPageMod\n    ? interopDefault(layoutOrPageMod)\n    : undefined\n\n  /**\n   * The React Component to render.\n   */\n  let MaybeComponent = LayoutOrPage\n\n  if (process.env.NODE_ENV === 'development') {\n    const { isValidElementType } = require('next/dist/compiled/react-is')\n    if (\n      (isPage || typeof MaybeComponent !== 'undefined') &&\n      !isValidElementType(MaybeComponent)\n    ) {\n      errorMissingDefaultExport(pagePath, 'page')\n    }\n\n    if (\n      typeof ErrorComponent !== 'undefined' &&\n      !isValidElementType(ErrorComponent)\n    ) {\n      errorMissingDefaultExport(pagePath, 'error')\n    }\n\n    if (typeof Loading !== 'undefined' && !isValidElementType(Loading)) {\n      errorMissingDefaultExport(pagePath, 'loading')\n    }\n\n    if (typeof NotFound !== 'undefined' && !isValidElementType(NotFound)) {\n      errorMissingDefaultExport(pagePath, 'not-found')\n    }\n\n    if (typeof Forbidden !== 'undefined' && !isValidElementType(Forbidden)) {\n      errorMissingDefaultExport(pagePath, 'forbidden')\n    }\n\n    if (\n      typeof Unauthorized !== 'undefined' &&\n      !isValidElementType(Unauthorized)\n    ) {\n      errorMissingDefaultExport(pagePath, 'unauthorized')\n    }\n  }\n\n  // Handle dynamic segment params.\n  const segmentParam = getDynamicParamFromSegment(segment)\n\n  // Create object holding the parent params and current params\n  let currentParams: Params = parentParams\n  if (segmentParam && segmentParam.value !== null) {\n    currentParams = {\n      ...parentParams,\n      [segmentParam.param]: segmentParam.value,\n    }\n  }\n\n  // Resolve the segment param\n  const actualSegment = segmentParam ? segmentParam.treeSegment : segment\n\n  //\n  // TODO: Combine this `map` traversal with the loop below that turns the array\n  // into an object.\n  const parallelRouteMap = await Promise.all(\n    Object.keys(parallelRoutes).map(\n      async (\n        parallelRouteKey\n      ): Promise<[string, React.ReactNode, CacheNodeSeedData | null]> => {\n        const isChildrenRouteKey = parallelRouteKey === 'children'\n        const currentSegmentPath: FlightSegmentPath = firstItem\n          ? [parallelRouteKey]\n          : [actualSegment, parallelRouteKey]\n\n        const parallelRoute = parallelRoutes[parallelRouteKey]\n\n        const notFoundComponent =\n          NotFound && isChildrenRouteKey ? (\n            <>\n              {notFoundStyles}\n              <NotFound />\n            </>\n          ) : undefined\n\n        const forbiddenComponent = isChildrenRouteKey\n          ? forbiddenElement\n          : undefined\n\n        const unauthorizedComponent = isChildrenRouteKey\n          ? unauthorizedElement\n          : undefined\n\n        // if we're prefetching and that there's a Loading component, we bail out\n        // otherwise we keep rendering for the prefetch.\n        // We also want to bail out if there's no Loading component in the tree.\n        let childCacheNodeSeedData: CacheNodeSeedData | null = null\n\n        if (\n          // Before PPR, the way instant navigations work in Next.js is we\n          // prefetch everything up to the first route segment that defines a\n          // loading.tsx boundary. (We do the same if there's no loading\n          // boundary in the entire tree, because we don't want to prefetch too\n          // much) The rest of the tree is deferred until the actual navigation.\n          // It does not take into account whether the data is dynamic — even if\n          // the tree is completely static, it will still defer everything\n          // inside the loading boundary.\n          //\n          // This behavior predates PPR and is only relevant if the\n          // PPR flag is not enabled.\n          isPrefetch &&\n          (Loading || !hasLoadingComponentInTree(parallelRoute)) &&\n          // The approach with PPR is different — loading.tsx behaves like a\n          // regular Suspense boundary and has no special behavior.\n          //\n          // With PPR, we prefetch as deeply as possible, and only defer when\n          // dynamic data is accessed. If so, we only defer the nearest parent\n          // Suspense boundary of the dynamic data access, regardless of whether\n          // the boundary is defined by loading.tsx or a normal <Suspense>\n          // component in userspace.\n          //\n          // NOTE: In practice this usually means we'll end up prefetching more\n          // than we were before PPR, which may or may not be considered a\n          // performance regression by some apps. The plan is to address this\n          // before General Availability of PPR by introducing granular\n          // per-segment fetching, so we can reuse as much of the tree as\n          // possible during both prefetches and dynamic navigations. But during\n          // the beta period, we should be clear about this trade off in our\n          // communications.\n          !experimental.isRoutePPREnabled\n        ) {\n          // Don't prefetch this child. This will trigger a lazy fetch by the\n          // client router.\n        } else {\n          // Create the child component\n\n          if (process.env.NODE_ENV === 'development' && missingSlots) {\n            // When we detect the default fallback (which triggers a 404), we collect the missing slots\n            // to provide more helpful debug information during development mode.\n            const parsedTree = parseLoaderTree(parallelRoute)\n            if (\n              parsedTree.layoutOrPagePath?.endsWith(PARALLEL_ROUTE_DEFAULT_PATH)\n            ) {\n              missingSlots.add(parallelRouteKey)\n            }\n          }\n\n          const seedData = await createComponentTreeInternal({\n            createSegmentPath: (child) => {\n              return createSegmentPath([...currentSegmentPath, ...child])\n            },\n            loaderTree: parallelRoute,\n            parentParams: currentParams,\n            rootLayoutIncluded: rootLayoutIncludedAtThisLevelOrAbove,\n            injectedCSS: injectedCSSWithCurrentLayout,\n            injectedJS: injectedJSWithCurrentLayout,\n            injectedFontPreloadTags: injectedFontPreloadTagsWithCurrentLayout,\n            // getMetadataReady is used to conditionally throw. In the case of parallel routes we will have more than one page\n            // but we only want to throw on the first one.\n            getMetadataReady: isChildrenRouteKey\n              ? getMetadataReady\n              : () => Promise.resolve(),\n            ctx,\n            missingSlots,\n            preloadCallbacks,\n            authInterrupts: authInterrupts,\n          })\n\n          childCacheNodeSeedData = seedData\n        }\n\n        // This is turned back into an object below.\n        return [\n          parallelRouteKey,\n          <LayoutRouter\n            parallelRouterKey={parallelRouteKey}\n            segmentPath={createSegmentPath(currentSegmentPath)}\n            // TODO-APP: Add test for loading returning `undefined`. This currently can't be tested as the `webdriver()` tab will wait for the full page to load before returning.\n            error={ErrorComponent}\n            errorStyles={errorStyles}\n            errorScripts={errorScripts}\n            template={\n              <Template>\n                <RenderFromTemplateContext />\n              </Template>\n            }\n            templateStyles={templateStyles}\n            templateScripts={templateScripts}\n            notFound={notFoundComponent}\n            forbidden={forbiddenComponent}\n            unauthorized={unauthorizedComponent}\n          />,\n          childCacheNodeSeedData,\n        ]\n      }\n    )\n  )\n\n  // Convert the parallel route map into an object after all promises have been resolved.\n  let parallelRouteProps: { [key: string]: React.ReactNode } = {}\n  let parallelRouteCacheNodeSeedData: {\n    [key: string]: CacheNodeSeedData | null\n  } = {}\n  for (const parallelRoute of parallelRouteMap) {\n    const [parallelRouteKey, parallelRouteProp, flightData] = parallelRoute\n    parallelRouteProps[parallelRouteKey] = parallelRouteProp\n    parallelRouteCacheNodeSeedData[parallelRouteKey] = flightData\n  }\n\n  const loadingData: LoadingModuleData = Loading\n    ? [<Loading key=\"l\" />, loadingStyles, loadingScripts]\n    : null\n\n  // When the segment does not have a layout or page we still have to add the layout router to ensure the path holds the loading component\n  if (!MaybeComponent) {\n    return [\n      actualSegment,\n      <React.Fragment key={cacheNodeKey}>\n        {layerAssets}\n        {parallelRouteProps.children}\n      </React.Fragment>,\n      parallelRouteCacheNodeSeedData,\n      loadingData,\n      isPossiblyPartialResponse,\n    ]\n  }\n\n  const Component = MaybeComponent\n\n  // If force-dynamic is used and the current render supports postponing, we\n  // replace it with a node that will postpone the render. This ensures that the\n  // postpone is invoked during the react render phase and not during the next\n  // render phase.\n  // @TODO this does not actually do what it seems like it would or should do. The idea is that\n  // if we are rendering in a force-dynamic mode and we can postpone we should only make the segments\n  // that ask for force-dynamic to be dynamic, allowing other segments to still prerender. However\n  // because this comes after the children traversal and the static generation store is mutated every segment\n  // along the parent path of a force-dynamic segment will hit this condition effectively making the entire\n  // render force-dynamic. We should refactor this function so that we can correctly track which segments\n  // need to be dynamic\n  if (\n    workStore.isStaticGeneration &&\n    workStore.forceDynamic &&\n    experimental.isRoutePPREnabled\n  ) {\n    return [\n      actualSegment,\n      <React.Fragment key={cacheNodeKey}>\n        <Postpone\n          reason='dynamic = \"force-dynamic\" was used'\n          route={workStore.route}\n        />\n        {layerAssets}\n      </React.Fragment>,\n      parallelRouteCacheNodeSeedData,\n      loadingData,\n      true,\n    ]\n  }\n\n  const isClientComponent = isClientReference(layoutOrPageMod)\n\n  if (\n    process.env.NODE_ENV === 'development' &&\n    'params' in parallelRouteProps\n  ) {\n    // @TODO consider making this an error and running the check in build as well\n    console.error(\n      `\"params\" is a reserved prop in Layouts and Pages and cannot be used as the name of a parallel route in ${segment}`\n    )\n  }\n\n  if (isPage) {\n    const PageComponent = Component\n    // Assign searchParams to props if this is a page\n    let pageElement: React.ReactNode\n    if (isClientComponent) {\n      if (isStaticGeneration) {\n        const promiseOfParams = createPrerenderParamsForClientSegment(\n          currentParams,\n          workStore\n        )\n        const promiseOfSearchParams =\n          createPrerenderSearchParamsForClientPage(workStore)\n        pageElement = (\n          <ClientPageRoot\n            Component={PageComponent}\n            searchParams={query}\n            params={currentParams}\n            promises={[promiseOfSearchParams, promiseOfParams]}\n          />\n        )\n      } else {\n        pageElement = (\n          <ClientPageRoot\n            Component={PageComponent}\n            searchParams={query}\n            params={currentParams}\n          />\n        )\n      }\n    } else {\n      // If we are passing searchParams to a server component Page we need to track their usage in case\n      // the current render mode tracks dynamic API usage.\n      const params = createServerParamsForServerSegment(\n        currentParams,\n        workStore\n      )\n      const searchParams = createServerSearchParamsForServerPage(\n        query,\n        workStore\n      )\n      pageElement = (\n        <PageComponent params={params} searchParams={searchParams} />\n      )\n    }\n    return [\n      actualSegment,\n      <React.Fragment key={cacheNodeKey}>\n        {pageElement}\n        {layerAssets}\n        <OutletBoundary>\n          <MetadataOutlet ready={getMetadataReady} />\n        </OutletBoundary>\n      </React.Fragment>,\n      parallelRouteCacheNodeSeedData,\n      loadingData,\n      isPossiblyPartialResponse,\n    ]\n  } else {\n    const SegmentComponent = Component\n\n    const isRootLayoutWithChildrenSlotAndAtLeastOneMoreSlot =\n      rootLayoutAtThisLevel &&\n      'children' in parallelRoutes &&\n      Object.keys(parallelRoutes).length > 1\n\n    let segmentNode: React.ReactNode\n\n    if (isClientComponent) {\n      let clientSegment: React.ReactNode\n\n      if (isStaticGeneration) {\n        const promiseOfParams = createPrerenderParamsForClientSegment(\n          currentParams,\n          workStore\n        )\n\n        clientSegment = (\n          <ClientSegmentRoot\n            Component={SegmentComponent}\n            slots={parallelRouteProps}\n            params={currentParams}\n            promise={promiseOfParams}\n          />\n        )\n      } else {\n        clientSegment = (\n          <ClientSegmentRoot\n            Component={SegmentComponent}\n            slots={parallelRouteProps}\n            params={currentParams}\n          />\n        )\n      }\n\n      if (isRootLayoutWithChildrenSlotAndAtLeastOneMoreSlot) {\n        let notfoundClientSegment: React.ReactNode\n        let forbiddenClientSegment: React.ReactNode\n        let unauthorizedClientSegment: React.ReactNode\n        // TODO-APP: This is a hack to support unmatched parallel routes, which will throw `notFound()`.\n        // This ensures that a `HTTPAccessFallbackBoundary` is available for when that happens,\n        // but it's not ideal, as it needlessly invokes the `NotFound` component and renders the `RootLayout` twice.\n        // We should instead look into handling the fallback behavior differently in development mode so that it doesn't\n        // rely on the `NotFound` behavior.\n        if (NotFound) {\n          const notFoundParallelRouteProps = {\n            children: (\n              <>\n                {notFoundStyles}\n                <NotFound />\n              </>\n            ),\n          }\n          notfoundClientSegment = (\n            <>\n              {layerAssets}\n              <ClientSegmentRoot\n                Component={SegmentComponent}\n                slots={notFoundParallelRouteProps}\n                params={currentParams}\n              />\n            </>\n          )\n        }\n        if (Forbidden) {\n          const forbiddenParallelRouteProps = {\n            children: forbiddenElement,\n          }\n          forbiddenClientSegment = (\n            <>\n              {layerAssets}\n              <ClientSegmentRoot\n                Component={SegmentComponent}\n                slots={forbiddenParallelRouteProps}\n                params={currentParams}\n              />\n            </>\n          )\n        }\n        if (Unauthorized) {\n          const unauthorizedParallelRouteProps = {\n            children: unauthorizedElement,\n          }\n          unauthorizedClientSegment = (\n            <>\n              {layerAssets}\n              <ClientSegmentRoot\n                Component={SegmentComponent}\n                slots={unauthorizedParallelRouteProps}\n                params={currentParams}\n              />\n            </>\n          )\n        }\n        if (\n          notfoundClientSegment ||\n          forbiddenClientSegment ||\n          unauthorizedClientSegment\n        ) {\n          segmentNode = (\n            <HTTPAccessFallbackBoundary\n              key={cacheNodeKey}\n              notFound={notfoundClientSegment}\n              forbidden={forbiddenClientSegment}\n              unauthorized={unauthorizedClientSegment}\n            >\n              {layerAssets}\n              {clientSegment}\n            </HTTPAccessFallbackBoundary>\n          )\n        } else {\n          segmentNode = (\n            <React.Fragment key={cacheNodeKey}>\n              {layerAssets}\n              {clientSegment}\n            </React.Fragment>\n          )\n        }\n      } else {\n        segmentNode = (\n          <React.Fragment key={cacheNodeKey}>\n            {layerAssets}\n            {clientSegment}\n          </React.Fragment>\n        )\n      }\n    } else {\n      const params = createServerParamsForServerSegment(\n        currentParams,\n        workStore\n      )\n\n      let serverSegment = (\n        <SegmentComponent {...parallelRouteProps} params={params} />\n      )\n\n      if (isRootLayoutWithChildrenSlotAndAtLeastOneMoreSlot) {\n        // TODO-APP: This is a hack to support unmatched parallel routes, which will throw `notFound()`.\n        // This ensures that a `HTTPAccessFallbackBoundary` is available for when that happens,\n        // but it's not ideal, as it needlessly invokes the `NotFound` component and renders the `RootLayout` twice.\n        // We should instead look into handling the fallback behavior differently in development mode so that it doesn't\n        // rely on the `NotFound` behavior.\n        segmentNode = (\n          <HTTPAccessFallbackBoundary\n            key={cacheNodeKey}\n            notFound={\n              NotFound ? (\n                <>\n                  {layerAssets}\n                  <SegmentComponent params={params}>\n                    {notFoundStyles}\n                    <NotFound />\n                  </SegmentComponent>\n                </>\n              ) : undefined\n            }\n          >\n            {layerAssets}\n            {serverSegment}\n          </HTTPAccessFallbackBoundary>\n        )\n      } else {\n        segmentNode = (\n          <React.Fragment key={cacheNodeKey}>\n            {layerAssets}\n            {serverSegment}\n          </React.Fragment>\n        )\n      }\n    }\n    // For layouts we just render the component\n    return [\n      actualSegment,\n      segmentNode,\n      parallelRouteCacheNodeSeedData,\n      loadingData,\n      isPossiblyPartialResponse,\n    ]\n  }\n}\n\nasync function MetadataOutlet({\n  ready,\n}: {\n  ready: () => Promise<void> & { status?: string; value?: unknown }\n}) {\n  const r = ready()\n  // We can avoid a extra microtask by unwrapping the instrumented promise directly if available.\n  if (r.status === 'rejected') {\n    throw r.value\n  } else if (r.status !== 'fulfilled') {\n    await r\n  }\n  return null\n}\nMetadataOutlet.displayName = OUTLET_BOUNDARY_NAME\n"],"names":["createComponentTree","props","getTracer","trace","NextNodeServerSpan","spanName","createComponentTreeInternal","errorMissingDefaultExport","pagePath","convention","normalizedPagePath","Error","cacheNodeKey","createSegmentPath","loaderTree","tree","parentParams","firstItem","rootLayoutIncluded","injectedCSS","injectedJS","injectedFontPreloadTags","getMetadataReady","ctx","missingSlots","preloadCallbacks","authInterrupts","renderOpts","nextConfigOutput","experimental","workStore","componentMod","HTTPAccessFallbackBoundary","LayoutRouter","RenderFromTemplateContext","OutletBoundary","ClientPageRoot","ClientSegmentRoot","createServerSearchParamsForServerPage","createPrerenderSearchParamsForClientPage","createServerParamsForServerSegment","createPrerenderParamsForClientSegment","serverHooks","DynamicServerError","Postpone","getDynamicParamFromSegment","isPrefetch","query","page","layoutOrPagePath","segment","modules","parallelRoutes","parseLoaderTree","layout","template","error","loading","notFound","forbidden","unauthorized","injectedCSSWithCurrentLayout","Set","injectedJSWithCurrentLayout","injectedFontPreloadTagsWithCurrentLayout","layerAssets","getLayerAssets","Template","templateStyles","templateScripts","createComponentStylesAndScripts","filePath","getComponent","React","Fragment","ErrorComponent","errorStyles","errorScripts","Loading","loadingStyles","loadingScripts","isLayout","isPage","mod","layoutOrPageMod","getLayoutOrPageModule","hideSpan","attributes","rootLayoutAtThisLevel","rootLayoutIncludedAtThisLevelOrAbove","NotFound","notFoundStyles","Forbidden","forbiddenStyles","forbiddenElement","undefined","Unauthorized","unauthorizedStyles","unauthorizedElement","dynamic","StaticGenBailoutError","dynamicShouldError","forceDynamic","isStaticGeneration","isRoutePPREnabled","err","dynamicUsageDescription","message","dynamicUsageStack","stack","forceStatic","fetchCache","revalidate","validateRevalidate","route","defaultRevalidate","workUnitStore","workUnitAsyncStorage","getStore","type","isPossiblyPartialResponse","dynamicUsageErr","LayoutOrPage","interopDefault","MaybeComponent","process","env","NODE_ENV","isValidElementType","require","segmentParam","currentParams","value","param","actualSegment","treeSegment","parallelRouteMap","Promise","all","Object","keys","map","parallelRouteKey","isChildrenRouteKey","currentSegmentPath","parallelRoute","notFoundComponent","forbiddenComponent","unauthorizedComponent","childCacheNodeSeedData","hasLoadingComponentInTree","parsedTree","endsWith","PARALLEL_ROUTE_DEFAULT_PATH","add","seedData","child","resolve","parallelRouterKey","segmentPath","parallelRouteProps","parallelRouteCacheNodeSeedData","parallelRouteProp","flightData","loadingData","children","Component","reason","isClientComponent","isClientReference","console","PageComponent","pageElement","promiseOfParams","promiseOfSearchParams","searchParams","params","promises","MetadataOutlet","ready","SegmentComponent","isRootLayoutWithChildrenSlotAndAtLeastOneMoreSlot","length","segmentNode","clientSegment","slots","promise","notfoundClientSegment","forbiddenClientSegment","unauthorizedClientSegment","notFoundParallelRouteProps","forbiddenParallelRouteProps","unauthorizedParallelRouteProps","serverSegment","r","status","displayName","OUTLET_BOUNDARY_NAME"],"mappings":"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"}