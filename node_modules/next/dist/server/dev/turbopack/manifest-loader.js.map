{"version":3,"sources":["../../../../src/server/dev/turbopack/manifest-loader.ts"],"sourcesContent":["import type {\n  EdgeFunctionDefinition,\n  MiddlewareManifest,\n} from '../../../build/webpack/plugins/middleware-plugin'\nimport type { StatsAsset, StatsChunk, StatsChunkGroup, StatsModule, StatsCompilation as WebpackStats } from 'webpack'\nimport type { BuildManifest } from '../../get-page-files'\nimport type { AppBuildManifest } from '../../../build/webpack/plugins/app-build-manifest-plugin'\nimport type { PagesManifest } from '../../../build/webpack/plugins/pages-manifest-plugin'\nimport { pathToRegexp } from 'next/dist/compiled/path-to-regexp'\nimport type { ActionManifest } from '../../../build/webpack/plugins/flight-client-entry-plugin'\nimport type { NextFontManifest } from '../../../build/webpack/plugins/next-font-manifest-plugin'\nimport type { LoadableManifest } from '../../load-components'\nimport {\n  APP_BUILD_MANIFEST,\n  APP_PATHS_MANIFEST,\n  BUILD_MANIFEST,\n  INTERCEPTION_ROUTE_REWRITE_MANIFEST,\n  MIDDLEWARE_BUILD_MANIFEST,\n  MIDDLEWARE_MANIFEST,\n  MIDDLEWARE_REACT_LOADABLE_MANIFEST,\n  NEXT_FONT_MANIFEST,\n  PAGES_MANIFEST,\n  REACT_LOADABLE_MANIFEST,\n  SERVER_REFERENCE_MANIFEST,\n  TURBOPACK_CLIENT_MIDDLEWARE_MANIFEST,\n  WEBPACK_STATS,\n} from '../../../shared/lib/constants'\nimport { join, posix } from 'path'\nimport { readFile } from 'fs/promises'\nimport type { SetupOpts } from '../../lib/router-utils/setup-dev-bundler'\nimport { deleteCache } from '../require-cache'\nimport { writeFileAtomic } from '../../../lib/fs/write-atomic'\nimport { isInterceptionRouteRewrite } from '../../../lib/generate-interception-routes-rewrites'\nimport {\n  type ClientBuildManifest,\n  normalizeRewritesForBuildManifest,\n  srcEmptySsgManifest,\n  processRoute,\n} from '../../../build/webpack/plugins/build-manifest-plugin'\nimport type { Entrypoints } from './types'\nimport getAssetPathFromRoute from '../../../shared/lib/router/utils/get-asset-path-from-route'\nimport { getEntryKey, type EntryKey } from './entry-key'\nimport type { CustomRoutes } from '../../../lib/load-custom-routes'\nimport { getSortedRoutes } from '../../../shared/lib/router/utils'\nimport { existsSync } from 'fs'\nimport { addMetadataIdToRoute, addRouteSuffix, removeRouteSuffix } from '../turbopack-utils'\nimport { tryToParsePath } from '../../../lib/try-to-parse-path'\n\ninterface InstrumentationDefinition {\n  files: string[]\n  name: 'instrumentation'\n}\n\ntype TurbopackMiddlewareManifest = MiddlewareManifest & {\n  instrumentation?: InstrumentationDefinition\n}\n\nconst getManifestPath = (page: string, distDir: string, name: string, type: string) => {\n  let manifestPath = posix.join(\n    distDir,\n    `server`,\n    type,\n    type === 'middleware' || type === 'instrumentation'\n      ? ''\n      : type === 'app'\n        ? page\n        : getAssetPathFromRoute(page),\n    name\n  )\n  return manifestPath\n}\n\nasync function readPartialManifest<T>(\n  distDir: string,\n  name:\n    | typeof MIDDLEWARE_MANIFEST\n    | typeof BUILD_MANIFEST\n    | typeof APP_BUILD_MANIFEST\n    | typeof PAGES_MANIFEST\n    | typeof WEBPACK_STATS\n    | typeof APP_PATHS_MANIFEST\n    | `${typeof SERVER_REFERENCE_MANIFEST}.json`\n    | `${typeof NEXT_FONT_MANIFEST}.json`\n    | typeof REACT_LOADABLE_MANIFEST,\n  pageName: string,\n  type: 'pages' | 'app' | 'middleware' | 'instrumentation' = 'pages'\n): Promise<T> {\n  const page = pageName\n  const isSitemapRoute = /[\\\\/]sitemap(.xml)?\\/route$/.test(page)\n  let manifestPath = getManifestPath(page, distDir, name, type)\n\n  // Check the ambiguity of /sitemap and /sitemap.xml\n  if (isSitemapRoute && !existsSync(manifestPath)) {\n    manifestPath = getManifestPath(pageName.replace(/\\/sitemap\\/route$/, '/sitemap.xml/route'), distDir, name, type)\n  }\n  // existsSync is faster than using the async version\n  if(!existsSync(manifestPath) && page.endsWith('/route')) {\n    // TODO: Improve implementation of metadata routes, currently it requires this extra check for the variants of the files that can be written.\n    let metadataPage = addRouteSuffix(addMetadataIdToRoute(removeRouteSuffix(page)))\n    manifestPath = getManifestPath(metadataPage, distDir, name, type)\n  }\n  return JSON.parse(await readFile(posix.join(manifestPath), 'utf-8')) as T\n}\n\nexport class TurbopackManifestLoader {\n  private actionManifests: Map<EntryKey, ActionManifest> = new Map()\n  private appBuildManifests: Map<EntryKey, AppBuildManifest> = new Map()\n  private appPathsManifests: Map<EntryKey, PagesManifest> = new Map()\n  private buildManifests: Map<EntryKey, BuildManifest> = new Map()\n  private fontManifests: Map<EntryKey, NextFontManifest> = new Map()\n  private loadableManifests: Map<EntryKey, LoadableManifest> = new Map()\n  private middlewareManifests: Map<EntryKey, TurbopackMiddlewareManifest> =\n    new Map()\n  private pagesManifests: Map<string, PagesManifest> = new Map()\n  private webpackStats: Map<EntryKey, WebpackStats> = new Map()\n  private encryptionKey: string\n\n  private readonly distDir: string\n  private readonly buildId: string\n\n  constructor({\n    distDir,\n    buildId,\n    encryptionKey,\n  }: {\n    buildId: string\n    distDir: string\n    encryptionKey: string\n  }) {\n    this.distDir = distDir\n    this.buildId = buildId\n    this.encryptionKey = encryptionKey\n  }\n\n  delete(key: EntryKey) {\n    this.actionManifests.delete(key)\n    this.appBuildManifests.delete(key)\n    this.appPathsManifests.delete(key)\n    this.buildManifests.delete(key)\n    this.fontManifests.delete(key)\n    this.loadableManifests.delete(key)\n    this.middlewareManifests.delete(key)\n    this.pagesManifests.delete(key)\n    this.webpackStats.delete(key)\n  }\n\n  async loadActionManifest(pageName: string): Promise<void> {\n    this.actionManifests.set(\n      getEntryKey('app', 'server', pageName),\n      await readPartialManifest(\n        this.distDir,\n        `${SERVER_REFERENCE_MANIFEST}.json`,\n        pageName,\n        'app'\n      )\n    )\n  }\n\n  private async mergeActionManifests(manifests: Iterable<ActionManifest>) {\n    type ActionEntries = ActionManifest['edge' | 'node']\n    const manifest: ActionManifest = {\n      node: {},\n      edge: {},\n      encryptionKey: this.encryptionKey,\n    }\n\n    function mergeActionIds(\n      actionEntries: ActionEntries,\n      other: ActionEntries\n    ): void {\n      for (const key in other) {\n        const action = (actionEntries[key] ??= {\n          workers: {},\n          layer: {},\n        })\n        Object.assign(action.workers, other[key].workers)\n        Object.assign(action.layer, other[key].layer)\n      }\n    }\n\n    for (const m of manifests) {\n      mergeActionIds(manifest.node, m.node)\n      mergeActionIds(manifest.edge, m.edge)\n    }\n\n    return manifest\n  }\n\n  private async writeActionManifest(): Promise<void> {\n    const actionManifest = await this.mergeActionManifests(\n      this.actionManifests.values()\n    )\n    const actionManifestJsonPath = join(\n      this.distDir,\n      'server',\n      `${SERVER_REFERENCE_MANIFEST}.json`\n    )\n    const actionManifestJsPath = join(\n      this.distDir,\n      'server',\n      `${SERVER_REFERENCE_MANIFEST}.js`\n    )\n    const json = JSON.stringify(actionManifest, null, 2)\n    deleteCache(actionManifestJsonPath)\n    deleteCache(actionManifestJsPath)\n    await writeFileAtomic(actionManifestJsonPath, json)\n    await writeFileAtomic(\n      actionManifestJsPath,\n      `self.__RSC_SERVER_MANIFEST=${JSON.stringify(json)}`\n    )\n  }\n\n  async loadAppBuildManifest(pageName: string): Promise<void> {\n    this.appBuildManifests.set(\n      getEntryKey('app', 'server', pageName),\n      await readPartialManifest(\n        this.distDir,\n        APP_BUILD_MANIFEST,\n        pageName,\n        'app'\n      )\n    )\n  }\n\n  private mergeAppBuildManifests(manifests: Iterable<AppBuildManifest>) {\n    const manifest: AppBuildManifest = {\n      pages: {},\n    }\n    for (const m of manifests) {\n      Object.assign(manifest.pages, m.pages)\n    }\n    return manifest\n  }\n\n  private async writeAppBuildManifest(): Promise<void> {\n    const appBuildManifest = this.mergeAppBuildManifests(\n      this.appBuildManifests.values()\n    )\n    const appBuildManifestPath = join(this.distDir, APP_BUILD_MANIFEST)\n    deleteCache(appBuildManifestPath)\n    await writeFileAtomic(\n      appBuildManifestPath,\n      JSON.stringify(appBuildManifest, null, 2)\n    )\n  }\n\n  async loadAppPathsManifest(pageName: string): Promise<void> {\n    this.appPathsManifests.set(\n      getEntryKey('app', 'server', pageName),\n      await readPartialManifest(\n        this.distDir,\n        APP_PATHS_MANIFEST,\n        pageName,\n        'app'\n      )\n    )\n  }\n\n  private async writeAppPathsManifest(): Promise<void> {\n    const appPathsManifest = this.mergePagesManifests(\n      this.appPathsManifests.values()\n    )\n    const appPathsManifestPath = join(\n      this.distDir,\n      'server',\n      APP_PATHS_MANIFEST\n    )\n    deleteCache(appPathsManifestPath)\n    await writeFileAtomic(\n      appPathsManifestPath,\n      JSON.stringify(appPathsManifest, null, 2)\n    )\n  }\n\n  private async writeWebpackStats(): Promise<void> {\n    const webpackStats = this.mergeWebpackStats(\n      this.webpackStats.values()\n    )\n    const path = join(\n      this.distDir,\n      'server',\n      WEBPACK_STATS\n    )\n    deleteCache(path)\n    await writeFileAtomic(\n      path,\n      JSON.stringify(webpackStats, null, 2)\n    )\n  }\n\n  async loadBuildManifest(\n    pageName: string,\n    type: 'app' | 'pages' = 'pages'\n  ): Promise<void> {\n    this.buildManifests.set(\n      getEntryKey(type, 'server', pageName),\n      await readPartialManifest(this.distDir, BUILD_MANIFEST, pageName, type)\n    )\n  }\n\n  async loadWebpackStats(\n    pageName: string,\n    type: 'app' | 'pages' = 'pages'\n  ): Promise<void> {\n    this.webpackStats.set(\n      getEntryKey(type, 'client', pageName),\n      await readPartialManifest(this.distDir, WEBPACK_STATS, pageName, type)\n    )\n  }\n\n  private mergeWebpackStats(statsFiles: Iterable<WebpackStats>): WebpackStats {\n    const entrypoints: Record<string, StatsChunkGroup> = {};\n    const assets: Map<string, StatsAsset> = new Map()\n    const chunks: Map<string, StatsChunk> = new Map()\n    const modules: Map<string | number, StatsModule> = new Map()\n\n    for (const statsFile of statsFiles) {\n      if (statsFile.entrypoints) {\n        for (const [k, v] of Object.entries(\n          statsFile.entrypoints\n        )) {\n          if (!entrypoints[k]) {\n            entrypoints[k] = v\n          }\n        }\n      }\n\n      if (statsFile.assets) {\n        for (const asset of statsFile.assets) {\n          if (!assets.has(asset.name)) {\n            assets.set(asset.name, asset)\n          }\n        }\n      }\n\n      if (statsFile.chunks) {\n        for (const chunk of statsFile.chunks) {\n          if (!chunks.has(chunk.name)) {\n            chunks.set(chunk.name, chunk)\n          }\n        }\n      }\n\n      if (statsFile.modules) {\n        for (const module of statsFile.modules) {\n          const id = module.id;\n          if (id != null) {\n            // Merge the chunk list for the module. This can vary across endpoints.\n            const existing = modules.get(id);\n            if (existing == null) {\n              modules.set(id, module)\n            } else if (module.chunks != null && existing.chunks != null) {\n              for (const chunk of module.chunks) {\n                if (!existing.chunks.includes(chunk)) {\n                  existing.chunks.push(chunk)\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return {\n      entrypoints,\n      assets: [...assets.values()],\n      chunks: [...chunks.values()],\n      modules: [...modules.values()],\n    }\n  }\n\n  private mergeBuildManifests(manifests: Iterable<BuildManifest>) {\n    const manifest: Partial<BuildManifest> & Pick<BuildManifest, 'pages'> = {\n      pages: {\n        '/_app': [],\n      },\n      // Something in next.js depends on these to exist even for app dir rendering\n      devFiles: [],\n      ampDevFiles: [],\n      polyfillFiles: [],\n      lowPriorityFiles: [\n        `static/${this.buildId}/_ssgManifest.js`,\n        `static/${this.buildId}/_buildManifest.js`,\n      ],\n      rootMainFiles: [],\n      ampFirstPages: [],\n    }\n    for (const m of manifests) {\n      Object.assign(manifest.pages, m.pages)\n      if (m.rootMainFiles.length) manifest.rootMainFiles = m.rootMainFiles\n      // polyfillFiles should always be the same, so we can overwrite instead of actually merging\n      if (m.polyfillFiles.length) manifest.polyfillFiles = m.polyfillFiles\n    }\n    return manifest\n  }\n\n  private async writeBuildManifest(\n    entrypoints: Entrypoints,\n    devRewrites: SetupOpts['fsChecker']['rewrites'] | undefined,\n    productionRewrites: CustomRoutes['rewrites'] | undefined\n  ): Promise<void> {\n    const rewrites = productionRewrites ?? {\n      ...devRewrites,\n      beforeFiles: (devRewrites?.beforeFiles ?? []).map(processRoute),\n      afterFiles: (devRewrites?.afterFiles ?? []).map(processRoute),\n      fallback: (devRewrites?.fallback ?? []).map(processRoute),\n    }\n    const buildManifest = this.mergeBuildManifests(this.buildManifests.values())\n    const buildManifestPath = join(this.distDir, BUILD_MANIFEST)\n    const middlewareBuildManifestPath = join(\n      this.distDir,\n      'server',\n      `${MIDDLEWARE_BUILD_MANIFEST}.js`\n    )\n    const interceptionRewriteManifestPath = join(\n      this.distDir,\n      'server',\n      `${INTERCEPTION_ROUTE_REWRITE_MANIFEST}.js`\n    )\n    deleteCache(buildManifestPath)\n    deleteCache(middlewareBuildManifestPath)\n    deleteCache(interceptionRewriteManifestPath)\n    await writeFileAtomic(\n      buildManifestPath,\n      JSON.stringify(buildManifest, null, 2)\n    )\n    await writeFileAtomic(\n      middlewareBuildManifestPath,\n      `self.__BUILD_MANIFEST=${JSON.stringify(buildManifest)};`\n    )\n\n    const interceptionRewrites = JSON.stringify(\n      rewrites.beforeFiles.filter(isInterceptionRouteRewrite)\n    )\n\n    await writeFileAtomic(\n      interceptionRewriteManifestPath,\n      `self.__INTERCEPTION_ROUTE_REWRITE_MANIFEST=${JSON.stringify(\n        interceptionRewrites\n      )};`\n    )\n\n    const pagesKeys = [...entrypoints.page.keys()]\n    if (entrypoints.global.app) {\n      pagesKeys.push('/_app')\n    }\n    if (entrypoints.global.error) {\n      pagesKeys.push('/_error')\n    }\n\n    const sortedPageKeys = getSortedRoutes(pagesKeys)\n    const content: ClientBuildManifest = {\n      __rewrites: normalizeRewritesForBuildManifest(rewrites) as any,\n      ...Object.fromEntries(\n        sortedPageKeys.map((pathname) => [\n          pathname,\n          [`static/chunks/pages${pathname === '/' ? '/index' : pathname}.js`],\n        ])\n      ),\n      sortedPages: sortedPageKeys,\n    }\n    const buildManifestJs = `self.__BUILD_MANIFEST = ${JSON.stringify(\n      content\n    )};self.__BUILD_MANIFEST_CB && self.__BUILD_MANIFEST_CB()`\n    await writeFileAtomic(\n      join(this.distDir, 'static', this.buildId, '_buildManifest.js'),\n      buildManifestJs\n    )\n    await writeFileAtomic(\n      join(this.distDir, 'static', this.buildId, '_ssgManifest.js'),\n      srcEmptySsgManifest\n    )\n  }\n\n  private async writeClientMiddlewareManifest(): Promise<void> {\n    const middlewareManifest = this.mergeMiddlewareManifests(\n      this.middlewareManifests.values()\n    )\n\n    const matchers = middlewareManifest?.middleware['/']?.matchers || []\n\n    const clientMiddlewareManifestPath = join(\n      this.distDir,\n      'static',\n      this.buildId,\n      `${TURBOPACK_CLIENT_MIDDLEWARE_MANIFEST}`\n    )\n    deleteCache(clientMiddlewareManifestPath)\n    await writeFileAtomic(\n      clientMiddlewareManifestPath,\n      JSON.stringify(matchers, null, 2)\n    )\n  }\n\n  private async writeFallbackBuildManifest(): Promise<void> {\n    const fallbackBuildManifest = this.mergeBuildManifests(\n      [\n        this.buildManifests.get(getEntryKey('pages', 'server', '_app')),\n        this.buildManifests.get(getEntryKey('pages', 'server', '_error')),\n      ].filter(Boolean) as BuildManifest[]\n    )\n    const fallbackBuildManifestPath = join(\n      this.distDir,\n      `fallback-${BUILD_MANIFEST}`\n    )\n    deleteCache(fallbackBuildManifestPath)\n    await writeFileAtomic(\n      fallbackBuildManifestPath,\n      JSON.stringify(fallbackBuildManifest, null, 2)\n    )\n  }\n\n  async loadFontManifest(\n    pageName: string,\n    type: 'app' | 'pages' = 'pages'\n  ): Promise<void> {\n    this.fontManifests.set(\n      getEntryKey(type, 'server', pageName),\n      await readPartialManifest(\n        this.distDir,\n        `${NEXT_FONT_MANIFEST}.json`,\n        pageName,\n        type\n      )\n    )\n  }\n\n  private mergeFontManifests(manifests: Iterable<NextFontManifest>) {\n    const manifest: NextFontManifest = {\n      app: {},\n      appUsingSizeAdjust: false,\n      pages: {},\n      pagesUsingSizeAdjust: false,\n    }\n    for (const m of manifests) {\n      Object.assign(manifest.app, m.app)\n      Object.assign(manifest.pages, m.pages)\n\n      manifest.appUsingSizeAdjust =\n        manifest.appUsingSizeAdjust || m.appUsingSizeAdjust\n      manifest.pagesUsingSizeAdjust =\n        manifest.pagesUsingSizeAdjust || m.pagesUsingSizeAdjust\n    }\n    return manifest\n  }\n\n  private async writeNextFontManifest(): Promise<void> {\n    const fontManifest = this.mergeFontManifests(this.fontManifests.values())\n    const json = JSON.stringify(fontManifest, null, 2)\n\n    const fontManifestJsonPath = join(\n      this.distDir,\n      'server',\n      `${NEXT_FONT_MANIFEST}.json`\n    )\n    const fontManifestJsPath = join(\n      this.distDir,\n      'server',\n      `${NEXT_FONT_MANIFEST}.js`\n    )\n    deleteCache(fontManifestJsonPath)\n    deleteCache(fontManifestJsPath)\n    await writeFileAtomic(fontManifestJsonPath, json)\n    await writeFileAtomic(\n      fontManifestJsPath,\n      `self.__NEXT_FONT_MANIFEST=${JSON.stringify(json)}`\n    )\n  }\n\n  async loadLoadableManifest(\n    pageName: string,\n    type: 'app' | 'pages' = 'pages'\n  ): Promise<void> {\n    this.loadableManifests.set(\n      getEntryKey(type, 'server', pageName),\n      await readPartialManifest(\n        this.distDir,\n        REACT_LOADABLE_MANIFEST,\n        pageName,\n        type\n      )\n    )\n  }\n\n  private mergeLoadableManifests(manifests: Iterable<LoadableManifest>) {\n    const manifest: LoadableManifest = {}\n    for (const m of manifests) {\n      Object.assign(manifest, m)\n    }\n    return manifest\n  }\n\n  private async writeLoadableManifest(): Promise<void> {\n    const loadableManifest = this.mergeLoadableManifests(\n      this.loadableManifests.values()\n    )\n    const loadableManifestPath = join(this.distDir, REACT_LOADABLE_MANIFEST)\n    const middlewareloadableManifestPath = join(\n      this.distDir,\n      'server',\n      `${MIDDLEWARE_REACT_LOADABLE_MANIFEST}.js`\n    )\n\n    const json = JSON.stringify(loadableManifest, null, 2)\n\n    deleteCache(loadableManifestPath)\n    deleteCache(middlewareloadableManifestPath)\n    await writeFileAtomic(loadableManifestPath, json)\n    await writeFileAtomic(\n      middlewareloadableManifestPath,\n      `self.__REACT_LOADABLE_MANIFEST=${JSON.stringify(json)}`\n    )\n  }\n\n  async loadMiddlewareManifest(\n    pageName: string,\n    type: 'pages' | 'app' | 'middleware' | 'instrumentation'\n  ): Promise<void> {\n    this.middlewareManifests.set(\n      getEntryKey(\n        type === 'middleware' || type === 'instrumentation' ? 'root' : type,\n        'server',\n        pageName\n      ),\n      await readPartialManifest(\n        this.distDir,\n        MIDDLEWARE_MANIFEST,\n        pageName,\n        type\n      )\n    )\n  }\n\n  getMiddlewareManifest(key: EntryKey) {\n    return this.middlewareManifests.get(key)\n  }\n\n  deleteMiddlewareManifest(key: EntryKey) {\n    return this.middlewareManifests.delete(key)\n  }\n\n  private mergeMiddlewareManifests(\n    manifests: Iterable<TurbopackMiddlewareManifest>\n  ): MiddlewareManifest {\n    const manifest: MiddlewareManifest = {\n      version: 3,\n      middleware: {},\n      sortedMiddleware: [],\n      functions: {},\n    }\n    let instrumentation: InstrumentationDefinition | undefined = undefined\n    for (const m of manifests) {\n      Object.assign(manifest.functions, m.functions)\n      Object.assign(manifest.middleware, m.middleware)\n      if (m.instrumentation) {\n        instrumentation = m.instrumentation\n      }\n    }\n    const updateFunctionDefinition = (\n      fun: EdgeFunctionDefinition\n    ): EdgeFunctionDefinition => {\n      return {\n        ...fun,\n        files: [...(instrumentation?.files ?? []), ...fun.files],\n      }\n    }\n    for (const key of Object.keys(manifest.middleware)) {\n      const value = manifest.middleware[key]\n      manifest.middleware[key] = updateFunctionDefinition(value)\n    }\n    for (const key of Object.keys(manifest.functions)) {\n      const value = manifest.functions[key]\n      manifest.functions[key] = updateFunctionDefinition(value)\n    }\n    for (const fun of Object.values(manifest.functions).concat(\n      Object.values(manifest.middleware)\n    )) {\n      for (const matcher of fun.matchers) {\n        if (!matcher.regexp) {\n          matcher.regexp = pathToRegexp(matcher.originalSource, [], {\n            delimiter: '/',\n            sensitive: false,\n            strict: true,\n          }).source.replaceAll('\\\\/', '/')\n        }\n      }\n    }\n    manifest.sortedMiddleware = Object.keys(manifest.middleware)\n\n    return manifest\n  }\n\n  private async writeMiddlewareManifest(): Promise<void> {\n    const middlewareManifest = this.mergeMiddlewareManifests(\n      this.middlewareManifests.values()\n    )\n\n    // Normalize regexes as it uses path-to-regexp\n    for (const key in middlewareManifest.middleware) {\n      middlewareManifest.middleware[key].matchers.forEach((matcher) => {\n        if (!matcher.regexp.startsWith('^')) {\n          const parsedPage = tryToParsePath(matcher.regexp)\n          if (parsedPage.error || !parsedPage.regexStr) {\n            throw new Error(`Invalid source: ${matcher.regexp}`)\n          }\n          matcher.regexp = parsedPage.regexStr\n        }\n      })\n    }\n\n    const middlewareManifestPath = join(\n      this.distDir,\n      'server',\n      MIDDLEWARE_MANIFEST\n    )\n    deleteCache(middlewareManifestPath)\n    await writeFileAtomic(\n      middlewareManifestPath,\n      JSON.stringify(middlewareManifest, null, 2)\n    )\n  }\n\n  async loadPagesManifest(pageName: string): Promise<void> {\n    this.pagesManifests.set(\n      getEntryKey('pages', 'server', pageName),\n      await readPartialManifest(this.distDir, PAGES_MANIFEST, pageName)\n    )\n  }\n\n  private mergePagesManifests(manifests: Iterable<PagesManifest>) {\n    const manifest: PagesManifest = {}\n    for (const m of manifests) {\n      Object.assign(manifest, m)\n    }\n    return manifest\n  }\n\n  private async writePagesManifest(): Promise<void> {\n    const pagesManifest = this.mergePagesManifests(this.pagesManifests.values())\n    const pagesManifestPath = join(this.distDir, 'server', PAGES_MANIFEST)\n    deleteCache(pagesManifestPath)\n    await writeFileAtomic(\n      pagesManifestPath,\n      JSON.stringify(pagesManifest, null, 2)\n    )\n  }\n\n  async writeManifests({\n    devRewrites,\n    productionRewrites,\n    entrypoints,\n  }: {\n    devRewrites: SetupOpts['fsChecker']['rewrites'] | undefined\n    productionRewrites: CustomRoutes['rewrites'] | undefined\n    entrypoints: Entrypoints\n  }) {\n    await this.writeActionManifest()\n    await this.writeAppBuildManifest()\n    await this.writeAppPathsManifest()\n    await this.writeBuildManifest(entrypoints, devRewrites, productionRewrites)\n    await this.writeFallbackBuildManifest()\n    await this.writeLoadableManifest()\n    await this.writeMiddlewareManifest()\n    await this.writeClientMiddlewareManifest()\n    await this.writeNextFontManifest()\n    await this.writePagesManifest()\n\n    if (process.env.TURBOPACK_STATS != null) {\n      await this.writeWebpackStats()\n    }\n  }\n}\n"],"names":["TurbopackManifestLoader","getManifestPath","page","distDir","name","type","manifestPath","posix","join","getAssetPathFromRoute","readPartialManifest","pageName","isSitemapRoute","test","existsSync","replace","endsWith","metadataPage","addRouteSuffix","addMetadataIdToRoute","removeRouteSuffix","JSON","parse","readFile","constructor","buildId","encryptionKey","actionManifests","Map","appBuildManifests","appPathsManifests","buildManifests","fontManifests","loadableManifests","middlewareManifests","pagesManifests","webpackStats","delete","key","loadActionManifest","set","getEntryKey","SERVER_REFERENCE_MANIFEST","mergeActionManifests","manifests","manifest","node","edge","mergeActionIds","actionEntries","other","action","workers","layer","Object","assign","m","writeActionManifest","actionManifest","values","actionManifestJsonPath","actionManifestJsPath","json","stringify","deleteCache","writeFileAtomic","loadAppBuildManifest","APP_BUILD_MANIFEST","mergeAppBuildManifests","pages","writeAppBuildManifest","appBuildManifest","appBuildManifestPath","loadAppPathsManifest","APP_PATHS_MANIFEST","writeAppPathsManifest","appPathsManifest","mergePagesManifests","appPathsManifestPath","writeWebpackStats","mergeWebpackStats","path","WEBPACK_STATS","loadBuildManifest","BUILD_MANIFEST","loadWebpackStats","statsFiles","entrypoints","assets","chunks","modules","statsFile","k","v","entries","asset","has","chunk","module","id","existing","get","includes","push","mergeBuildManifests","devFiles","ampDevFiles","polyfillFiles","lowPriorityFiles","rootMainFiles","ampFirstPages","length","writeBuildManifest","devRewrites","productionRewrites","rewrites","beforeFiles","map","processRoute","afterFiles","fallback","buildManifest","buildManifestPath","middlewareBuildManifestPath","MIDDLEWARE_BUILD_MANIFEST","interceptionRewriteManifestPath","INTERCEPTION_ROUTE_REWRITE_MANIFEST","interceptionRewrites","filter","isInterceptionRouteRewrite","pagesKeys","keys","global","app","error","sortedPageKeys","getSortedRoutes","content","__rewrites","normalizeRewritesForBuildManifest","fromEntries","pathname","sortedPages","buildManifestJs","srcEmptySsgManifest","writeClientMiddlewareManifest","middlewareManifest","mergeMiddlewareManifests","matchers","middleware","clientMiddlewareManifestPath","TURBOPACK_CLIENT_MIDDLEWARE_MANIFEST","writeFallbackBuildManifest","fallbackBuildManifest","Boolean","fallbackBuildManifestPath","loadFontManifest","NEXT_FONT_MANIFEST","mergeFontManifests","appUsingSizeAdjust","pagesUsingSizeAdjust","writeNextFontManifest","fontManifest","fontManifestJsonPath","fontManifestJsPath","loadLoadableManifest","REACT_LOADABLE_MANIFEST","mergeLoadableManifests","writeLoadableManifest","loadableManifest","loadableManifestPath","middlewareloadableManifestPath","MIDDLEWARE_REACT_LOADABLE_MANIFEST","loadMiddlewareManifest","MIDDLEWARE_MANIFEST","getMiddlewareManifest","deleteMiddlewareManifest","version","sortedMiddleware","functions","instrumentation","undefined","updateFunctionDefinition","fun","files","value","concat","matcher","regexp","pathToRegexp","originalSource","delimiter","sensitive","strict","source","replaceAll","writeMiddlewareManifest","forEach","startsWith","parsedPage","tryToParsePath","regexStr","Error","middlewareManifestPath","loadPagesManifest","PAGES_MANIFEST","writePagesManifest","pagesManifest","pagesManifestPath","writeManifests","process","env","TURBOPACK_STATS"],"mappings":"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"}